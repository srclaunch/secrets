var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// ../../node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "../../node_modules/object-assign/index.js"(exports, module2) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// ../../node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS({
  "../../node_modules/react/cjs/react.production.min.js"(exports) {
    "use strict";
    var l = require_object_assign();
    var n = 60103;
    var p = 60106;
    exports.Fragment = 60107;
    exports.StrictMode = 60108;
    exports.Profiler = 60114;
    var q = 60109;
    var r = 60110;
    var t = 60112;
    exports.Suspense = 60113;
    var u = 60115;
    var v = 60116;
    if (typeof Symbol === "function" && Symbol.for) {
      w = Symbol.for;
      n = w("react.element");
      p = w("react.portal");
      exports.Fragment = w("react.fragment");
      exports.StrictMode = w("react.strict_mode");
      exports.Profiler = w("react.profiler");
      q = w("react.provider");
      r = w("react.context");
      t = w("react.forward_ref");
      exports.Suspense = w("react.suspense");
      u = w("react.memo");
      v = w("react.lazy");
    }
    var w;
    var x = typeof Symbol === "function" && Symbol.iterator;
    function y(a) {
      if (a === null || typeof a !== "object")
        return null;
      a = x && a[x] || a["@@iterator"];
      return typeof a === "function" ? a : null;
    }
    function z(a) {
      for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
        b += "&args[]=" + encodeURIComponent(arguments[c]);
      return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var A = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } };
    var B = {};
    function C(a, b, c) {
      this.props = a;
      this.context = b;
      this.refs = B;
      this.updater = c || A;
    }
    C.prototype.isReactComponent = {};
    C.prototype.setState = function(a, b) {
      if (typeof a !== "object" && typeof a !== "function" && a != null)
        throw Error(z(85));
      this.updater.enqueueSetState(this, a, b, "setState");
    };
    C.prototype.forceUpdate = function(a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function D() {
    }
    D.prototype = C.prototype;
    function E(a, b, c) {
      this.props = a;
      this.context = b;
      this.refs = B;
      this.updater = c || A;
    }
    var F = E.prototype = new D();
    F.constructor = E;
    l(F, C.prototype);
    F.isPureReactComponent = true;
    var G = { current: null };
    var H = Object.prototype.hasOwnProperty;
    var I = { key: true, ref: true, __self: true, __source: true };
    function J(a, b, c) {
      var e, d = {}, k = null, h = null;
      if (b != null)
        for (e in b.ref !== void 0 && (h = b.ref), b.key !== void 0 && (k = "" + b.key), b)
          H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);
      var g = arguments.length - 2;
      if (g === 1)
        d.children = c;
      else if (1 < g) {
        for (var f = Array(g), m = 0; m < g; m++)
          f[m] = arguments[m + 2];
        d.children = f;
      }
      if (a && a.defaultProps)
        for (e in g = a.defaultProps, g)
          d[e] === void 0 && (d[e] = g[e]);
      return { $$typeof: n, type: a, key: k, ref: h, props: d, _owner: G.current };
    }
    function K(a, b) {
      return { $$typeof: n, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
    }
    function L(a) {
      return typeof a === "object" && a !== null && a.$$typeof === n;
    }
    function escape(a) {
      var b = { "=": "=0", ":": "=2" };
      return "$" + a.replace(/[=:]/g, function(a2) {
        return b[a2];
      });
    }
    var M = /\/+/g;
    function N(a, b) {
      return typeof a === "object" && a !== null && a.key != null ? escape("" + a.key) : b.toString(36);
    }
    function O(a, b, c, e, d) {
      var k = typeof a;
      if (k === "undefined" || k === "boolean")
        a = null;
      var h = false;
      if (a === null)
        h = true;
      else
        switch (k) {
          case "string":
          case "number":
            h = true;
            break;
          case "object":
            switch (a.$$typeof) {
              case n:
              case p:
                h = true;
            }
        }
      if (h)
        return h = a, d = d(h), a = e === "" ? "." + N(h, 0) : e, Array.isArray(d) ? (c = "", a != null && (c = a.replace(M, "$&/") + "/"), O(d, b, c, "", function(a2) {
          return a2;
        })) : d != null && (L(d) && (d = K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a)), b.push(d)), 1;
      h = 0;
      e = e === "" ? "." : e + ":";
      if (Array.isArray(a))
        for (var g = 0; g < a.length; g++) {
          k = a[g];
          var f = e + N(k, g);
          h += O(k, b, c, f, d);
        }
      else if (f = y(a), typeof f === "function")
        for (a = f.call(a), g = 0; !(k = a.next()).done; )
          k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d);
      else if (k === "object")
        throw b = "" + a, Error(z(31, b === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
      return h;
    }
    function P(a, b, c) {
      if (a == null)
        return a;
      var e = [], d = 0;
      O(a, e, "", "", function(a2) {
        return b.call(c, a2, d++);
      });
      return e;
    }
    function Q(a) {
      if (a._status === -1) {
        var b = a._result;
        b = b();
        a._status = 0;
        a._result = b;
        b.then(function(b2) {
          a._status === 0 && (b2 = b2.default, a._status = 1, a._result = b2);
        }, function(b2) {
          a._status === 0 && (a._status = 2, a._result = b2);
        });
      }
      if (a._status === 1)
        return a._result;
      throw a._result;
    }
    var R = { current: null };
    function S() {
      var a = R.current;
      if (a === null)
        throw Error(z(321));
      return a;
    }
    var T = { ReactCurrentDispatcher: R, ReactCurrentBatchConfig: { transition: 0 }, ReactCurrentOwner: G, IsSomeRendererActing: { current: false }, assign: l };
    exports.Children = { map: P, forEach: function(a, b, c) {
      P(a, function() {
        b.apply(this, arguments);
      }, c);
    }, count: function(a) {
      var b = 0;
      P(a, function() {
        b++;
      });
      return b;
    }, toArray: function(a) {
      return P(a, function(a2) {
        return a2;
      }) || [];
    }, only: function(a) {
      if (!L(a))
        throw Error(z(143));
      return a;
    } };
    exports.Component = C;
    exports.PureComponent = E;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;
    exports.cloneElement = function(a, b, c) {
      if (a === null || a === void 0)
        throw Error(z(267, a));
      var e = l({}, a.props), d = a.key, k = a.ref, h = a._owner;
      if (b != null) {
        b.ref !== void 0 && (k = b.ref, h = G.current);
        b.key !== void 0 && (d = "" + b.key);
        if (a.type && a.type.defaultProps)
          var g = a.type.defaultProps;
        for (f in b)
          H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = b[f] === void 0 && g !== void 0 ? g[f] : b[f]);
      }
      var f = arguments.length - 2;
      if (f === 1)
        e.children = c;
      else if (1 < f) {
        g = Array(f);
        for (var m = 0; m < f; m++)
          g[m] = arguments[m + 2];
        e.children = g;
      }
      return {
        $$typeof: n,
        type: a.type,
        key: d,
        ref: k,
        props: e,
        _owner: h
      };
    };
    exports.createContext = function(a, b) {
      b === void 0 && (b = null);
      a = { $$typeof: r, _calculateChangedBits: b, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null };
      a.Provider = { $$typeof: q, _context: a };
      return a.Consumer = a;
    };
    exports.createElement = J;
    exports.createFactory = function(a) {
      var b = J.bind(null, a);
      b.type = a;
      return b;
    };
    exports.createRef = function() {
      return { current: null };
    };
    exports.forwardRef = function(a) {
      return { $$typeof: t, render: a };
    };
    exports.isValidElement = L;
    exports.lazy = function(a) {
      return { $$typeof: v, _payload: { _status: -1, _result: a }, _init: Q };
    };
    exports.memo = function(a, b) {
      return { $$typeof: u, type: a, compare: b === void 0 ? null : b };
    };
    exports.useCallback = function(a, b) {
      return S().useCallback(a, b);
    };
    exports.useContext = function(a, b) {
      return S().useContext(a, b);
    };
    exports.useDebugValue = function() {
    };
    exports.useEffect = function(a, b) {
      return S().useEffect(a, b);
    };
    exports.useImperativeHandle = function(a, b, c) {
      return S().useImperativeHandle(a, b, c);
    };
    exports.useLayoutEffect = function(a, b) {
      return S().useLayoutEffect(a, b);
    };
    exports.useMemo = function(a, b) {
      return S().useMemo(a, b);
    };
    exports.useReducer = function(a, b, c) {
      return S().useReducer(a, b, c);
    };
    exports.useRef = function(a) {
      return S().useRef(a);
    };
    exports.useState = function(a) {
      return S().useState(a);
    };
    exports.version = "17.0.2";
  }
});

// ../../node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "../../node_modules/react/cjs/react.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var _assign = require_object_assign();
        var ReactVersion = "17.0.2";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        exports.Fragment = 60107;
        exports.StrictMode = 60108;
        exports.Profiler = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        exports.Suspense = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          exports.Fragment = symbolFor("react.fragment");
          exports.StrictMode = symbolFor("react.strict_mode");
          exports.Profiler = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          exports.Suspense = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: 0
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        }
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        _assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case exports.Fragment:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case exports.Profiler:
              return "Profiler";
            case exports.StrictMode:
              return "StrictMode";
            case exports.Suspense:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentName(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              key = "" + config.key;
            }
            self = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (!!(element === null || element === void 0)) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }
          var propName;
          var props = _assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = "" + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }
          return children;
        }
        function createContext(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === void 0) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
              }
            }
          }
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
              if (payload._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = defaultExport;
              }
            }, function(error2) {
              if (payload._status === Pending) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
          }
          if (payload._status === Resolved) {
            return payload._result;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: -1,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (render.displayName == null) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (type.displayName == null) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== void 0) {
              error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
            }
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        function useState(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case exports.Suspense:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (Array.isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentName(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentName(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (Array.isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === exports.Fragment) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        {
          try {
            var frozenObject = Object.freeze({});
            /* @__PURE__ */ new Map([[frozenObject, null]]);
            /* @__PURE__ */ new Set([frozenObject]);
          } catch (e) {
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component;
        exports.PureComponent = PureComponent;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.useCallback = useCallback;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue;
        exports.useEffect = useEffect;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef;
        exports.useState = useState;
        exports.version = ReactVersion;
      })();
    }
  }
});

// ../../node_modules/react/index.js
var require_react = __commonJS({
  "../../node_modules/react/index.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_production_min();
    } else {
      module2.exports = require_react_development();
    }
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  getParameters: () => getParameters,
  getSecrets: () => getSecrets
});

// ../exceptions/lib/index.es.js
var import_react = __toESM(require_react(), 1);
var import_logger = __toESM(require("@srclaunch/logger"), 1);

// ../../node_modules/nanoid/index.js
var import_crypto = __toESM(require("crypto"), 1);

// ../../node_modules/nanoid/url-alphabet/index.js
var urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";

// ../../node_modules/nanoid/index.js
var POOL_SIZE_MULTIPLIER = 128;
var pool;
var poolOffset;
var fillPool = (bytes) => {
  if (!pool || pool.length < bytes) {
    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);
    import_crypto.default.randomFillSync(pool);
    poolOffset = 0;
  } else if (poolOffset + bytes > pool.length) {
    import_crypto.default.randomFillSync(pool);
    poolOffset = 0;
  }
  poolOffset += bytes;
};
var nanoid = (size = 21) => {
  fillPool(size -= 0);
  let id = "";
  for (let i = poolOffset - size; i < poolOffset; i++) {
    id += urlAlphabet[pool[i] & 63];
  }
  return id;
};

// ../exceptions/lib/index.es.js
var __defProp2 = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var ErrorBoundary = class extends import_react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      hasError: false
    };
  }
  static getDerivedStateFromError(error) {
    return {
      hasError: true
    };
  }
  componentDidCatch(err) {
    const logger22 = new import_logger.Logger();
    const exception = new Exception("Error caught in ErrorBoundary", {
      cause: err
    });
    logger22.exception(exception);
  }
  render() {
    return this.props.children;
  }
};
var Activities$1;
(function(Activities2) {
  Activities2["Comment"] = "comment";
  Activities2["Create"] = "create";
  Activities2["Delete"] = "delete";
  Activities2["Edit"] = "edit";
  Activities2["Invoice"] = "invoice";
  Activities2["Message"] = "message";
  Activities2["PageView"] = "pageView";
  Activities2["Paid"] = "paid";
  Activities2["Payment"] = "payment";
  Activities2["Purchase"] = "purchase";
  Activities2["Referral"] = "referral";
  Activities2["Renewal"] = "renewal";
  Activities2["Signup"] = "signup";
  Activities2["Subscription"] = "subscription";
  Activities2["Upgrade"] = "upgrade";
})(Activities$1 || (Activities$1 = {}));
var Analytics$1;
(function(Analytics2) {
  Analytics2["Business"] = "business";
  Analytics2["Engineering"] = "engineering";
  Analytics2["Exception"] = "exception";
  Analytics2["LogMessage"] = "log-message";
  Analytics2["Marketing"] = "marketing";
  Analytics2["PageLeave"] = "page-leave";
  Analytics2["PageView"] = "page-view";
  Analytics2["Product"] = "product";
  Analytics2["QualityManagement"] = "quality-management";
  Analytics2["UserAccess"] = "user-access";
  Analytics2["UserLogin"] = "user-login";
  Analytics2["UserLogout"] = "user-logout";
  Analytics2["UserSignup"] = "user-signup";
  Analytics2["UserPreferencesChanged"] = "user-preferences-changed";
  Analytics2["WebsiteVisit"] = "website-visit";
})(Analytics$1 || (Analytics$1 = {}));
var PageLeaveMethod$1;
(function(PageLeaveMethod2) {
  PageLeaveMethod2["CloseTab"] = "close-tab";
  PageLeaveMethod2["ExternalLink"] = "external-link";
  PageLeaveMethod2["NavigateAway"] = "navigate-away";
  PageLeaveMethod2["Unknown"] = "unknown";
})(PageLeaveMethod$1 || (PageLeaveMethod$1 = {}));
var DeploymentTarget$1;
(function(DeploymentTarget2) {
  DeploymentTarget2["Ecs"] = "Ecs";
})(DeploymentTarget$1 || (DeploymentTarget$1 = {}));
var DeploymentStatus$1;
(function(DeploymentStatus2) {
  DeploymentStatus2["Finished"] = "Finished";
  DeploymentStatus2["Queued"] = "Queued";
  DeploymentStatus2["Running"] = "Running";
  DeploymentStatus2["Started"] = "Started";
})(DeploymentStatus$1 || (DeploymentStatus$1 = {}));
var DeviceType$1;
(function(DeviceType2) {
  DeviceType2["Mobile"] = "mobile";
  DeviceType2["TV"] = "tv";
  DeviceType2["Watch"] = "watch";
  DeviceType2["Web"] = "web";
})(DeviceType$1 || (DeviceType$1 = {}));
var EnvironmentType$1;
(function(EnvironmentType2) {
  EnvironmentType2["Development"] = "Development";
  EnvironmentType2["NonProduction"] = "NonProduction";
  EnvironmentType2["Production"] = "Production";
})(EnvironmentType$1 || (EnvironmentType$1 = {}));
var OnboardingStatus$1;
(function(OnboardingStatus2) {
  OnboardingStatus2["Completed"] = "completed";
  OnboardingStatus2["Started"] = "started";
  OnboardingStatus2["Uncompleted"] = "uncompleted";
})(OnboardingStatus$1 || (OnboardingStatus$1 = {}));
var PipelineType$1;
(function(PipelineType2) {
  PipelineType2["Build"] = "Build";
  PipelineType2["Deployment"] = "Deployment";
  PipelineType2["Test"] = "Test";
})(PipelineType$1 || (PipelineType$1 = {}));
var PipelineWorkflowStatus$1;
(function(PipelineWorkflowStatus2) {
  PipelineWorkflowStatus2["Canceled"] = "Canceled";
  PipelineWorkflowStatus2["Completed"] = "Completed";
  PipelineWorkflowStatus2["Failed"] = "Failed";
  PipelineWorkflowStatus2["Running"] = "Running";
  PipelineWorkflowStatus2["Queued"] = "Queued";
  PipelineWorkflowStatus2["Waiting"] = "Waiting";
})(PipelineWorkflowStatus$1 || (PipelineWorkflowStatus$1 = {}));
var PipelineStepStatus$1;
(function(PipelineStepStatus2) {
  PipelineStepStatus2["Canceled"] = "Canceled";
  PipelineStepStatus2["Completed"] = "Completed";
  PipelineStepStatus2["Failed"] = "Failed";
  PipelineStepStatus2["Running"] = "Running";
  PipelineStepStatus2["Queued"] = "Queued";
  PipelineStepStatus2["Waiting"] = "Waiting";
})(PipelineStepStatus$1 || (PipelineStepStatus$1 = {}));
var PageRole$1;
(function(PageRole2) {
  PageRole2["ForgotPassword"] = "forgot_password";
  PageRole2["Index"] = "index";
  PageRole2["Login"] = "login";
  PageRole2["PageNotFound"] = "404";
  PageRole2["Signup"] = "signup";
  PageRole2["VerifyCode"] = "verify_code";
})(PageRole$1 || (PageRole$1 = {}));
var AlertLevel$1;
(function(AlertLevel2) {
  AlertLevel2["Info"] = "info";
  AlertLevel2["Warning"] = "warning";
  AlertLevel2["Error"] = "error";
  AlertLevel2["Success"] = "success";
})(AlertLevel$1 || (AlertLevel$1 = {}));
var ModalType$1;
(function(ModalType2) {
  ModalType2["Details"] = "details";
  ModalType2["Dialog"] = "dialog";
})(ModalType$1 || (ModalType$1 = {}));
var NotificationType$1;
(function(NotificationType2) {
  NotificationType2["Info"] = "info";
  NotificationType2["Warning"] = "warning";
  NotificationType2["Error"] = "error";
  NotificationType2["Success"] = "success";
})(NotificationType$1 || (NotificationType$1 = {}));
var DataPointMetric$1;
(function(DataPointMetric2) {
  DataPointMetric2["AccountBalance"] = "AccountBalance";
  DataPointMetric2["UserAssets"] = "UserAssets";
  DataPointMetric2["UserCreditCardDebt"] = "UserCreditCardDebt";
  DataPointMetric2["UserCreditLimit"] = "UserCreditLimit";
  DataPointMetric2["UserCreditUtilization"] = "UserCreditUtilization";
  DataPointMetric2["UserDebt"] = "UserDebt";
  DataPointMetric2["UserInvestments"] = "UserInvestments";
  DataPointMetric2["UserRetirement"] = "UserRetirement";
  DataPointMetric2["UserSavings"] = "UserSavings";
})(DataPointMetric$1 || (DataPointMetric$1 = {}));
var DefaultValue$1;
(function(DefaultValue2) {
  DefaultValue2["DateTime"] = "date_time";
  DefaultValue2["True"] = "true";
  DefaultValue2["False"] = "false";
  DefaultValue2["UniqueId"] = "unique_id";
})(DefaultValue$1 || (DefaultValue$1 = {}));
var ModelType$1;
(function(ModelType2) {
  ModelType2["DomainModel"] = "domain_entity";
  ModelType2["GenericModel"] = "generic_entity";
})(ModelType$1 || (ModelType$1 = {}));
var Primitives$1;
(function(Primitives2) {
  Primitives2["AirportCode"] = "airport-code";
  Primitives2["BankIDCode"] = "bank-id-code";
  Primitives2["BitcoinAddress"] = "bitcoin-address";
  Primitives2["Boolean"] = "boolean";
  Primitives2["City"] = "city";
  Primitives2["Color"] = "color";
  Primitives2["CountryCode"] = "country-code";
  Primitives2["CreditCard"] = "credit-card";
  Primitives2["CurrencyAmount"] = "currency-amount";
  Primitives2["CurrencyCode"] = "currency-code";
  Primitives2["DataURI"] = "data-uri";
  Primitives2["Date"] = "date";
  Primitives2["DateRange"] = "date-range";
  Primitives2["DateTime"] = "date-time";
  Primitives2["DayOfMonth"] = "day-of-month";
  Primitives2["DomainName"] = "domain-name";
  Primitives2["EmailAddress"] = "email-address";
  Primitives2["EthereumAddress"] = "ethereum-address";
  Primitives2["EAN"] = "european-article-number";
  Primitives2["EIN"] = "employer-identification-number";
  Primitives2["Float"] = "float";
  Primitives2["GeographicCoordinate"] = "geographic-coordinate";
  Primitives2["GeographicCoordinates"] = "geographic-coordinates";
  Primitives2["GitRepositoryURL"] = "git-repository-url";
  Primitives2["HSLColor"] = "hsl-color";
  Primitives2["HexColor"] = "hex-color";
  Primitives2["Hexadecimal"] = "hexadecimal";
  Primitives2["IBAN"] = "international-bank-account-number";
  Primitives2["IMEI"] = "international-mobile-equipment-identifier";
  Primitives2["IPAddress"] = "ip-address";
  Primitives2["IPAddressRange"] = "ip-address-range";
  Primitives2["ISBN"] = "international-standard-book-number";
  Primitives2["ISIN"] = "international-stock-number";
  Primitives2["ISMN"] = "international-standard-music-number";
  Primitives2["ISSN"] = "international-standard-serial-number";
  Primitives2["ISO8601"] = "iso-8601";
  Primitives2["ISO31661Alpha2"] = "iso-31661-alpha-2";
  Primitives2["ISO31661Alpha3"] = "iso-31661-alpha-3";
  Primitives2["ISO4217"] = "iso-4217";
  Primitives2["Image"] = "image";
  Primitives2["Integer"] = "integer";
  Primitives2["JSON"] = "json";
  Primitives2["LanguageCode"] = "language-code";
  Primitives2["LicensePlateNumber"] = "license-plate-number";
  Primitives2["LongText"] = "long-text";
  Primitives2["MD5"] = "md5";
  Primitives2["Markdown"] = "markdown";
  Primitives2["Menu"] = "menu";
  Primitives2["Number"] = "number";
  Primitives2["MACAddress"] = "mac-address";
  Primitives2["MagnetURI"] = "magnet-uri";
  Primitives2["MimeType"] = "mime-type";
  Primitives2["Month"] = "month";
  Primitives2["Password"] = "password";
  Primitives2["PassportNumber"] = "passport-number";
  Primitives2["Percent"] = "percent";
  Primitives2["PhoneNumber"] = "phone-number";
  Primitives2["Port"] = "port";
  Primitives2["PostalCode"] = "postal-code";
  Primitives2["Province"] = "province";
  Primitives2["RFC3339"] = "rfc-3339";
  Primitives2["RGBColor"] = "rgb-color";
  Primitives2["SemanticVersion"] = "semantic-version";
  Primitives2["SSN"] = "social-security-number";
  Primitives2["State"] = "state";
  Primitives2["StreetAddress"] = "street-address";
  Primitives2["String"] = "string";
  Primitives2["Tags"] = "tags";
  Primitives2["TaxIDNumber"] = "tax-id-number";
  Primitives2["Time"] = "time";
  Primitives2["TimeOfDay"] = "time-of-day";
  Primitives2["TimeRange"] = "time-range";
  Primitives2["TimezoneRegion"] = "timezone-region";
  Primitives2["URL"] = "url";
  Primitives2["URLPath"] = "url-path";
  Primitives2["UUID"] = "uuid";
  Primitives2["VATIDNumber"] = "value-added-tax-id-number";
  Primitives2["VerificationCode"] = "verification-code";
  Primitives2["Video"] = "video";
  Primitives2["Weekday"] = "weekday";
  Primitives2["Year"] = "year";
})(Primitives$1 || (Primitives$1 = {}));
var Severity$1;
(function(Severity2) {
  Severity2["Critical"] = "Critical";
  Severity2["Error"] = "Error";
  Severity2["Fatal"] = "Fatal";
  Severity2["Warning"] = "Warning";
})(Severity$1 || (Severity$1 = {}));
var Condition$1;
(function(Condition2) {
  Condition2["Contains"] = "contains";
  Condition2["HasCharacterCount"] = "has-character-count";
  Condition2["HasNumberCount"] = "has-number-count";
  Condition2["HasLetterCount"] = "has-letter-count";
  Condition2["HasLowercaseCount"] = "has-lowercase-count";
  Condition2["HasSpacesCount"] = "has-spaces-count";
  Condition2["HasSymbolCount"] = "has-symbol-count";
  Condition2["HasUppercaseCount"] = "has-uppercase-count";
  Condition2["IsAfter"] = "is-after";
  Condition2["IsAfterOrEqual"] = "is-after-or-equal";
  Condition2["IsAirport"] = "is-airport";
  Condition2["IsAlpha"] = "is-alpha";
  Condition2["IsAlphanumeric"] = "is-alphanumeric";
  Condition2["IsAlgorithmHash"] = "is-algorithm-hash";
  Condition2["IsAscii"] = "is-ascii";
  Condition2["IsBase64"] = "is-base-64";
  Condition2["IsBefore"] = "is-before";
  Condition2["IsBeforeOrAfter"] = "is-before-or-after";
  Condition2["IsBeforeOrEqual"] = "is-before-or-equal";
  Condition2["IsBetween"] = "is-between";
  Condition2["IsBIC"] = "is-bic";
  Condition2["IsBitcoinAddress"] = "is-bitcoin-address";
  Condition2["IsBoolean"] = "is-boolean";
  Condition2["IsColor"] = "is-color";
  Condition2["IsComplexEnough"] = "is-complex-enough";
  Condition2["IsCountry"] = "is-country";
  Condition2["IsCreditCard"] = "is-credit-card";
  Condition2["IsCurrency"] = "is-currency";
  Condition2["IsDataURI"] = "is-data-uri";
  Condition2["IsDate"] = "is-date";
  Condition2["IsDateRange"] = "is-date-range";
  Condition2["IsDateTime"] = "is-date-time";
  Condition2["IsDayOfMonth"] = "is-day-of-month";
  Condition2["IsDecimal"] = "is-decimal";
  Condition2["IsDivisibleBy"] = "is-divisible-by";
  Condition2["IsDomainName"] = "is-domain-name";
  Condition2["IsEmailAddress"] = "is-email-address";
  Condition2["IsEthereumAddress"] = "is-ethereum-address";
  Condition2["IsEAN"] = "is-ean";
  Condition2["IsEIN"] = "is-ein";
  Condition2["IsEqual"] = "is-equal";
  Condition2["IsEvenNumber"] = "is-even-number";
  Condition2["IsFloat"] = "is-float";
  Condition2["IsIBAN"] = "is-iban";
  Condition2["IsGreaterThan"] = "greater-than";
  Condition2["IsGreaterThanOrEqual"] = "greater-than-or-equal";
  Condition2["IsHSLColor"] = "is-hsl-color";
  Condition2["IsHexColor"] = "is-hex-color";
  Condition2["IsHexadecimal"] = "is-hexadecimal";
  Condition2["IsIdentityCardCode"] = "is-identity-card-code";
  Condition2["IsIMEI"] = "is-imei";
  Condition2["IsInIPAddressRange"] = "is-in-ip-address-range";
  Condition2["IsInList"] = "is-in-list";
  Condition2["IsInTheLast"] = "is-in-the-last";
  Condition2["IsInteger"] = "is-integer";
  Condition2["IsIPAddress"] = "is-ip-address";
  Condition2["IsIPAddressRange"] = "is-ip-address-range";
  Condition2["IsISBN"] = "is-isbn";
  Condition2["IsISIN"] = "is-isin";
  Condition2["IsISMN"] = "is-ismn";
  Condition2["IsISRC"] = "is-isrc";
  Condition2["IsISSN"] = "is-issn";
  Condition2["IsISO4217"] = "is-iso-4217";
  Condition2["IsISO8601"] = "is-iso-8601";
  Condition2["IsISO31661Alpha2"] = "is-iso-31661-alpha-2";
  Condition2["IsISO31661Alpha3"] = "is-iso-31661-alpha-3";
  Condition2["IsJSON"] = "is-json";
  Condition2["IsLanguage"] = "is-language";
  Condition2["IsLatitude"] = "is-latitude";
  Condition2["IsLongitude"] = "is-longitude";
  Condition2["IsLengthEqual"] = "is-length-equal";
  Condition2["IsLengthGreaterThan"] = "is-length-greater-than";
  Condition2["IsLengthGreaterThanOrEqual"] = "is-length-great-than-or-equal";
  Condition2["IsLengthLessThan"] = "is-length-less-than";
  Condition2["IsLengthLessThanOrEqual"] = "is-length-less-than-or-equal";
  Condition2["IsLessThan"] = "less-than";
  Condition2["IsLessThanOrEqual"] = "less-than-or-equal";
  Condition2["IsLicensePlateNumber"] = "is-license-plate-number";
  Condition2["IsLowercase"] = "is-lowercase";
  Condition2["IsOctal"] = "is-octal";
  Condition2["IsMACAddress"] = "is-mac-address";
  Condition2["IsMD5"] = "is-md5";
  Condition2["IsMagnetURI"] = "is-magnet-uri";
  Condition2["IsMarkdown"] = "is-markdown";
  Condition2["IsMimeType"] = "is-mime-type";
  Condition2["IsMonth"] = "is-month";
  Condition2["IsNegativeNumber"] = "is-negative-number";
  Condition2["IsNotDate"] = "is-not-date";
  Condition2["IsNotEqual"] = "is-not-equal";
  Condition2["IsNotInIPAddressRange"] = "is-not-in-ip-address-range";
  Condition2["IsNotInList"] = "is-not-in-list";
  Condition2["IsNotNull"] = "is-not-null";
  Condition2["IsNotRegexMatch"] = "is-not-regex-match";
  Condition2["IsNotToday"] = "is-not-today";
  Condition2["IsNumber"] = "is-number";
  Condition2["IsNumeric"] = "is-numeric";
  Condition2["IsOddNumber"] = "is-odd-number";
  Condition2["IsPassportNumber"] = "is-passport-number";
  Condition2["IsPhoneNumber"] = "is-phone-number";
  Condition2["IsPort"] = "is-port";
  Condition2["IsPositiveNumber"] = "is-positive-number";
  Condition2["IsPostalCode"] = "is-postal-code";
  Condition2["IsProvince"] = "is-province";
  Condition2["IsRGBColor"] = "is-rgb-color";
  Condition2["IsRegexMatch"] = "is-regex-match";
  Condition2["IsRequired"] = "is-required";
  Condition2["IsSemanticVersion"] = "is-semantic-version";
  Condition2["IsSlug"] = "is-slug";
  Condition2["IsSSN"] = "is-ssn";
  Condition2["IsState"] = "is-state";
  Condition2["IsStreetAddress"] = "is-street-address";
  Condition2["IsString"] = "is-string";
  Condition2["IsStrongPassword"] = "is-strong-password";
  Condition2["IsTags"] = "is-tags";
  Condition2["IsTaxIDNumber"] = "is-tax-id-number";
  Condition2["IsThisMonth"] = "is-this-month";
  Condition2["IsThisQuarter"] = "is-this-quarter";
  Condition2["IsThisWeek"] = "is-this-week";
  Condition2["IsThisWeekend"] = "is-this-weekend";
  Condition2["IsThisYear"] = "is-this-year";
  Condition2["IsTime"] = "is-time";
  Condition2["IsTimeOfDay"] = "is-time-of-day";
  Condition2["IsTimeRange"] = "is-time-range";
  Condition2["IsToday"] = "is-today";
  Condition2["IsURL"] = "is-url";
  Condition2["IsUUID"] = "is-uuid";
  Condition2["IsUppercase"] = "is-uppercase";
  Condition2["IsUsernameAvailable"] = "is-username-available";
  Condition2["IsValidStreetAddress"] = "is-valid-street-address";
  Condition2["IsVATIDNumber"] = "is-vat-id-number";
  Condition2["IsWeekday"] = "is-weekday";
  Condition2["IsWeekend"] = "is-weekend";
  Condition2["IsYear"] = "is-year";
})(Condition$1 || (Condition$1 = {}));
var AuthenticationCondition$1;
(function(AuthenticationCondition2) {
  AuthenticationCondition2["IsAuthenticated"] = "is-authenticated";
  AuthenticationCondition2["IsNotAuthenticated"] = "is-not-authenticated";
  AuthenticationCondition2["IsUsernameAvailable"] = "is-username-available";
  AuthenticationCondition2["PasswordMismatch"] = "password-mismatch";
})(AuthenticationCondition$1 || (AuthenticationCondition$1 = {}));
var ColorCondition$1;
(function(ColorCondition2) {
  ColorCondition2[ColorCondition2["IsHSLColor"] = Condition$1.IsHSLColor] = "IsHSLColor";
  ColorCondition2[ColorCondition2["IsHexColor"] = Condition$1.IsHexColor] = "IsHexColor";
  ColorCondition2[ColorCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  ColorCondition2[ColorCondition2["IsRGBColor"] = Condition$1.IsRGBColor] = "IsRGBColor";
  ColorCondition2[ColorCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(ColorCondition$1 || (ColorCondition$1 = {}));
var CurrencyCondition$1;
(function(CurrencyCondition2) {
  CurrencyCondition2[CurrencyCondition2["IsBetween"] = Condition$1.IsBetween] = "IsBetween";
  CurrencyCondition2[CurrencyCondition2["IsCurrency"] = Condition$1.IsCurrency] = "IsCurrency";
  CurrencyCondition2[CurrencyCondition2["IsDecimal"] = Condition$1.IsDecimal] = "IsDecimal";
  CurrencyCondition2[CurrencyCondition2["IsDivisibleBy"] = Condition$1.IsDivisibleBy] = "IsDivisibleBy";
  CurrencyCondition2[CurrencyCondition2["IsEvenNumber"] = Condition$1.IsEvenNumber] = "IsEvenNumber";
  CurrencyCondition2[CurrencyCondition2["IsFloat"] = Condition$1.IsFloat] = "IsFloat";
  CurrencyCondition2[CurrencyCondition2["IsGreaterThan"] = Condition$1.IsGreaterThan] = "IsGreaterThan";
  CurrencyCondition2[CurrencyCondition2["IsGreaterThanOrEqual"] = Condition$1.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  CurrencyCondition2[CurrencyCondition2["IsInteger"] = Condition$1.IsInteger] = "IsInteger";
  CurrencyCondition2[CurrencyCondition2["IsISO8601"] = Condition$1.IsISO8601] = "IsISO8601";
  CurrencyCondition2[CurrencyCondition2["IsLessThan"] = Condition$1.IsLessThan] = "IsLessThan";
  CurrencyCondition2[CurrencyCondition2["IsLessThanOrEqual"] = Condition$1.IsLessThanOrEqual] = "IsLessThanOrEqual";
  CurrencyCondition2[CurrencyCondition2["IsNegativeNumber"] = Condition$1.IsNegativeNumber] = "IsNegativeNumber";
  CurrencyCondition2[CurrencyCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  CurrencyCondition2[CurrencyCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  CurrencyCondition2[CurrencyCondition2["IsNumber"] = Condition$1.IsNumber] = "IsNumber";
  CurrencyCondition2[CurrencyCondition2["IsOddNumber"] = Condition$1.IsOddNumber] = "IsOddNumber";
  CurrencyCondition2[CurrencyCondition2["IsPositiveNumber"] = Condition$1.IsPositiveNumber] = "IsPositiveNumber";
})(CurrencyCondition$1 || (CurrencyCondition$1 = {}));
var BitcoinAddressCondition$1;
(function(BitcoinAddressCondition2) {
  BitcoinAddressCondition2[BitcoinAddressCondition2["IsBitcoinAddress"] = Condition$1.IsBitcoinAddress] = "IsBitcoinAddress";
  BitcoinAddressCondition2[BitcoinAddressCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  BitcoinAddressCondition2[BitcoinAddressCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  BitcoinAddressCondition2[BitcoinAddressCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
})(BitcoinAddressCondition$1 || (BitcoinAddressCondition$1 = {}));
var EthereumAddressCondition$1;
(function(EthereumAddressCondition2) {
  EthereumAddressCondition2[EthereumAddressCondition2["IsEthereumAddress"] = Condition$1.IsEthereumAddress] = "IsEthereumAddress";
  EthereumAddressCondition2[EthereumAddressCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  EthereumAddressCondition2[EthereumAddressCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  EthereumAddressCondition2[EthereumAddressCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
})(EthereumAddressCondition$1 || (EthereumAddressCondition$1 = {}));
var LanguageCondition$1;
(function(LanguageCondition2) {
  LanguageCondition2[LanguageCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  LanguageCondition2[LanguageCondition2["IsJSON"] = Condition$1.IsJSON] = "IsJSON";
  LanguageCondition2[LanguageCondition2["IsLanguage"] = Condition$1.IsLanguage] = "IsLanguage";
  LanguageCondition2[LanguageCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  LanguageCondition2[LanguageCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
})(LanguageCondition$1 || (LanguageCondition$1 = {}));
var CityCondition$1;
(function(CityCondition2) {
  CityCondition2[CityCondition2["IsAlpha"] = Condition$1.IsAlpha] = "IsAlpha";
  CityCondition2[CityCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  CityCondition2[CityCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  CityCondition2[CityCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  CityCondition2[CityCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  CityCondition2[CityCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  CityCondition2[CityCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(CityCondition$1 || (CityCondition$1 = {}));
var CountryCondition$1;
(function(CountryCondition2) {
  CountryCondition2[CountryCondition2["IsAlpha"] = Condition$1.IsAlpha] = "IsAlpha";
  CountryCondition2[CountryCondition2["IsCountry"] = Condition$1.IsCountry] = "IsCountry";
  CountryCondition2[CountryCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  CountryCondition2[CountryCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  CountryCondition2[CountryCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  CountryCondition2[CountryCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  CountryCondition2[CountryCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  CountryCondition2[CountryCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(CountryCondition$1 || (CountryCondition$1 = {}));
var LatitudeCondition$1;
(function(LatitudeCondition2) {
  LatitudeCondition2[LatitudeCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  LatitudeCondition2[LatitudeCondition2["IsFloat"] = Condition$1.IsFloat] = "IsFloat";
  LatitudeCondition2[LatitudeCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  LatitudeCondition2[LatitudeCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  LatitudeCondition2[LatitudeCondition2["IsNumeric"] = Condition$1.IsNumeric] = "IsNumeric";
})(LatitudeCondition$1 || (LatitudeCondition$1 = {}));
var LongitudeCondition$1;
(function(LongitudeCondition2) {
  LongitudeCondition2[LongitudeCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  LongitudeCondition2[LongitudeCondition2["IsFloat"] = Condition$1.IsFloat] = "IsFloat";
  LongitudeCondition2[LongitudeCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  LongitudeCondition2[LongitudeCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  LongitudeCondition2[LongitudeCondition2["IsNumeric"] = Condition$1.IsNumeric] = "IsNumeric";
})(LongitudeCondition$1 || (LongitudeCondition$1 = {}));
var PostalCodeCondition$1;
(function(PostalCodeCondition2) {
  PostalCodeCondition2[PostalCodeCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  PostalCodeCondition2[PostalCodeCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  PostalCodeCondition2[PostalCodeCondition2["IsPostalCode"] = Condition$1.IsPostalCode] = "IsPostalCode";
  PostalCodeCondition2[PostalCodeCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
})(PostalCodeCondition$1 || (PostalCodeCondition$1 = {}));
var ProvinceCondition$1;
(function(ProvinceCondition2) {
  ProvinceCondition2[ProvinceCondition2["IsAlpha"] = Condition$1.IsAlpha] = "IsAlpha";
  ProvinceCondition2[ProvinceCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  ProvinceCondition2[ProvinceCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  ProvinceCondition2[ProvinceCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  ProvinceCondition2[ProvinceCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  ProvinceCondition2[ProvinceCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  ProvinceCondition2[ProvinceCondition2["IsProvince"] = Condition$1.IsProvince] = "IsProvince";
  ProvinceCondition2[ProvinceCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(ProvinceCondition$1 || (ProvinceCondition$1 = {}));
var StateCondition$1;
(function(StateCondition2) {
  StateCondition2[StateCondition2["IsAlpha"] = Condition$1.IsAlpha] = "IsAlpha";
  StateCondition2[StateCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  StateCondition2[StateCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  StateCondition2[StateCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  StateCondition2[StateCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  StateCondition2[StateCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  StateCondition2[StateCondition2["IsState"] = Condition$1.IsState] = "IsState";
  StateCondition2[StateCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(StateCondition$1 || (StateCondition$1 = {}));
var StreetAddressCondition$1;
(function(StreetAddressCondition2) {
  StreetAddressCondition2[StreetAddressCondition2["IsAlphanumeric"] = Condition$1.IsAlphanumeric] = "IsAlphanumeric";
  StreetAddressCondition2[StreetAddressCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  StreetAddressCondition2[StreetAddressCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  StreetAddressCondition2[StreetAddressCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  StreetAddressCondition2[StreetAddressCondition2["IsString"] = Condition$1.IsString] = "IsString";
  StreetAddressCondition2[StreetAddressCondition2["IsStreetAddress"] = Condition$1.IsStreetAddress] = "IsStreetAddress";
})(StreetAddressCondition$1 || (StreetAddressCondition$1 = {}));
var AirportCondition$1;
(function(AirportCondition2) {
  AirportCondition2[AirportCondition2["IsAirport"] = Condition$1.IsAirport] = "IsAirport";
  AirportCondition2[AirportCondition2["IsAlpha"] = Condition$1.IsAlpha] = "IsAlpha";
  AirportCondition2[AirportCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  AirportCondition2[AirportCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  AirportCondition2[AirportCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  AirportCondition2[AirportCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  AirportCondition2[AirportCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  AirportCondition2[AirportCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(AirportCondition$1 || (AirportCondition$1 = {}));
var AlgorithmHashCondition$1;
(function(AlgorithmHashCondition2) {
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsAlgorithmHash"] = Condition$1.IsAlgorithmHash] = "IsAlgorithmHash";
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(AlgorithmHashCondition$1 || (AlgorithmHashCondition$1 = {}));
var SemanticVersionCondition$1;
(function(SemanticVersionCondition2) {
  SemanticVersionCondition2[SemanticVersionCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  SemanticVersionCondition2[SemanticVersionCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  SemanticVersionCondition2[SemanticVersionCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  SemanticVersionCondition2[SemanticVersionCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  SemanticVersionCondition2[SemanticVersionCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  SemanticVersionCondition2[SemanticVersionCondition2["IsSemanticVersion"] = Condition$1.IsSemanticVersion] = "IsSemanticVersion";
  SemanticVersionCondition2[SemanticVersionCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(SemanticVersionCondition$1 || (SemanticVersionCondition$1 = {}));
var UUIDCondition$1;
(function(UUIDCondition2) {
  UUIDCondition2[UUIDCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  UUIDCondition2[UUIDCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  UUIDCondition2[UUIDCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  UUIDCondition2[UUIDCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  UUIDCondition2[UUIDCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  UUIDCondition2[UUIDCondition2["IsString"] = Condition$1.IsString] = "IsString";
  UUIDCondition2[UUIDCondition2["IsUUID"] = Condition$1.IsUUID] = "IsUUID";
})(UUIDCondition$1 || (UUIDCondition$1 = {}));
var MD5Condition$1;
(function(MD5Condition2) {
  MD5Condition2[MD5Condition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  MD5Condition2[MD5Condition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  MD5Condition2[MD5Condition2["IsMD5"] = Condition$1.IsMD5] = "IsMD5";
  MD5Condition2[MD5Condition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  MD5Condition2[MD5Condition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  MD5Condition2[MD5Condition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  MD5Condition2[MD5Condition2["IsString"] = Condition$1.IsString] = "IsString";
})(MD5Condition$1 || (MD5Condition$1 = {}));
var BooleanCondition$1;
(function(BooleanCondition2) {
  BooleanCondition2[BooleanCondition2["IsBoolean"] = Condition$1.IsBoolean] = "IsBoolean";
  BooleanCondition2[BooleanCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  BooleanCondition2[BooleanCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  BooleanCondition2[BooleanCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
})(BooleanCondition$1 || (BooleanCondition$1 = {}));
var DateCondition$1;
(function(DateCondition2) {
  DateCondition2[DateCondition2["IsAfter"] = Condition$1.IsAfter] = "IsAfter";
  DateCondition2[DateCondition2["IsAfterOrEqual"] = Condition$1.IsAfterOrEqual] = "IsAfterOrEqual";
  DateCondition2[DateCondition2["IsBefore"] = Condition$1.IsBefore] = "IsBefore";
  DateCondition2[DateCondition2["IsBeforeOrEqual"] = Condition$1.IsBeforeOrEqual] = "IsBeforeOrEqual";
  DateCondition2[DateCondition2["IsBetween"] = Condition$1.IsBetween] = "IsBetween";
  DateCondition2[DateCondition2["IsDate"] = Condition$1.IsDate] = "IsDate";
  DateCondition2[DateCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  DateCondition2[DateCondition2["IsNotDate"] = Condition$1.IsNotDate] = "IsNotDate";
  DateCondition2[DateCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  DateCondition2[DateCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  DateCondition2[DateCondition2["IsNotToday"] = Condition$1.IsNotToday] = "IsNotToday";
  DateCondition2[DateCondition2["IsThisWeek"] = Condition$1.IsThisWeek] = "IsThisWeek";
  DateCondition2[DateCondition2["IsThisMonth"] = Condition$1.IsThisMonth] = "IsThisMonth";
  DateCondition2[DateCondition2["IsThisQuarter"] = Condition$1.IsThisQuarter] = "IsThisQuarter";
  DateCondition2[DateCondition2["IsThisYear"] = Condition$1.IsThisYear] = "IsThisYear";
  DateCondition2[DateCondition2["IsToday"] = Condition$1.IsToday] = "IsToday";
  DateCondition2[DateCondition2["IsWeekend"] = Condition$1.IsWeekend] = "IsWeekend";
})(DateCondition$1 || (DateCondition$1 = {}));
var DateRangeCondition$1;
(function(DateRangeCondition2) {
  DateRangeCondition2[DateRangeCondition2["IsAfter"] = Condition$1.IsAfter] = "IsAfter";
  DateRangeCondition2[DateRangeCondition2["IsBefore"] = Condition$1.IsBefore] = "IsBefore";
  DateRangeCondition2[DateRangeCondition2["IsBeforeOrAfter"] = Condition$1.IsBeforeOrAfter] = "IsBeforeOrAfter";
  DateRangeCondition2[DateRangeCondition2["IsBetween"] = Condition$1.IsBetween] = "IsBetween";
  DateRangeCondition2[DateRangeCondition2["IsDate"] = Condition$1.IsDate] = "IsDate";
  DateRangeCondition2[DateRangeCondition2["IsDateRange"] = Condition$1.IsDateRange] = "IsDateRange";
  DateRangeCondition2[DateRangeCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  DateRangeCondition2[DateRangeCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  DateRangeCondition2[DateRangeCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
})(DateRangeCondition$1 || (DateRangeCondition$1 = {}));
var DateTimeCondition$1;
(function(DateTimeCondition2) {
  DateTimeCondition2[DateTimeCondition2["IsAfter"] = Condition$1.IsAfter] = "IsAfter";
  DateTimeCondition2[DateTimeCondition2["IsAfterOrEqual"] = Condition$1.IsAfterOrEqual] = "IsAfterOrEqual";
  DateTimeCondition2[DateTimeCondition2["IsBefore"] = Condition$1.IsBefore] = "IsBefore";
  DateTimeCondition2[DateTimeCondition2["IsBeforeOrEqual"] = Condition$1.IsBeforeOrEqual] = "IsBeforeOrEqual";
  DateTimeCondition2[DateTimeCondition2["IsBetween"] = Condition$1.IsBetween] = "IsBetween";
  DateTimeCondition2[DateTimeCondition2["IsDate"] = Condition$1.IsDate] = "IsDate";
  DateTimeCondition2[DateTimeCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  DateTimeCondition2[DateTimeCondition2["IsNotDate"] = Condition$1.IsNotDate] = "IsNotDate";
  DateTimeCondition2[DateTimeCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  DateTimeCondition2[DateTimeCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  DateTimeCondition2[DateTimeCondition2["IsNotToday"] = Condition$1.IsNotToday] = "IsNotToday";
  DateTimeCondition2[DateTimeCondition2["IsThisWeek"] = Condition$1.IsThisWeek] = "IsThisWeek";
  DateTimeCondition2[DateTimeCondition2["IsThisMonth"] = Condition$1.IsThisMonth] = "IsThisMonth";
  DateTimeCondition2[DateTimeCondition2["IsThisQuarter"] = Condition$1.IsThisQuarter] = "IsThisQuarter";
  DateTimeCondition2[DateTimeCondition2["IsThisYear"] = Condition$1.IsThisYear] = "IsThisYear";
  DateTimeCondition2[DateTimeCondition2["IsToday"] = Condition$1.IsToday] = "IsToday";
  DateTimeCondition2[DateTimeCondition2["IsWeekend"] = Condition$1.IsWeekend] = "IsWeekend";
})(DateTimeCondition$1 || (DateTimeCondition$1 = {}));
var DayOfMonthCondition$1;
(function(DayOfMonthCondition2) {
  DayOfMonthCondition2[DayOfMonthCondition2["IsAfter"] = Condition$1.IsAfter] = "IsAfter";
  DayOfMonthCondition2[DayOfMonthCondition2["IsAfterOrEqual"] = Condition$1.IsAfterOrEqual] = "IsAfterOrEqual";
  DayOfMonthCondition2[DayOfMonthCondition2["IsBefore"] = Condition$1.IsBefore] = "IsBefore";
  DayOfMonthCondition2[DayOfMonthCondition2["IsBeforeOrEqual"] = Condition$1.IsBeforeOrEqual] = "IsBeforeOrEqual";
  DayOfMonthCondition2[DayOfMonthCondition2["IsBetween"] = Condition$1.IsBetween] = "IsBetween";
  DayOfMonthCondition2[DayOfMonthCondition2["IsDayOfMonth"] = Condition$1.IsDayOfMonth] = "IsDayOfMonth";
  DayOfMonthCondition2[DayOfMonthCondition2["IsEvenNumber"] = Condition$1.IsEvenNumber] = "IsEvenNumber";
  DayOfMonthCondition2[DayOfMonthCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  DayOfMonthCondition2[DayOfMonthCondition2["IsGreaterThan"] = Condition$1.IsGreaterThan] = "IsGreaterThan";
  DayOfMonthCondition2[DayOfMonthCondition2["IsGreaterThanOrEqual"] = Condition$1.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  DayOfMonthCondition2[DayOfMonthCondition2["IsInteger"] = Condition$1.IsInteger] = "IsInteger";
  DayOfMonthCondition2[DayOfMonthCondition2["IsLessThan"] = Condition$1.IsLessThan] = "IsLessThan";
  DayOfMonthCondition2[DayOfMonthCondition2["IsLessThanOrEqual"] = Condition$1.IsLessThanOrEqual] = "IsLessThanOrEqual";
  DayOfMonthCondition2[DayOfMonthCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  DayOfMonthCondition2[DayOfMonthCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  DayOfMonthCondition2[DayOfMonthCondition2["IsNumber"] = Condition$1.IsNumber] = "IsNumber";
  DayOfMonthCondition2[DayOfMonthCondition2["IsOddNumber"] = Condition$1.IsOddNumber] = "IsOddNumber";
  DayOfMonthCondition2[DayOfMonthCondition2["IsToday"] = Condition$1.IsToday] = "IsToday";
  DayOfMonthCondition2[DayOfMonthCondition2["IsWeekday"] = Condition$1.IsWeekday] = "IsWeekday";
  DayOfMonthCondition2[DayOfMonthCondition2["IsWeekend"] = Condition$1.IsWeekend] = "IsWeekend";
})(DayOfMonthCondition$1 || (DayOfMonthCondition$1 = {}));
var MonthCondition$1;
(function(MonthCondition2) {
  MonthCondition2[MonthCondition2["IsAfter"] = Condition$1.IsAfter] = "IsAfter";
  MonthCondition2[MonthCondition2["IsAfterOrEqual"] = Condition$1.IsAfterOrEqual] = "IsAfterOrEqual";
  MonthCondition2[MonthCondition2["IsBefore"] = Condition$1.IsBefore] = "IsBefore";
  MonthCondition2[MonthCondition2["IsBeforeOrEqual"] = Condition$1.IsBeforeOrEqual] = "IsBeforeOrEqual";
  MonthCondition2[MonthCondition2["IsBetween"] = Condition$1.IsBetween] = "IsBetween";
  MonthCondition2[MonthCondition2["IsEvenNumber"] = Condition$1.IsEvenNumber] = "IsEvenNumber";
  MonthCondition2[MonthCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  MonthCondition2[MonthCondition2["IsGreaterThan"] = Condition$1.IsGreaterThan] = "IsGreaterThan";
  MonthCondition2[MonthCondition2["IsGreaterThanOrEqual"] = Condition$1.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  MonthCondition2[MonthCondition2["IsInteger"] = Condition$1.IsInteger] = "IsInteger";
  MonthCondition2[MonthCondition2["IsLessThan"] = Condition$1.IsLessThan] = "IsLessThan";
  MonthCondition2[MonthCondition2["IsLessThanOrEqual"] = Condition$1.IsLessThanOrEqual] = "IsLessThanOrEqual";
  MonthCondition2[MonthCondition2["IsMonth"] = Condition$1.IsMonth] = "IsMonth";
  MonthCondition2[MonthCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  MonthCondition2[MonthCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  MonthCondition2[MonthCondition2["IsNumber"] = Condition$1.IsNumber] = "IsNumber";
  MonthCondition2[MonthCondition2["IsOddNumber"] = Condition$1.IsOddNumber] = "IsOddNumber";
  MonthCondition2[MonthCondition2["IsThisMonth"] = Condition$1.IsThisMonth] = "IsThisMonth";
})(MonthCondition$1 || (MonthCondition$1 = {}));
var TimeCondition$1;
(function(TimeCondition2) {
  TimeCondition2[TimeCondition2["IsAfter"] = Condition$1.IsAfter] = "IsAfter";
  TimeCondition2[TimeCondition2["IsAfterOrEqual"] = Condition$1.IsAfterOrEqual] = "IsAfterOrEqual";
  TimeCondition2[TimeCondition2["IsBefore"] = Condition$1.IsBefore] = "IsBefore";
  TimeCondition2[TimeCondition2["IsBeforeOrEqual"] = Condition$1.IsBeforeOrEqual] = "IsBeforeOrEqual";
  TimeCondition2[TimeCondition2["IsBetween"] = Condition$1.IsBetween] = "IsBetween";
  TimeCondition2[TimeCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  TimeCondition2[TimeCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  TimeCondition2[TimeCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  TimeCondition2[TimeCondition2["IsTime"] = Condition$1.IsTime] = "IsTime";
})(TimeCondition$1 || (TimeCondition$1 = {}));
var TimeRangeCondition$1;
(function(TimeRangeCondition2) {
  TimeRangeCondition2[TimeRangeCondition2["IsAfter"] = Condition$1.IsAfter] = "IsAfter";
  TimeRangeCondition2[TimeRangeCondition2["IsBefore"] = Condition$1.IsBefore] = "IsBefore";
  TimeRangeCondition2[TimeRangeCondition2["IsBeforeOrAfter"] = Condition$1.IsBeforeOrAfter] = "IsBeforeOrAfter";
  TimeRangeCondition2[TimeRangeCondition2["IsBetween"] = Condition$1.IsBetween] = "IsBetween";
  TimeRangeCondition2[TimeRangeCondition2["IsTime"] = Condition$1.IsTime] = "IsTime";
  TimeRangeCondition2[TimeRangeCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  TimeRangeCondition2[TimeRangeCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  TimeRangeCondition2[TimeRangeCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  TimeRangeCondition2[TimeRangeCondition2["IsTimeRange"] = Condition$1.IsTimeRange] = "IsTimeRange";
})(TimeRangeCondition$1 || (TimeRangeCondition$1 = {}));
var TimeOfDayCondition$1;
(function(TimeOfDayCondition2) {
  TimeOfDayCondition2[TimeOfDayCondition2["IsAfter"] = Condition$1.IsAfter] = "IsAfter";
  TimeOfDayCondition2[TimeOfDayCondition2["IsBefore"] = Condition$1.IsBefore] = "IsBefore";
  TimeOfDayCondition2[TimeOfDayCondition2["IsBeforeOrAfter"] = Condition$1.IsBeforeOrAfter] = "IsBeforeOrAfter";
  TimeOfDayCondition2[TimeOfDayCondition2["IsBetween"] = Condition$1.IsBetween] = "IsBetween";
  TimeOfDayCondition2[TimeOfDayCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  TimeOfDayCondition2[TimeOfDayCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  TimeOfDayCondition2[TimeOfDayCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  TimeOfDayCondition2[TimeOfDayCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  TimeOfDayCondition2[TimeOfDayCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  TimeOfDayCondition2[TimeOfDayCondition2["IsTimeOfDay"] = Condition$1.IsTimeOfDay] = "IsTimeOfDay";
  TimeOfDayCondition2[TimeOfDayCondition2["IsTimeRange"] = Condition$1.IsTimeRange] = "IsTimeRange";
})(TimeOfDayCondition$1 || (TimeOfDayCondition$1 = {}));
var WeekdayCondition$1;
(function(WeekdayCondition2) {
  WeekdayCondition2[WeekdayCondition2["IsAfter"] = Condition$1.IsAfter] = "IsAfter";
  WeekdayCondition2[WeekdayCondition2["IsAfterOrEqual"] = Condition$1.IsAfterOrEqual] = "IsAfterOrEqual";
  WeekdayCondition2[WeekdayCondition2["IsBefore"] = Condition$1.IsBefore] = "IsBefore";
  WeekdayCondition2[WeekdayCondition2["IsBeforeOrEqual"] = Condition$1.IsBeforeOrEqual] = "IsBeforeOrEqual";
  WeekdayCondition2[WeekdayCondition2["IsBetween"] = Condition$1.IsBetween] = "IsBetween";
  WeekdayCondition2[WeekdayCondition2["IsEvenNumber"] = Condition$1.IsEvenNumber] = "IsEvenNumber";
  WeekdayCondition2[WeekdayCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  WeekdayCondition2[WeekdayCondition2["IsGreaterThan"] = Condition$1.IsGreaterThan] = "IsGreaterThan";
  WeekdayCondition2[WeekdayCondition2["IsGreaterThanOrEqual"] = Condition$1.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  WeekdayCondition2[WeekdayCondition2["IsLessThan"] = Condition$1.IsLessThan] = "IsLessThan";
  WeekdayCondition2[WeekdayCondition2["IsLessThanOrEqual"] = Condition$1.IsLessThanOrEqual] = "IsLessThanOrEqual";
  WeekdayCondition2[WeekdayCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  WeekdayCondition2[WeekdayCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  WeekdayCondition2[WeekdayCondition2["IsNumber"] = Condition$1.IsNumber] = "IsNumber";
  WeekdayCondition2[WeekdayCondition2["IsOddNumber"] = Condition$1.IsOddNumber] = "IsOddNumber";
  WeekdayCondition2[WeekdayCondition2["IsWeekday"] = Condition$1.IsWeekday] = "IsWeekday";
  WeekdayCondition2[WeekdayCondition2["IsWeekend"] = Condition$1.IsWeekend] = "IsWeekend";
})(WeekdayCondition$1 || (WeekdayCondition$1 = {}));
var YearCondition$1;
(function(YearCondition2) {
  YearCondition2[YearCondition2["IsAfter"] = Condition$1.IsAfter] = "IsAfter";
  YearCondition2[YearCondition2["IsAfterOrEqual"] = Condition$1.IsAfterOrEqual] = "IsAfterOrEqual";
  YearCondition2[YearCondition2["IsBefore"] = Condition$1.IsBefore] = "IsBefore";
  YearCondition2[YearCondition2["IsBeforeOrEqual"] = Condition$1.IsBeforeOrEqual] = "IsBeforeOrEqual";
  YearCondition2[YearCondition2["IsBetween"] = Condition$1.IsBetween] = "IsBetween";
  YearCondition2[YearCondition2["IsEvenNumber"] = Condition$1.IsEvenNumber] = "IsEvenNumber";
  YearCondition2[YearCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  YearCondition2[YearCondition2["IsGreaterThan"] = Condition$1.IsGreaterThan] = "IsGreaterThan";
  YearCondition2[YearCondition2["IsGreaterThanOrEqual"] = Condition$1.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  YearCondition2[YearCondition2["IsInteger"] = Condition$1.IsInteger] = "IsInteger";
  YearCondition2[YearCondition2["IsLessThan"] = Condition$1.IsLessThan] = "IsLessThan";
  YearCondition2[YearCondition2["IsLessThanOrEqual"] = Condition$1.IsLessThanOrEqual] = "IsLessThanOrEqual";
  YearCondition2[YearCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  YearCondition2[YearCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  YearCondition2[YearCondition2["IsNumber"] = Condition$1.IsNumber] = "IsNumber";
  YearCondition2[YearCondition2["IsOddNumber"] = Condition$1.IsOddNumber] = "IsOddNumber";
  YearCondition2[YearCondition2["IsThisYear"] = Condition$1.IsThisYear] = "IsThisYear";
  YearCondition2[YearCondition2["IsYear"] = Condition$1.IsYear] = "IsYear";
})(YearCondition$1 || (YearCondition$1 = {}));
var HexadecimalCondition$1;
(function(HexadecimalCondition2) {
  HexadecimalCondition2[HexadecimalCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  HexadecimalCondition2[HexadecimalCondition2["IsHexadecimal"] = Condition$1.IsHexadecimal] = "IsHexadecimal";
  HexadecimalCondition2[HexadecimalCondition2["IsLengthEqual"] = Condition$1.IsLengthEqual] = "IsLengthEqual";
  HexadecimalCondition2[HexadecimalCondition2["IsLengthGreaterThan"] = Condition$1.IsLengthGreaterThan] = "IsLengthGreaterThan";
  HexadecimalCondition2[HexadecimalCondition2["IsLengthGreaterThanOrEqual"] = Condition$1.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual";
  HexadecimalCondition2[HexadecimalCondition2["IsLengthLessThan"] = Condition$1.IsLengthLessThan] = "IsLengthLessThan";
  HexadecimalCondition2[HexadecimalCondition2["IsLengthLessThanOrEqual"] = Condition$1.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual";
  HexadecimalCondition2[HexadecimalCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  HexadecimalCondition2[HexadecimalCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  HexadecimalCondition2[HexadecimalCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(HexadecimalCondition$1 || (HexadecimalCondition$1 = {}));
var JSONCondition$1;
(function(JSONCondition2) {
  JSONCondition2[JSONCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  JSONCondition2[JSONCondition2["IsJSON"] = Condition$1.IsJSON] = "IsJSON";
  JSONCondition2[JSONCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  JSONCondition2[JSONCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
})(JSONCondition$1 || (JSONCondition$1 = {}));
var MarkdownCondition$1;
(function(MarkdownCondition2) {
  MarkdownCondition2[MarkdownCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  MarkdownCondition2[MarkdownCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  MarkdownCondition2[MarkdownCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  MarkdownCondition2[MarkdownCondition2["IsMarkdown"] = Condition$1.IsMarkdown] = "IsMarkdown";
  MarkdownCondition2[MarkdownCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(MarkdownCondition$1 || (MarkdownCondition$1 = {}));
var MenuCondition$1;
(function(MenuCondition2) {
  MenuCondition2[MenuCondition2["Contains"] = Condition$1.Contains] = "Contains";
  MenuCondition2[MenuCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  MenuCondition2[MenuCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  MenuCondition2[MenuCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
})(MenuCondition$1 || (MenuCondition$1 = {}));
var TagsCondition$1;
(function(TagsCondition2) {
  TagsCondition2[TagsCondition2["Contains"] = Condition$1.Contains] = "Contains";
  TagsCondition2[TagsCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  TagsCondition2[TagsCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  TagsCondition2[TagsCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
})(TagsCondition$1 || (TagsCondition$1 = {}));
var DataURICondition$1;
(function(DataURICondition2) {
  DataURICondition2[DataURICondition2["Contains"] = Condition$1.Contains] = "Contains";
  DataURICondition2[DataURICondition2["IsDataURI"] = Condition$1.IsDataURI] = "IsDataURI";
  DataURICondition2[DataURICondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  DataURICondition2[DataURICondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  DataURICondition2[DataURICondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  DataURICondition2[DataURICondition2["IsString"] = Condition$1.IsString] = "IsString";
})(DataURICondition$1 || (DataURICondition$1 = {}));
var DomainNameCondition$1;
(function(DomainNameCondition2) {
  DomainNameCondition2[DomainNameCondition2["Contains"] = Condition$1.Contains] = "Contains";
  DomainNameCondition2[DomainNameCondition2["IsDomainName"] = Condition$1.IsDomainName] = "IsDomainName";
  DomainNameCondition2[DomainNameCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  DomainNameCondition2[DomainNameCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  DomainNameCondition2[DomainNameCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  DomainNameCondition2[DomainNameCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(DomainNameCondition$1 || (DomainNameCondition$1 = {}));
var EmailCondition$1;
(function(EmailCondition2) {
  EmailCondition2[EmailCondition2["Contains"] = Condition$1.Contains] = "Contains";
  EmailCondition2[EmailCondition2["IsEmailAddress"] = Condition$1.IsEmailAddress] = "IsEmailAddress";
  EmailCondition2[EmailCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  EmailCondition2[EmailCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  EmailCondition2[EmailCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  EmailCondition2[EmailCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  EmailCondition2[EmailCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  EmailCondition2[EmailCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(EmailCondition$1 || (EmailCondition$1 = {}));
var IPAddressCondition$1;
(function(IPAddressCondition2) {
  IPAddressCondition2[IPAddressCondition2["Contains"] = Condition$1.Contains] = "Contains";
  IPAddressCondition2[IPAddressCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  IPAddressCondition2[IPAddressCondition2["IsIPAddress"] = Condition$1.IsIPAddress] = "IsIPAddress";
  IPAddressCondition2[IPAddressCondition2["IsInIPAddressRange"] = Condition$1.IsInIPAddressRange] = "IsInIPAddressRange";
  IPAddressCondition2[IPAddressCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  IPAddressCondition2[IPAddressCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  IPAddressCondition2[IPAddressCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  IPAddressCondition2[IPAddressCondition2["IsNotInIPAddressRange"] = Condition$1.IsNotInIPAddressRange] = "IsNotInIPAddressRange";
  IPAddressCondition2[IPAddressCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  IPAddressCondition2[IPAddressCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(IPAddressCondition$1 || (IPAddressCondition$1 = {}));
var IPAddressRangeCondition$1;
(function(IPAddressRangeCondition2) {
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsIPAddressRange"] = Condition$1.IsIPAddressRange] = "IsIPAddressRange";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsNotInIPAddressRange"] = Condition$1.IsNotInIPAddressRange] = "IsNotInIPAddressRange";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(IPAddressRangeCondition$1 || (IPAddressRangeCondition$1 = {}));
var PortCondition$1;
(function(PortCondition2) {
  PortCondition2[PortCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  PortCondition2[PortCondition2["IsGreaterThan"] = Condition$1.IsGreaterThan] = "IsGreaterThan";
  PortCondition2[PortCondition2["IsGreaterThanOrEqual"] = Condition$1.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  PortCondition2[PortCondition2["IsInteger"] = Condition$1.IsInteger] = "IsInteger";
  PortCondition2[PortCondition2["IsLessThan"] = Condition$1.IsLessThan] = "IsLessThan";
  PortCondition2[PortCondition2["IsLessThanOrEqual"] = Condition$1.IsLessThanOrEqual] = "IsLessThanOrEqual";
  PortCondition2[PortCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  PortCondition2[PortCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
})(PortCondition$1 || (PortCondition$1 = {}));
var MACAddressCondition$1;
(function(MACAddressCondition2) {
  MACAddressCondition2[MACAddressCondition2["Contains"] = Condition$1.Contains] = "Contains";
  MACAddressCondition2[MACAddressCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  MACAddressCondition2[MACAddressCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  MACAddressCondition2[MACAddressCondition2["IsMACAddress"] = Condition$1.IsMACAddress] = "IsMACAddress";
  MACAddressCondition2[MACAddressCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  MACAddressCondition2[MACAddressCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  MACAddressCondition2[MACAddressCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  MACAddressCondition2[MACAddressCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(MACAddressCondition$1 || (MACAddressCondition$1 = {}));
var MagnetURICondition$1;
(function(MagnetURICondition2) {
  MagnetURICondition2[MagnetURICondition2["Contains"] = Condition$1.Contains] = "Contains";
  MagnetURICondition2[MagnetURICondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  MagnetURICondition2[MagnetURICondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  MagnetURICondition2[MagnetURICondition2["IsMagnetURI"] = Condition$1.IsMagnetURI] = "IsMagnetURI";
  MagnetURICondition2[MagnetURICondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  MagnetURICondition2[MagnetURICondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  MagnetURICondition2[MagnetURICondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  MagnetURICondition2[MagnetURICondition2["IsString"] = Condition$1.IsString] = "IsString";
})(MagnetURICondition$1 || (MagnetURICondition$1 = {}));
var MimeTypeCondition$1;
(function(MimeTypeCondition2) {
  MimeTypeCondition2[MimeTypeCondition2["Contains"] = Condition$1.Contains] = "Contains";
  MimeTypeCondition2[MimeTypeCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  MimeTypeCondition2[MimeTypeCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  MimeTypeCondition2[MimeTypeCondition2["IsMimeType"] = Condition$1.IsMimeType] = "IsMimeType";
  MimeTypeCondition2[MimeTypeCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  MimeTypeCondition2[MimeTypeCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  MimeTypeCondition2[MimeTypeCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  MimeTypeCondition2[MimeTypeCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(MimeTypeCondition$1 || (MimeTypeCondition$1 = {}));
var SlugCondition$1;
(function(SlugCondition2) {
  SlugCondition2[SlugCondition2["Contains"] = Condition$1.Contains] = "Contains";
  SlugCondition2[SlugCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  SlugCondition2[SlugCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  SlugCondition2[SlugCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  SlugCondition2[SlugCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  SlugCondition2[SlugCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  SlugCondition2[SlugCondition2["IsString"] = Condition$1.IsString] = "IsString";
  SlugCondition2[SlugCondition2["IsSlug"] = Condition$1.IsSlug] = "IsSlug";
})(SlugCondition$1 || (SlugCondition$1 = {}));
var URLCondition$1;
(function(URLCondition2) {
  URLCondition2[URLCondition2["Contains"] = Condition$1.Contains] = "Contains";
  URLCondition2[URLCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  URLCondition2[URLCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  URLCondition2[URLCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  URLCondition2[URLCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  URLCondition2[URLCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  URLCondition2[URLCondition2["IsString"] = Condition$1.IsString] = "IsString";
  URLCondition2[URLCondition2["IsURL"] = Condition$1.IsURL] = "IsURL";
})(URLCondition$1 || (URLCondition$1 = {}));
var NumberCondition$1;
(function(NumberCondition2) {
  NumberCondition2[NumberCondition2["IsAfter"] = Condition$1.IsAfter] = "IsAfter";
  NumberCondition2[NumberCondition2["IsAfterOrEqual"] = Condition$1.IsAfterOrEqual] = "IsAfterOrEqual";
  NumberCondition2[NumberCondition2["IsBefore"] = Condition$1.IsBefore] = "IsBefore";
  NumberCondition2[NumberCondition2["IsBeforeOrEqual"] = Condition$1.IsBeforeOrEqual] = "IsBeforeOrEqual";
  NumberCondition2[NumberCondition2["IsBetween"] = Condition$1.IsBetween] = "IsBetween";
  NumberCondition2[NumberCondition2["IsDecimal"] = Condition$1.IsDecimal] = "IsDecimal";
  NumberCondition2[NumberCondition2["IsDivisibleBy"] = Condition$1.IsDivisibleBy] = "IsDivisibleBy";
  NumberCondition2[NumberCondition2["IsEAN"] = Condition$1.IsEAN] = "IsEAN";
  NumberCondition2[NumberCondition2["IsEIN"] = Condition$1.IsEIN] = "IsEIN";
  NumberCondition2[NumberCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  NumberCondition2[NumberCondition2["IsEvenNumber"] = Condition$1.IsEvenNumber] = "IsEvenNumber";
  NumberCondition2[NumberCondition2["IsFloat"] = Condition$1.IsFloat] = "IsFloat";
  NumberCondition2[NumberCondition2["IsGreaterThan"] = Condition$1.IsGreaterThan] = "IsGreaterThan";
  NumberCondition2[NumberCondition2["IsGreaterThanOrEqual"] = Condition$1.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  NumberCondition2[NumberCondition2["IsInt"] = Condition$1.IsInteger] = "IsInt";
  NumberCondition2[NumberCondition2["IsISBN"] = Condition$1.IsISBN] = "IsISBN";
  NumberCondition2[NumberCondition2["IsISMN"] = Condition$1.IsISMN] = "IsISMN";
  NumberCondition2[NumberCondition2["IsISSN"] = Condition$1.IsISSN] = "IsISSN";
  NumberCondition2[NumberCondition2["IsLatitude"] = Condition$1.IsLatitude] = "IsLatitude";
  NumberCondition2[NumberCondition2["IsLongitude"] = Condition$1.IsLongitude] = "IsLongitude";
  NumberCondition2[NumberCondition2["IsLessThan"] = Condition$1.IsLessThan] = "IsLessThan";
  NumberCondition2[NumberCondition2["IsLessThanOrEqual"] = Condition$1.IsLessThanOrEqual] = "IsLessThanOrEqual";
  NumberCondition2[NumberCondition2["IsMACAddress"] = Condition$1.IsMACAddress] = "IsMACAddress";
  NumberCondition2[NumberCondition2["IsNumber"] = Condition$1.IsNumber] = "IsNumber";
  NumberCondition2[NumberCondition2["IsNegativeNumber"] = Condition$1.IsNegativeNumber] = "IsNegativeNumber";
  NumberCondition2[NumberCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  NumberCondition2[NumberCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  NumberCondition2[NumberCondition2["IsOddNumber"] = Condition$1.IsOddNumber] = "IsOddNumber";
  NumberCondition2[NumberCondition2["IsPassportNumber"] = Condition$1.IsPassportNumber] = "IsPassportNumber";
  NumberCondition2[NumberCondition2["IsPhoneNumber"] = Condition$1.IsPhoneNumber] = "IsPhoneNumber";
  NumberCondition2[NumberCondition2["IsPort"] = Condition$1.IsPort] = "IsPort";
  NumberCondition2[NumberCondition2["IsPositiveNumber"] = Condition$1.IsPositiveNumber] = "IsPositiveNumber";
  NumberCondition2[NumberCondition2["IsPostalCode"] = Condition$1.IsPostalCode] = "IsPostalCode";
  NumberCondition2[NumberCondition2["IsSemanticVersion"] = Condition$1.IsSemanticVersion] = "IsSemanticVersion";
  NumberCondition2[NumberCondition2["IsSSN"] = Condition$1.IsSSN] = "IsSSN";
  NumberCondition2[NumberCondition2["IsTaxIDNumber"] = Condition$1.IsTaxIDNumber] = "IsTaxIDNumber";
  NumberCondition2[NumberCondition2["IsUUID"] = Condition$1.IsUUID] = "IsUUID";
  NumberCondition2[NumberCondition2["IsVATIDNumber"] = Condition$1.IsVATIDNumber] = "IsVATIDNumber";
})(NumberCondition$1 || (NumberCondition$1 = {}));
var FloatCondition$1;
(function(FloatCondition2) {
  FloatCondition2[FloatCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  FloatCondition2[FloatCondition2["IsFloat"] = Condition$1.IsFloat] = "IsFloat";
  FloatCondition2[FloatCondition2["IsGreaterThan"] = Condition$1.IsGreaterThan] = "IsGreaterThan";
  FloatCondition2[FloatCondition2["IsGreaterThanOrEqual"] = Condition$1.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  FloatCondition2[FloatCondition2["IsLessThan"] = Condition$1.IsLessThan] = "IsLessThan";
  FloatCondition2[FloatCondition2["IsLessThanOrEqual"] = Condition$1.IsLessThanOrEqual] = "IsLessThanOrEqual";
  FloatCondition2[FloatCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  FloatCondition2[FloatCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  FloatCondition2[FloatCondition2["IsNumber"] = Condition$1.IsNumber] = "IsNumber";
  FloatCondition2[FloatCondition2["IsNumeric"] = Condition$1.IsNumeric] = "IsNumeric";
})(FloatCondition$1 || (FloatCondition$1 = {}));
var IntegerCondition$1;
(function(IntegerCondition2) {
  IntegerCondition2[IntegerCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  IntegerCondition2[IntegerCondition2["IsInteger"] = Condition$1.IsInteger] = "IsInteger";
  IntegerCondition2[IntegerCondition2["IsGreaterThan"] = Condition$1.IsGreaterThan] = "IsGreaterThan";
  IntegerCondition2[IntegerCondition2["IsGreaterThanOrEqual"] = Condition$1.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  IntegerCondition2[IntegerCondition2["IsLessThan"] = Condition$1.IsLessThan] = "IsLessThan";
  IntegerCondition2[IntegerCondition2["IsLessThanOrEqual"] = Condition$1.IsLessThanOrEqual] = "IsLessThanOrEqual";
  IntegerCondition2[IntegerCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  IntegerCondition2[IntegerCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  IntegerCondition2[IntegerCondition2["IsNumber"] = Condition$1.IsNumber] = "IsNumber";
  IntegerCondition2[IntegerCondition2["IsNumeric"] = Condition$1.IsNumeric] = "IsNumeric";
})(IntegerCondition$1 || (IntegerCondition$1 = {}));
var CreditCardCondition$1;
(function(CreditCardCondition2) {
  CreditCardCondition2[CreditCardCondition2["IsCreditCard"] = Condition$1.IsCreditCard] = "IsCreditCard";
  CreditCardCondition2[CreditCardCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  CreditCardCondition2[CreditCardCondition2["IsLengthEqual"] = Condition$1.IsLengthEqual] = "IsLengthEqual";
  CreditCardCondition2[CreditCardCondition2["IsLengthGreaterThan"] = Condition$1.IsLengthGreaterThan] = "IsLengthGreaterThan";
  CreditCardCondition2[CreditCardCondition2["IsLengthGreaterThanOrEqual"] = Condition$1.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual";
  CreditCardCondition2[CreditCardCondition2["IsLengthLessThan"] = Condition$1.IsLengthLessThan] = "IsLengthLessThan";
  CreditCardCondition2[CreditCardCondition2["IsLengthLessThanOrEqual"] = Condition$1.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual";
  CreditCardCondition2[CreditCardCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  CreditCardCondition2[CreditCardCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  CreditCardCondition2[CreditCardCondition2["IsRegexMatch"] = Condition$1.IsRegexMatch] = "IsRegexMatch";
  CreditCardCondition2[CreditCardCondition2["IsNotRegexMatch"] = Condition$1.IsNotRegexMatch] = "IsNotRegexMatch";
})(CreditCardCondition$1 || (CreditCardCondition$1 = {}));
var EmailAddressCondition$1;
(function(EmailAddressCondition2) {
  EmailAddressCondition2[EmailAddressCondition2["isEmailAddress"] = Condition$1.IsEmailAddress] = "isEmailAddress";
  EmailAddressCondition2[EmailAddressCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  EmailAddressCondition2[EmailAddressCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  EmailAddressCondition2[EmailAddressCondition2["IsLengthEqual"] = Condition$1.IsLengthEqual] = "IsLengthEqual";
  EmailAddressCondition2[EmailAddressCondition2["IsLengthGreaterThan"] = Condition$1.IsLengthGreaterThan] = "IsLengthGreaterThan";
  EmailAddressCondition2[EmailAddressCondition2["IsLengthGreaterThanOrEqual"] = Condition$1.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual";
  EmailAddressCondition2[EmailAddressCondition2["IsLengthLessThan"] = Condition$1.IsLengthLessThan] = "IsLengthLessThan";
  EmailAddressCondition2[EmailAddressCondition2["IsLengthLessThanOrEqual"] = Condition$1.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual";
  EmailAddressCondition2[EmailAddressCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  EmailAddressCondition2[EmailAddressCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  EmailAddressCondition2[EmailAddressCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  EmailAddressCondition2[EmailAddressCondition2["IsRegexMatch"] = Condition$1.IsRegexMatch] = "IsRegexMatch";
  EmailAddressCondition2[EmailAddressCondition2["IsNotRegexMatch"] = Condition$1.IsNotRegexMatch] = "IsNotRegexMatch";
})(EmailAddressCondition$1 || (EmailAddressCondition$1 = {}));
var LicensePlateNumber$1;
(function(LicensePlateNumber2) {
  LicensePlateNumber2[LicensePlateNumber2["IsLicensePlateNumber"] = Condition$1.IsLicensePlateNumber] = "IsLicensePlateNumber";
  LicensePlateNumber2[LicensePlateNumber2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  LicensePlateNumber2[LicensePlateNumber2["IsNotRegexMatch"] = Condition$1.IsNotRegexMatch] = "IsNotRegexMatch";
  LicensePlateNumber2[LicensePlateNumber2["IsString"] = Condition$1.IsString] = "IsString";
  LicensePlateNumber2[LicensePlateNumber2["IsRegexMatch"] = Condition$1.IsRegexMatch] = "IsRegexMatch";
})(LicensePlateNumber$1 || (LicensePlateNumber$1 = {}));
var PassportNumberCondition$1;
(function(PassportNumberCondition2) {
  PassportNumberCondition2[PassportNumberCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  PassportNumberCondition2[PassportNumberCondition2["IsPassportNumber"] = Condition$1.IsPassportNumber] = "IsPassportNumber";
  PassportNumberCondition2[PassportNumberCondition2["IsString"] = Condition$1.IsString] = "IsString";
  PassportNumberCondition2[PassportNumberCondition2["IsRegexMatch"] = Condition$1.IsRegexMatch] = "IsRegexMatch";
})(PassportNumberCondition$1 || (PassportNumberCondition$1 = {}));
var PasswordCondition$1;
(function(PasswordCondition2) {
  PasswordCondition2[PasswordCondition2["IsComplexEnough"] = Condition$1.IsComplexEnough] = "IsComplexEnough";
  PasswordCondition2[PasswordCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  PasswordCondition2[PasswordCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  PasswordCondition2[PasswordCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  PasswordCondition2[PasswordCondition2["IsNotRegexMatch"] = Condition$1.IsNotRegexMatch] = "IsNotRegexMatch";
  PasswordCondition2[PasswordCondition2["IsLengthGreaterThan"] = Condition$1.IsLengthGreaterThan] = "IsLengthGreaterThan";
  PasswordCondition2[PasswordCondition2["IsLengthGreaterThanOrEqual"] = Condition$1.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual";
  PasswordCondition2[PasswordCondition2["IsLengthLessThan"] = Condition$1.IsLengthLessThan] = "IsLengthLessThan";
  PasswordCondition2[PasswordCondition2["IsLengthLessThanOrEqual"] = Condition$1.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual";
  PasswordCondition2[PasswordCondition2["IsStrongPassword"] = Condition$1.IsStrongPassword] = "IsStrongPassword";
  PasswordCondition2[PasswordCondition2["IsString"] = Condition$1.IsString] = "IsString";
  PasswordCondition2[PasswordCondition2["IsRegexMatch"] = Condition$1.IsRegexMatch] = "IsRegexMatch";
})(PasswordCondition$1 || (PasswordCondition$1 = {}));
var PhoneNumberCondition$1;
(function(PhoneNumberCondition2) {
  PhoneNumberCondition2[PhoneNumberCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  PhoneNumberCondition2[PhoneNumberCondition2["IsNotRegexMatch"] = Condition$1.IsNotRegexMatch] = "IsNotRegexMatch";
  PhoneNumberCondition2[PhoneNumberCondition2["IsNumber"] = Condition$1.IsNumber] = "IsNumber";
  PhoneNumberCondition2[PhoneNumberCondition2["IsPhoneNumber"] = Condition$1.IsPhoneNumber] = "IsPhoneNumber";
  PhoneNumberCondition2[PhoneNumberCondition2["IsRegexMatch"] = Condition$1.IsRegexMatch] = "IsRegexMatch";
})(PhoneNumberCondition$1 || (PhoneNumberCondition$1 = {}));
var SocialSecurityNumberCondition$1;
(function(SocialSecurityNumberCondition2) {
  SocialSecurityNumberCondition2[SocialSecurityNumberCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  SocialSecurityNumberCondition2[SocialSecurityNumberCondition2["IsSSN"] = Condition$1.IsSSN] = "IsSSN";
  SocialSecurityNumberCondition2[SocialSecurityNumberCondition2["IsString"] = Condition$1.IsString] = "IsString";
  SocialSecurityNumberCondition2[SocialSecurityNumberCondition2["IsRegexMatch"] = Condition$1.IsRegexMatch] = "IsRegexMatch";
})(SocialSecurityNumberCondition$1 || (SocialSecurityNumberCondition$1 = {}));
var BICCondition$1;
(function(BICCondition2) {
  BICCondition2[BICCondition2["Contains"] = Condition$1.Contains] = "Contains";
  BICCondition2[BICCondition2["IsBIC"] = Condition$1.IsBIC] = "IsBIC";
  BICCondition2[BICCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  BICCondition2[BICCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  BICCondition2[BICCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  BICCondition2[BICCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  BICCondition2[BICCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  BICCondition2[BICCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(BICCondition$1 || (BICCondition$1 = {}));
var EANCondition$1;
(function(EANCondition2) {
  EANCondition2[EANCondition2["Contains"] = Condition$1.Contains] = "Contains";
  EANCondition2[EANCondition2["IsEAN"] = Condition$1.IsEAN] = "IsEAN";
  EANCondition2[EANCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  EANCondition2[EANCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  EANCondition2[EANCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  EANCondition2[EANCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  EANCondition2[EANCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  EANCondition2[EANCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(EANCondition$1 || (EANCondition$1 = {}));
var EINCondition$1;
(function(EINCondition2) {
  EINCondition2[EINCondition2["Contains"] = Condition$1.Contains] = "Contains";
  EINCondition2[EINCondition2["IsEIN"] = Condition$1.IsEIN] = "IsEIN";
  EINCondition2[EINCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  EINCondition2[EINCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  EINCondition2[EINCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  EINCondition2[EINCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  EINCondition2[EINCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  EINCondition2[EINCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(EINCondition$1 || (EINCondition$1 = {}));
var IBANCondition$1;
(function(IBANCondition2) {
  IBANCondition2[IBANCondition2["Contains"] = Condition$1.Contains] = "Contains";
  IBANCondition2[IBANCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  IBANCondition2[IBANCondition2["IsIBAN"] = Condition$1.IsIBAN] = "IsIBAN";
  IBANCondition2[IBANCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  IBANCondition2[IBANCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  IBANCondition2[IBANCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  IBANCondition2[IBANCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  IBANCondition2[IBANCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(IBANCondition$1 || (IBANCondition$1 = {}));
var ISBNCondition$1;
(function(ISBNCondition2) {
  ISBNCondition2[ISBNCondition2["Contains"] = Condition$1.Contains] = "Contains";
  ISBNCondition2[ISBNCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  ISBNCondition2[ISBNCondition2["IsISBN"] = Condition$1.IsISBN] = "IsISBN";
  ISBNCondition2[ISBNCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  ISBNCondition2[ISBNCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  ISBNCondition2[ISBNCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  ISBNCondition2[ISBNCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  ISBNCondition2[ISBNCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(ISBNCondition$1 || (ISBNCondition$1 = {}));
var ISINCondition$1;
(function(ISINCondition2) {
  ISINCondition2[ISINCondition2["Contains"] = Condition$1.Contains] = "Contains";
  ISINCondition2[ISINCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  ISINCondition2[ISINCondition2["IsISIN"] = Condition$1.IsISIN] = "IsISIN";
  ISINCondition2[ISINCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  ISINCondition2[ISINCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  ISINCondition2[ISINCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  ISINCondition2[ISINCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  ISINCondition2[ISINCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(ISINCondition$1 || (ISINCondition$1 = {}));
var ISMNCondition$1;
(function(ISMNCondition2) {
  ISMNCondition2[ISMNCondition2["Contains"] = Condition$1.Contains] = "Contains";
  ISMNCondition2[ISMNCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  ISMNCondition2[ISMNCondition2["IsISMN"] = Condition$1.IsISMN] = "IsISMN";
  ISMNCondition2[ISMNCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  ISMNCondition2[ISMNCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  ISMNCondition2[ISMNCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  ISMNCondition2[ISMNCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  ISMNCondition2[ISMNCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(ISMNCondition$1 || (ISMNCondition$1 = {}));
var ISSNCondition$1;
(function(ISSNCondition2) {
  ISSNCondition2[ISSNCondition2["Contains"] = Condition$1.Contains] = "Contains";
  ISSNCondition2[ISSNCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  ISSNCondition2[ISSNCondition2["IsISSN"] = Condition$1.IsISSN] = "IsISSN";
  ISSNCondition2[ISSNCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  ISSNCondition2[ISSNCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  ISSNCondition2[ISSNCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  ISSNCondition2[ISSNCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  ISSNCondition2[ISSNCondition2["IsString"] = Condition$1.IsString] = "IsString";
})(ISSNCondition$1 || (ISSNCondition$1 = {}));
var TaxIDNumberCondition$1;
(function(TaxIDNumberCondition2) {
  TaxIDNumberCondition2[TaxIDNumberCondition2["Contains"] = Condition$1.Contains] = "Contains";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsString"] = Condition$1.IsString] = "IsString";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsTaxIDNumber"] = Condition$1.IsTaxIDNumber] = "IsTaxIDNumber";
})(TaxIDNumberCondition$1 || (TaxIDNumberCondition$1 = {}));
var VATCondition$1;
(function(VATCondition2) {
  VATCondition2[VATCondition2["Contains"] = Condition$1.Contains] = "Contains";
  VATCondition2[VATCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  VATCondition2[VATCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  VATCondition2[VATCondition2["IsNotEqual"] = Condition$1.IsNotEqual] = "IsNotEqual";
  VATCondition2[VATCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  VATCondition2[VATCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  VATCondition2[VATCondition2["IsString"] = Condition$1.IsString] = "IsString";
  VATCondition2[VATCondition2["IsVATIDNumber"] = Condition$1.IsVATIDNumber] = "IsVATIDNumber";
})(VATCondition$1 || (VATCondition$1 = {}));
var StringCondition$1;
(function(StringCondition2) {
  StringCondition2[StringCondition2["Contains"] = Condition$1.Contains] = "Contains";
  StringCondition2[StringCondition2["HasNumberCount"] = Condition$1.HasNumberCount] = "HasNumberCount";
  StringCondition2[StringCondition2["HasLowercaseCount"] = Condition$1.HasLowercaseCount] = "HasLowercaseCount";
  StringCondition2[StringCondition2["HasLetterCount"] = Condition$1.HasLetterCount] = "HasLetterCount";
  StringCondition2[StringCondition2["HasSpacesCount"] = Condition$1.HasSpacesCount] = "HasSpacesCount";
  StringCondition2[StringCondition2["HasSymbolCount"] = Condition$1.HasSymbolCount] = "HasSymbolCount";
  StringCondition2[StringCondition2["HasUppercaseCount"] = Condition$1.HasUppercaseCount] = "HasUppercaseCount";
  StringCondition2[StringCondition2["IsAlpha"] = Condition$1.IsAlpha] = "IsAlpha";
  StringCondition2[StringCondition2["IsAlphanumeric"] = Condition$1.IsAlphanumeric] = "IsAlphanumeric";
  StringCondition2[StringCondition2["IsAscii"] = Condition$1.IsAscii] = "IsAscii";
  StringCondition2[StringCondition2["IsBase64"] = Condition$1.IsBase64] = "IsBase64";
  StringCondition2[StringCondition2["IsColor"] = Condition$1.IsColor] = "IsColor";
  StringCondition2[StringCondition2["IsComplexEnough"] = Condition$1.IsComplexEnough] = "IsComplexEnough";
  StringCondition2[StringCondition2["IsCreditCard"] = Condition$1.IsCreditCard] = "IsCreditCard";
  StringCondition2[StringCondition2["IsDataURI"] = Condition$1.IsDataURI] = "IsDataURI";
  StringCondition2[StringCondition2["IsDomainName"] = Condition$1.IsDomainName] = "IsDomainName";
  StringCondition2[StringCondition2["IsEmailAddress"] = Condition$1.IsEmailAddress] = "IsEmailAddress";
  StringCondition2[StringCondition2["IsEthereumAddress"] = Condition$1.IsEthereumAddress] = "IsEthereumAddress";
  StringCondition2[StringCondition2["IsEAN"] = Condition$1.IsEAN] = "IsEAN";
  StringCondition2[StringCondition2["IsEIN"] = Condition$1.IsEIN] = "IsEIN";
  StringCondition2[StringCondition2["IsEqual"] = Condition$1.IsEqual] = "IsEqual";
  StringCondition2[StringCondition2["IsIBAN"] = Condition$1.IsIBAN] = "IsIBAN";
  StringCondition2[StringCondition2["IsHSLColor"] = Condition$1.IsHSLColor] = "IsHSLColor";
  StringCondition2[StringCondition2["IsHexColor"] = Condition$1.IsHexColor] = "IsHexColor";
  StringCondition2[StringCondition2["IsHexadecimal"] = Condition$1.IsHexadecimal] = "IsHexadecimal";
  StringCondition2[StringCondition2["IsIdentityCardCode"] = Condition$1.IsIdentityCardCode] = "IsIdentityCardCode";
  StringCondition2[StringCondition2["IsIMEI"] = Condition$1.IsIMEI] = "IsIMEI";
  StringCondition2[StringCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  StringCondition2[StringCondition2["IsIPAddress"] = Condition$1.IsIPAddress] = "IsIPAddress";
  StringCondition2[StringCondition2["IsInIPAddressRange"] = Condition$1.IsInIPAddressRange] = "IsInIPAddressRange";
  StringCondition2[StringCondition2["IsISBN"] = Condition$1.IsISBN] = "IsISBN";
  StringCondition2[StringCondition2["IsISIN"] = Condition$1.IsISIN] = "IsISIN";
  StringCondition2[StringCondition2["IsISMN"] = Condition$1.IsISMN] = "IsISMN";
  StringCondition2[StringCondition2["IsISRC"] = Condition$1.IsISRC] = "IsISRC";
  StringCondition2[StringCondition2["IsISSN"] = Condition$1.IsISSN] = "IsISSN";
  StringCondition2[StringCondition2["IsLanguage"] = Condition$1.IsLanguage] = "IsLanguage";
  StringCondition2[StringCondition2["IsLatitude"] = Condition$1.IsLatitude] = "IsLatitude";
  StringCondition2[StringCondition2["IsLongitude"] = Condition$1.IsLongitude] = "IsLongitude";
  StringCondition2[StringCondition2["IsLengthEqual"] = Condition$1.IsLengthEqual] = "IsLengthEqual";
  StringCondition2[StringCondition2["IsLengthGreaterThan"] = Condition$1.IsLengthGreaterThan] = "IsLengthGreaterThan";
  StringCondition2[StringCondition2["IsLengthGreaterThanOrEqual"] = Condition$1.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual";
  StringCondition2[StringCondition2["IsLengthLessThan"] = Condition$1.IsLengthLessThan] = "IsLengthLessThan";
  StringCondition2[StringCondition2["IsLengthLessThanOrEqual"] = Condition$1.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual";
  StringCondition2[StringCondition2["IsLicensePlateNumber"] = Condition$1.IsLicensePlateNumber] = "IsLicensePlateNumber";
  StringCondition2[StringCondition2["IsLowercase"] = Condition$1.IsLowercase] = "IsLowercase";
  StringCondition2[StringCondition2["IsOctal"] = Condition$1.IsOctal] = "IsOctal";
  StringCondition2[StringCondition2["IsMACAddress"] = Condition$1.IsMACAddress] = "IsMACAddress";
  StringCondition2[StringCondition2["IsMD5"] = Condition$1.IsMD5] = "IsMD5";
  StringCondition2[StringCondition2["IsMagnetURI"] = Condition$1.IsMagnetURI] = "IsMagnetURI";
  StringCondition2[StringCondition2["IsMarkdown"] = Condition$1.IsMarkdown] = "IsMarkdown";
  StringCondition2[StringCondition2["IsMimeType"] = Condition$1.IsMimeType] = "IsMimeType";
  StringCondition2[StringCondition2["IsMonth"] = Condition$1.IsMonth] = "IsMonth";
  StringCondition2[StringCondition2["IsNotInIPAddressRange"] = Condition$1.IsNotInIPAddressRange] = "IsNotInIPAddressRange";
  StringCondition2[StringCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  StringCondition2[StringCondition2["IsNotNull"] = Condition$1.IsNotNull] = "IsNotNull";
  StringCondition2[StringCondition2["IsNotRegexMatch"] = Condition$1.IsNotRegexMatch] = "IsNotRegexMatch";
  StringCondition2[StringCondition2["IsNumber"] = Condition$1.IsNumber] = "IsNumber";
  StringCondition2[StringCondition2["IsNumeric"] = Condition$1.IsNumeric] = "IsNumeric";
  StringCondition2[StringCondition2["IsPassportNumber"] = Condition$1.IsPassportNumber] = "IsPassportNumber";
  StringCondition2[StringCondition2["IsPhoneNumber"] = Condition$1.IsPhoneNumber] = "IsPhoneNumber";
  StringCondition2[StringCondition2["IsPort"] = Condition$1.IsPort] = "IsPort";
  StringCondition2[StringCondition2["IsPostalCode"] = Condition$1.IsPostalCode] = "IsPostalCode";
  StringCondition2[StringCondition2["IsProvince"] = Condition$1.IsProvince] = "IsProvince";
  StringCondition2[StringCondition2["IsRegexMatch"] = Condition$1.IsRegexMatch] = "IsRegexMatch";
  StringCondition2[StringCondition2["IsSemanticVersion"] = Condition$1.IsSemanticVersion] = "IsSemanticVersion";
  StringCondition2[StringCondition2["IsSlug"] = Condition$1.IsSlug] = "IsSlug";
  StringCondition2[StringCondition2["IsSSN"] = Condition$1.IsSSN] = "IsSSN";
  StringCondition2[StringCondition2["IsState"] = Condition$1.IsState] = "IsState";
  StringCondition2[StringCondition2["IsStreetAddress"] = Condition$1.IsStreetAddress] = "IsStreetAddress";
  StringCondition2[StringCondition2["IsString"] = Condition$1.IsString] = "IsString";
  StringCondition2[StringCondition2["IsTaxIDNumber"] = Condition$1.IsTaxIDNumber] = "IsTaxIDNumber";
  StringCondition2[StringCondition2["IsURL"] = Condition$1.IsURL] = "IsURL";
  StringCondition2[StringCondition2["IsUUID"] = Condition$1.IsUUID] = "IsUUID";
  StringCondition2[StringCondition2["IsUppercase"] = Condition$1.IsUppercase] = "IsUppercase";
  StringCondition2[StringCondition2["IsVATIDNumber"] = Condition$1.IsVATIDNumber] = "IsVATIDNumber";
  StringCondition2[StringCondition2["IsWeekday"] = Condition$1.IsWeekday] = "IsWeekday";
  StringCondition2[StringCondition2["IsWeekend"] = Condition$1.IsWeekend] = "IsWeekend";
  StringCondition2[StringCondition2["IsYear"] = Condition$1.IsYear] = "IsYear";
})(StringCondition$1 || (StringCondition$1 = {}));
var LongTextCondition$1;
(function(LongTextCondition2) {
  LongTextCondition2[LongTextCondition2["Contains"] = Condition$1.Contains] = "Contains";
  LongTextCondition2[LongTextCondition2["IsAlpha"] = Condition$1.IsAlpha] = "IsAlpha";
  LongTextCondition2[LongTextCondition2["IsAlphanumeric"] = Condition$1.IsAlphanumeric] = "IsAlphanumeric";
  LongTextCondition2[LongTextCondition2["IsInList"] = Condition$1.IsInList] = "IsInList";
  LongTextCondition2[LongTextCondition2["IsMarkdown"] = Condition$1.IsMarkdown] = "IsMarkdown";
  LongTextCondition2[LongTextCondition2["IsNotInList"] = Condition$1.IsNotInList] = "IsNotInList";
  LongTextCondition2[LongTextCondition2["IsNumeric"] = Condition$1.IsNumeric] = "IsNumeric";
  LongTextCondition2[LongTextCondition2["IsLowercase"] = Condition$1.IsLowercase] = "IsLowercase";
  LongTextCondition2[LongTextCondition2["IsString"] = Condition$1.IsString] = "IsString";
  LongTextCondition2[LongTextCondition2["IsUppercase"] = Condition$1.IsUppercase] = "IsUppercase";
})(LongTextCondition$1 || (LongTextCondition$1 = {}));
var FormValidationProblem$1;
(function(FormValidationProblem2) {
  FormValidationProblem2["InvalidCharacters"] = "invalid-characters";
  FormValidationProblem2["InvalidPattern"] = "invalid-pattern";
  FormValidationProblem2["NotComplexEnough"] = "not-complex-enough";
  FormValidationProblem2["NotUnique"] = "not-unique";
  FormValidationProblem2["NotValidEmail"] = "not-valid-email";
  FormValidationProblem2["TooLong"] = "too-long";
  FormValidationProblem2["TooShort"] = "too-short";
  FormValidationProblem2["Required"] = "required";
})(FormValidationProblem$1 || (FormValidationProblem$1 = {}));
var Privilege$1;
(function(Privilege2) {
  Privilege2[Privilege2["Allowed"] = 0] = "Allowed";
  Privilege2[Privilege2["Blocked"] = 1] = "Blocked";
})(Privilege$1 || (Privilege$1 = {}));
var TaskStatus$1;
(function(TaskStatus2) {
  TaskStatus2["Canceled"] = "Canceled";
  TaskStatus2["Completed"] = "Completed";
  TaskStatus2["Created"] = "Created";
  TaskStatus2["Faulted"] = "Faulted";
  TaskStatus2["Queued"] = "Queued";
  TaskStatus2["Running"] = "Running";
  TaskStatus2["Waiting"] = "Waiting";
})(TaskStatus$1 || (TaskStatus$1 = {}));
var UserVerificationStatus$1;
(function(UserVerificationStatus2) {
  UserVerificationStatus2["Archived"] = "ARCHIVED";
  UserVerificationStatus2["Compromised"] = "COMPROMISED";
  UserVerificationStatus2["Confirmed"] = "CONFIRMED";
  UserVerificationStatus2["ForcePasswordChange"] = "FORCE_CHANGE_PASSWORD";
  UserVerificationStatus2["ResetRequired"] = "RESET_REQUIRED";
  UserVerificationStatus2["Unconfirmed"] = "UNCONFIRMED";
  UserVerificationStatus2["Unknown"] = "UNKNOWN";
})(UserVerificationStatus$1 || (UserVerificationStatus$1 = {}));
var UserAuthenticationVerificationType$1;
(function(UserAuthenticationVerificationType2) {
  UserAuthenticationVerificationType2["Code"] = "code";
  UserAuthenticationVerificationType2["Link"] = "link";
})(UserAuthenticationVerificationType$1 || (UserAuthenticationVerificationType$1 = {}));
var UserRole$1;
(function(UserRole2) {
  UserRole2["Owner"] = "Owner";
  UserRole2["Admin"] = "Admin";
  UserRole2["User"] = "User";
  UserRole2["Visitor"] = "Visitor";
})(UserRole$1 || (UserRole$1 = {}));
var PaymentIntentStatus$1;
(function(PaymentIntentStatus2) {
  PaymentIntentStatus2["RequiresPaymentMethod"] = "requires_payment_method";
  PaymentIntentStatus2["RequiresConfirmation"] = "requires_confirmation";
  PaymentIntentStatus2["RequiresAction"] = "requires_action";
  PaymentIntentStatus2["Processing"] = "processing";
  PaymentIntentStatus2["RequiresCapture"] = "requires_capture";
  PaymentIntentStatus2["Canceled"] = "canceled";
  PaymentIntentStatus2["Succeeded"] = "succeeded";
})(PaymentIntentStatus$1 || (PaymentIntentStatus$1 = {}));
var SubscriptionStatus$1;
(function(SubscriptionStatus2) {
  SubscriptionStatus2["Incomplete"] = "incomplete";
  SubscriptionStatus2["IncompleteExpired"] = "incomplete_expired";
  SubscriptionStatus2["Trialing"] = "trialing";
  SubscriptionStatus2["Active"] = "active";
  SubscriptionStatus2["PastDue"] = "past_due";
  SubscriptionStatus2["Canceled"] = "canceled";
  SubscriptionStatus2["Unpaid"] = "unpaid";
})(SubscriptionStatus$1 || (SubscriptionStatus$1 = {}));
var SubscriptionPlanDuration$1;
(function(SubscriptionPlanDuration2) {
  SubscriptionPlanDuration2["Monthly"] = "monthly";
  SubscriptionPlanDuration2["Quarterly"] = "quarterly";
  SubscriptionPlanDuration2["Yearly"] = "yearly";
  SubscriptionPlanDuration2["Lifetime"] = "lifetime";
})(SubscriptionPlanDuration$1 || (SubscriptionPlanDuration$1 = {}));
var CommunicationMedium$1;
(function(CommunicationMedium2) {
  CommunicationMedium2["Email"] = "email";
  CommunicationMedium2["PhoneNumber"] = "phone_number";
})(CommunicationMedium$1 || (CommunicationMedium$1 = {}));
var LogLevel$1;
(function(LogLevel2) {
  LogLevel2["Analytics"] = "analytics";
  LogLevel2["Critical"] = "critical";
  LogLevel2["Debug"] = "debug";
  LogLevel2["Exception"] = "exception";
  LogLevel2["Http"] = "http";
  LogLevel2["Info"] = "info";
  LogLevel2["Warning"] = "warning";
})(LogLevel$1 || (LogLevel$1 = {}));
var HttpRequestMethod$1;
(function(HttpRequestMethod2) {
  HttpRequestMethod2["Delete"] = "delete";
  HttpRequestMethod2["Get"] = "get";
  HttpRequestMethod2["Head"] = "head";
  HttpRequestMethod2["Patch"] = "patch";
  HttpRequestMethod2["Post"] = "post";
  HttpRequestMethod2["Put"] = "put";
})(HttpRequestMethod$1 || (HttpRequestMethod$1 = {}));
var HttpResponseCode$1;
(function(HttpResponseCode2) {
  HttpResponseCode2[HttpResponseCode2["CONTINUE"] = 100] = "CONTINUE";
  HttpResponseCode2[HttpResponseCode2["SWITCHING_PROTOCOLS"] = 101] = "SWITCHING_PROTOCOLS";
  HttpResponseCode2[HttpResponseCode2["PROCESSING"] = 102] = "PROCESSING";
  HttpResponseCode2[HttpResponseCode2["OK"] = 200] = "OK";
  HttpResponseCode2[HttpResponseCode2["CREATED"] = 201] = "CREATED";
  HttpResponseCode2[HttpResponseCode2["ACCEPTED"] = 202] = "ACCEPTED";
  HttpResponseCode2[HttpResponseCode2["NON_AUTHORITATIVE_INFORMATION"] = 203] = "NON_AUTHORITATIVE_INFORMATION";
  HttpResponseCode2[HttpResponseCode2["NO_CONTENT"] = 204] = "NO_CONTENT";
  HttpResponseCode2[HttpResponseCode2["RESET_CONTENT"] = 205] = "RESET_CONTENT";
  HttpResponseCode2[HttpResponseCode2["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
  HttpResponseCode2[HttpResponseCode2["MULTI_STATUS"] = 207] = "MULTI_STATUS";
  HttpResponseCode2[HttpResponseCode2["ALREADY_REPORTED"] = 208] = "ALREADY_REPORTED";
  HttpResponseCode2[HttpResponseCode2["IM_USED"] = 226] = "IM_USED";
  HttpResponseCode2[HttpResponseCode2["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
  HttpResponseCode2[HttpResponseCode2["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
  HttpResponseCode2[HttpResponseCode2["FOUND"] = 302] = "FOUND";
  HttpResponseCode2[HttpResponseCode2["SEE_OTHER"] = 303] = "SEE_OTHER";
  HttpResponseCode2[HttpResponseCode2["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
  HttpResponseCode2[HttpResponseCode2["USE_PROXY"] = 305] = "USE_PROXY";
  HttpResponseCode2[HttpResponseCode2["SWITCH_PROXY"] = 306] = "SWITCH_PROXY";
  HttpResponseCode2[HttpResponseCode2["TEMPORARY_REDIRECT"] = 307] = "TEMPORARY_REDIRECT";
  HttpResponseCode2[HttpResponseCode2["PERMANENT_REDIRECT"] = 308] = "PERMANENT_REDIRECT";
  HttpResponseCode2[HttpResponseCode2["BAD_REQUEST"] = 400] = "BAD_REQUEST";
  HttpResponseCode2[HttpResponseCode2["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
  HttpResponseCode2[HttpResponseCode2["PAYMENT_REQUIRED"] = 402] = "PAYMENT_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["FORBIDDEN"] = 403] = "FORBIDDEN";
  HttpResponseCode2[HttpResponseCode2["NOT_FOUND"] = 404] = "NOT_FOUND";
  HttpResponseCode2[HttpResponseCode2["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
  HttpResponseCode2[HttpResponseCode2["NOT_ACCEPTABLE"] = 406] = "NOT_ACCEPTABLE";
  HttpResponseCode2[HttpResponseCode2["PROXY_AUTHENTICATION_REQUIRED"] = 407] = "PROXY_AUTHENTICATION_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["REQUEST_TIMEOUT"] = 408] = "REQUEST_TIMEOUT";
  HttpResponseCode2[HttpResponseCode2["CONFLICT"] = 409] = "CONFLICT";
  HttpResponseCode2[HttpResponseCode2["GONE"] = 410] = "GONE";
  HttpResponseCode2[HttpResponseCode2["LENGTH_REQUIRED"] = 411] = "LENGTH_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
  HttpResponseCode2[HttpResponseCode2["PAYLOAD_TOO_LARGE"] = 413] = "PAYLOAD_TOO_LARGE";
  HttpResponseCode2[HttpResponseCode2["URI_TOO_LONG"] = 414] = "URI_TOO_LONG";
  HttpResponseCode2[HttpResponseCode2["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
  HttpResponseCode2[HttpResponseCode2["RANGE_NOT_SATISFIABLE"] = 416] = "RANGE_NOT_SATISFIABLE";
  HttpResponseCode2[HttpResponseCode2["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
  HttpResponseCode2[HttpResponseCode2["I_AM_A_TEAPOT"] = 418] = "I_AM_A_TEAPOT";
  HttpResponseCode2[HttpResponseCode2["MISDIRECTED_REQUEST"] = 421] = "MISDIRECTED_REQUEST";
  HttpResponseCode2[HttpResponseCode2["UNPROCESSABLE_ENTITY"] = 422] = "UNPROCESSABLE_ENTITY";
  HttpResponseCode2[HttpResponseCode2["LOCKED"] = 423] = "LOCKED";
  HttpResponseCode2[HttpResponseCode2["FAILED_DEPENDENCY"] = 424] = "FAILED_DEPENDENCY";
  HttpResponseCode2[HttpResponseCode2["TOO_EARLY"] = 425] = "TOO_EARLY";
  HttpResponseCode2[HttpResponseCode2["UPGRADE_REQUIRED"] = 426] = "UPGRADE_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["PRECONDITION_REQUIRED"] = 428] = "PRECONDITION_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
  HttpResponseCode2[HttpResponseCode2["REQUEST_HEADER_FIELDS_TOO_LARGE"] = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE";
  HttpResponseCode2[HttpResponseCode2["UNAVAILABLE_FOR_LEGAL_REASONS"] = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS";
  HttpResponseCode2[HttpResponseCode2["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
  HttpResponseCode2[HttpResponseCode2["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
  HttpResponseCode2[HttpResponseCode2["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
  HttpResponseCode2[HttpResponseCode2["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
  HttpResponseCode2[HttpResponseCode2["GATEWAY_TIMEOUT"] = 504] = "GATEWAY_TIMEOUT";
  HttpResponseCode2[HttpResponseCode2["HTTP_VERSION_NOT_SUPPORTED"] = 505] = "HTTP_VERSION_NOT_SUPPORTED";
  HttpResponseCode2[HttpResponseCode2["VARIANT_ALSO_NEGOTIATES"] = 506] = "VARIANT_ALSO_NEGOTIATES";
  HttpResponseCode2[HttpResponseCode2["INSUFFICIENT_STORAGE"] = 507] = "INSUFFICIENT_STORAGE";
  HttpResponseCode2[HttpResponseCode2["LOOP_DETECTED"] = 508] = "LOOP_DETECTED";
  HttpResponseCode2[HttpResponseCode2["BANDWIDTH_LIMIT_EXCEEDED"] = 509] = "BANDWIDTH_LIMIT_EXCEEDED";
  HttpResponseCode2[HttpResponseCode2["NOT_EXTENDED"] = 510] = "NOT_EXTENDED";
  HttpResponseCode2[HttpResponseCode2["NETWORK_AUTHENTICATION_REQUIRED"] = 511] = "NETWORK_AUTHENTICATION_REQUIRED";
})(HttpResponseCode$1 || (HttpResponseCode$1 = {}));
var CountryCode$1;
(function(CountryCode2) {
  CountryCode2["Afghanistan"] = "AF";
  CountryCode2["Albania"] = "AL";
  CountryCode2["Algeria"] = "DZ";
  CountryCode2["AmericanSamoa"] = "AS";
  CountryCode2["Andorra"] = "AD";
  CountryCode2["Angola"] = "AO";
  CountryCode2["Anguilla"] = "AI";
  CountryCode2["Antarctica"] = "AQ";
  CountryCode2["AntiguaAndBarbuda"] = "AG";
  CountryCode2["Argentina"] = "AR";
  CountryCode2["Armenia"] = "AM";
  CountryCode2["Aruba"] = "AW";
  CountryCode2["Australia"] = "AU";
  CountryCode2["Austria"] = "AT";
  CountryCode2["Azerbaijan"] = "AZ";
  CountryCode2["Bahamas"] = "BS";
  CountryCode2["Bahrain"] = "BH";
  CountryCode2["Bangladesh"] = "BD";
  CountryCode2["Barbados"] = "BB";
  CountryCode2["Belarus"] = "BY";
  CountryCode2["Belgium"] = "BE";
  CountryCode2["Belize"] = "BZ";
  CountryCode2["Benin"] = "BJ";
  CountryCode2["Bermuda"] = "BM";
  CountryCode2["Bhutan"] = "BT";
  CountryCode2["Bolivia"] = "BO";
  CountryCode2["BosniaAndHerzegovina"] = "BA";
  CountryCode2["Botswana"] = "BW";
  CountryCode2["BouvetIsland"] = "BV";
  CountryCode2["Brazil"] = "BR";
  CountryCode2["BritishIndianOceanTerritory"] = "IO";
  CountryCode2["Brunei"] = "BN";
  CountryCode2["Bulgaria"] = "BG";
  CountryCode2["BurkinaFaso"] = "BF";
  CountryCode2["Burundi"] = "BI";
  CountryCode2["Cambodia"] = "KH";
  CountryCode2["Cameroon"] = "CM";
  CountryCode2["Canada"] = "CA";
  CountryCode2["CapeVerde"] = "CV";
  CountryCode2["CaymanIslands"] = "KY";
  CountryCode2["CentralAfricanRepublic"] = "CF";
  CountryCode2["Chad"] = "TD";
  CountryCode2["Chile"] = "CL";
  CountryCode2["China"] = "CN";
  CountryCode2["ChristmasIsland"] = "CX";
  CountryCode2["CocosKeelingIslands"] = "CC";
  CountryCode2["Colombia"] = "CO";
  CountryCode2["Comoros"] = "KM";
  CountryCode2["Congo"] = "CG";
  CountryCode2["CongoTheDemocraticRepublicOfThe"] = "CD";
  CountryCode2["CookIslands"] = "CK";
  CountryCode2["CostaRica"] = "CR";
  CountryCode2["CoteDIvoire"] = "CI";
  CountryCode2["Croatia"] = "HR";
  CountryCode2["Cuba"] = "CU";
  CountryCode2["Cyprus"] = "CY";
  CountryCode2["CzechRepublic"] = "CZ";
  CountryCode2["Denmark"] = "DK";
  CountryCode2["Djibouti"] = "DJ";
  CountryCode2["Dominica"] = "DM";
  CountryCode2["DominicanRepublic"] = "DO";
  CountryCode2["Ecuador"] = "EC";
  CountryCode2["Egypt"] = "EG";
  CountryCode2["ElSalvador"] = "SV";
  CountryCode2["EquatorialGuinea"] = "GQ";
  CountryCode2["Eritrea"] = "ER";
  CountryCode2["Estonia"] = "EE";
  CountryCode2["Ethiopia"] = "ET";
  CountryCode2["FalklandIslands"] = "FK";
  CountryCode2["FaroeIslands"] = "FO";
  CountryCode2["Fiji"] = "FJ";
  CountryCode2["Finland"] = "FI";
  CountryCode2["France"] = "FR";
  CountryCode2["FrenchGuiana"] = "GF";
  CountryCode2["FrenchPolynesia"] = "PF";
  CountryCode2["FrenchSouthernTerritories"] = "TF";
  CountryCode2["Gabon"] = "GA";
  CountryCode2["Gambia"] = "GM";
  CountryCode2["Georgia"] = "GE";
  CountryCode2["Germany"] = "DE";
  CountryCode2["Ghana"] = "GH";
  CountryCode2["Gibraltar"] = "GI";
  CountryCode2["Greece"] = "GR";
  CountryCode2["Greenland"] = "GL";
  CountryCode2["Grenada"] = "GD";
  CountryCode2["Guadeloupe"] = "GP";
  CountryCode2["Guam"] = "GU";
  CountryCode2["Guatemala"] = "GT";
  CountryCode2["Guernsey"] = "GG";
  CountryCode2["Guinea"] = "GN";
  CountryCode2["GuineaBissau"] = "GW";
  CountryCode2["Guyana"] = "GY";
  CountryCode2["Haiti"] = "HT";
  CountryCode2["HeardIslandMcdonaldIslands"] = "HM";
  CountryCode2["HolySeeVaticanCityState"] = "VA";
  CountryCode2["Honduras"] = "HN";
  CountryCode2["HongKong"] = "HK";
  CountryCode2["Hungary"] = "HU";
  CountryCode2["Iceland"] = "IS";
  CountryCode2["India"] = "IN";
  CountryCode2["Indonesia"] = "ID";
  CountryCode2["Iran"] = "IR";
  CountryCode2["Iraq"] = "IQ";
  CountryCode2["Ireland"] = "IE";
  CountryCode2["IsleOfMan"] = "IM";
  CountryCode2["Israel"] = "IL";
  CountryCode2["Italy"] = "IT";
  CountryCode2["Jamaica"] = "JM";
  CountryCode2["Japan"] = "JP";
  CountryCode2["Jersey"] = "JE";
  CountryCode2["Jordan"] = "JO";
  CountryCode2["Kazakhstan"] = "KZ";
  CountryCode2["Kenya"] = "KE";
  CountryCode2["Kiribati"] = "KI";
  CountryCode2["Kuwait"] = "KW";
  CountryCode2["Kyrgyzstan"] = "KG";
  CountryCode2["Laos"] = "LA";
  CountryCode2["Latvia"] = "LV";
  CountryCode2["Lebanon"] = "LB";
  CountryCode2["Lesotho"] = "LS";
  CountryCode2["Liberia"] = "LR";
  CountryCode2["Libya"] = "LY";
  CountryCode2["Liechtenstein"] = "LI";
  CountryCode2["Lithuania"] = "LT";
  CountryCode2["Luxembourg"] = "LU";
  CountryCode2["Macau"] = "MO";
  CountryCode2["Madagascar"] = "MG";
  CountryCode2["Malawi"] = "MW";
  CountryCode2["Malaysia"] = "MY";
  CountryCode2["Maldives"] = "MV";
  CountryCode2["Mali"] = "ML";
  CountryCode2["Malta"] = "MT";
  CountryCode2["MarshallIslands"] = "MH";
  CountryCode2["Martinique"] = "MQ";
  CountryCode2["Mauritania"] = "MR";
  CountryCode2["Mauritius"] = "MU";
  CountryCode2["Mayotte"] = "YT";
  CountryCode2["Mexico"] = "MX";
  CountryCode2["MicronesiaFederatedStatesOf"] = "FM";
  CountryCode2["Moldova"] = "MD";
  CountryCode2["Monaco"] = "MC";
  CountryCode2["Mongolia"] = "MN";
  CountryCode2["Montenegro"] = "ME";
  CountryCode2["Montserrat"] = "MS";
  CountryCode2["Morocco"] = "MA";
  CountryCode2["Mozambique"] = "MZ";
  CountryCode2["Myanmar"] = "MM";
  CountryCode2["Namibia"] = "NA";
  CountryCode2["Nauru"] = "NR";
  CountryCode2["Nepal"] = "NP";
  CountryCode2["Netherlands"] = "NL";
  CountryCode2["NetherlandsAntilles"] = "AN";
  CountryCode2["NewCaledonia"] = "NC";
  CountryCode2["NewZealand"] = "NZ";
  CountryCode2["NorthKorea"] = "KP";
  CountryCode2["Nicaragua"] = "NI";
  CountryCode2["Niger"] = "NE";
  CountryCode2["Nigeria"] = "NG";
  CountryCode2["Niue"] = "NU";
  CountryCode2["NorfolkIsland"] = "NF";
  CountryCode2["NorthMacedonia"] = "MK";
  CountryCode2["NorthernMarianaIslands"] = "MP";
  CountryCode2["Norway"] = "NO";
  CountryCode2["Oman"] = "OM";
  CountryCode2["Pakistan"] = "PK";
  CountryCode2["Palau"] = "PW";
  CountryCode2["PalestinianTerritoryOccupied"] = "PS";
  CountryCode2["Panama"] = "PA";
  CountryCode2["PapuaNewGuinea"] = "PG";
  CountryCode2["Paraguay"] = "PY";
  CountryCode2["Peru"] = "PE";
  CountryCode2["Philippines"] = "PH";
  CountryCode2["Pitcairn"] = "PN";
  CountryCode2["Poland"] = "PL";
  CountryCode2["Portugal"] = "PT";
  CountryCode2["PuertoRico"] = "PR";
  CountryCode2["Qatar"] = "QA";
  CountryCode2["Reunion"] = "RE";
  CountryCode2["Romania"] = "RO";
  CountryCode2["RussianFederation"] = "RU";
  CountryCode2["Rwanda"] = "RW";
  CountryCode2["SaintBarthelemy"] = "BL";
  CountryCode2["SaintHelena"] = "SH";
  CountryCode2["SaintKittsAndNevis"] = "KN";
  CountryCode2["SaintLucia"] = "LC";
  CountryCode2["SaintMartin"] = "MF";
  CountryCode2["SaintPierreAndMiquelon"] = "PM";
  CountryCode2["SaintVincentAndTheGrenadines"] = "VC";
  CountryCode2["Samoa"] = "WS";
  CountryCode2["SanMarino"] = "SM";
  CountryCode2["SaoTomeAndPrincipe"] = "ST";
  CountryCode2["SaudiArabia"] = "SA";
  CountryCode2["Senegal"] = "SN";
  CountryCode2["Serbia"] = "RS";
  CountryCode2["SerbiaAndMontenegro"] = "CS";
  CountryCode2["Seychelles"] = "SC";
  CountryCode2["SierraLeone"] = "SL";
  CountryCode2["Singapore"] = "SG";
  CountryCode2["Slovakia"] = "SK";
  CountryCode2["Slovenia"] = "SI";
  CountryCode2["SolomonIslands"] = "SB";
  CountryCode2["Somalia"] = "SO";
  CountryCode2["SouthAfrica"] = "ZA";
  CountryCode2["SouthGeorgiaAndTheSouthSandwichIslands"] = "GS";
  CountryCode2["SouthKorea"] = "KR";
  CountryCode2["Spain"] = "ES";
  CountryCode2["SriLanka"] = "LK";
  CountryCode2["Sudan"] = "SD";
  CountryCode2["Suriname"] = "SR";
  CountryCode2["SvalbardAndJanMayen"] = "SJ";
  CountryCode2["Swaziland"] = "SZ";
  CountryCode2["Sweden"] = "SE";
  CountryCode2["Switzerland"] = "CH";
  CountryCode2["Syria"] = "SY";
  CountryCode2["Taiwan"] = "TW";
  CountryCode2["Tajikistan"] = "TJ";
  CountryCode2["Tanzania"] = "TZ";
  CountryCode2["Thailand"] = "TH";
  CountryCode2["TimorLeste"] = "TL";
  CountryCode2["Togo"] = "TG";
  CountryCode2["Tokelau"] = "TK";
  CountryCode2["Tonga"] = "TO";
  CountryCode2["TrinidadAndTobago"] = "TT";
  CountryCode2["Tunisia"] = "TN";
  CountryCode2["Turkey"] = "TR";
  CountryCode2["Turkmenistan"] = "TM";
  CountryCode2["TurksAndCaicosIslands"] = "TC";
  CountryCode2["Tuvalu"] = "TV";
  CountryCode2["Uganda"] = "UG";
  CountryCode2["Ukraine"] = "UA";
  CountryCode2["UnitedArabEmirates"] = "AE";
  CountryCode2["UnitedKingdom"] = "GB";
  CountryCode2["UnitedStates"] = "US";
  CountryCode2["UnitedStatesMinorOutlyingIslands"] = "UM";
  CountryCode2["Uruguay"] = "UY";
  CountryCode2["Uzbekistan"] = "UZ";
  CountryCode2["Vanuatu"] = "VU";
  CountryCode2["Venezuela"] = "VE";
  CountryCode2["Vietnam"] = "VN";
  CountryCode2["VirginIslandsBritish"] = "VG";
  CountryCode2["VirginIslandsUS"] = "VI";
  CountryCode2["WallisAndFutuna"] = "WF";
  CountryCode2["WesternSahara"] = "EH";
  CountryCode2["Yemen"] = "YE";
  CountryCode2["Zambia"] = "ZM";
  CountryCode2["Zimbabwe"] = "ZW";
})(CountryCode$1 || (CountryCode$1 = {}));
var CurrencyCode$1;
(function(CurrencyCode2) {
  CurrencyCode2["AfghanistanAfghani"] = "AFN";
  CurrencyCode2["AlbaniaLek"] = "ALL";
  CurrencyCode2["ArmeniaDram"] = "AMD";
  CurrencyCode2["AlgeriaDinar"] = "DZD";
  CurrencyCode2["AmericanSamoaTala"] = "WST";
  CurrencyCode2["AngolaKwanza"] = "AOA";
  CurrencyCode2["ArgentinaPeso"] = "ARS";
  CurrencyCode2["AustraliaDollar"] = "AUD";
  CurrencyCode2["ArubaFlorin"] = "AWG";
  CurrencyCode2["AzerbaijanNewManat"] = "AZN";
  CurrencyCode2["BosniaAndHerzegovinaConvertibleMark"] = "BAM";
  CurrencyCode2["BahrainDinar"] = "BHD";
  CurrencyCode2["BarbadosDollar"] = "BBD";
  CurrencyCode2["BangladeshTaka"] = "BDT";
  CurrencyCode2["BelgiumFranc"] = "BGN";
  CurrencyCode2["BermudaDollar"] = "BMD";
  CurrencyCode2["BruneiDollar"] = "BND";
  CurrencyCode2["BoliviaBoliviano"] = "BOB";
  CurrencyCode2["BrazilReal"] = "BRL";
  CurrencyCode2["BahamasDollar"] = "BSD";
  CurrencyCode2["BhutanNgultrum"] = "BTN";
  CurrencyCode2["BotswanaPula"] = "BWP";
  CurrencyCode2["BelarusRuble"] = "BYN";
  CurrencyCode2["BelizeDollar"] = "BZD";
  CurrencyCode2["BulgariaLev"] = "BGN";
  CurrencyCode2["BurundiFranc"] = "BIF";
  CurrencyCode2["BritishPound"] = "GBP";
  CurrencyCode2["CanadaDollar"] = "CAD";
  CurrencyCode2["CambodiaRiel"] = "KHR";
  CurrencyCode2["ComorosFranc"] = "KMF";
  CurrencyCode2["CaymanIslandsDollar"] = "KYD";
  CurrencyCode2["ChilePeso"] = "CLP";
  CurrencyCode2["ChinaYuan"] = "CNY";
  CurrencyCode2["ColombiaPeso"] = "COP";
  CurrencyCode2["CostaRicaColon"] = "CRC";
  CurrencyCode2["CroatiaKuna"] = "HRK";
  CurrencyCode2["CubaConvertiblePeso"] = "CUC";
  CurrencyCode2["CubaPeso"] = "CUP";
  CurrencyCode2["CapeVerdeEscudo"] = "CVE";
  CurrencyCode2["CyprusPound"] = "CYP";
  CurrencyCode2["CzechRepublicKoruna"] = "CZK";
  CurrencyCode2["DjiboutiFranc"] = "DJF";
  CurrencyCode2["DenmarkKrone"] = "DKK";
  CurrencyCode2["DominicaDollar"] = "XCD";
  CurrencyCode2["DominicanRepublicPeso"] = "DOP";
  CurrencyCode2["EastCaribbeanDollar"] = "XCD";
  CurrencyCode2["EgyptPound"] = "EGP";
  CurrencyCode2["ElSalvadorColon"] = "SVC";
  CurrencyCode2["EquatorialGuineaEkwele"] = "GQE";
  CurrencyCode2["EritreaNakfa"] = "ERN";
  CurrencyCode2["EstoniaKroon"] = "EEK";
  CurrencyCode2["EthiopiaBirr"] = "ETB";
  CurrencyCode2["Euro"] = "EUR";
  CurrencyCode2["FijiDollar"] = "FJD";
  CurrencyCode2["FalklandIslandsPound"] = "FKP";
  CurrencyCode2["GambiaDalasi"] = "GMD";
  CurrencyCode2["GabonFranc"] = "GMD";
  CurrencyCode2["GeorgiaLari"] = "GEL";
  CurrencyCode2["GhanaCedi"] = "GHS";
  CurrencyCode2["GibraltarPound"] = "GIP";
  CurrencyCode2["GuatemalaQuetzal"] = "GTQ";
  CurrencyCode2["GuernseyPound"] = "GGP";
  CurrencyCode2["GuineaBissauPeso"] = "GWP";
  CurrencyCode2["GuyanaDollar"] = "GYD";
  CurrencyCode2["HongKongDollar"] = "HKD";
  CurrencyCode2["HondurasLempira"] = "HNL";
  CurrencyCode2["HaitiGourde"] = "HTG";
  CurrencyCode2["HungaryForint"] = "HUF";
  CurrencyCode2["IndonesiaRupiah"] = "IDR";
  CurrencyCode2["IsleOfManPound"] = "IMP";
  CurrencyCode2["IsraelNewShekel"] = "ILS";
  CurrencyCode2["IndiaRupee"] = "INR";
  CurrencyCode2["IraqDinar"] = "IQD";
  CurrencyCode2["IranRial"] = "IRR";
  CurrencyCode2["IcelandKrona"] = "ISK";
  CurrencyCode2["JamaicaDollar"] = "JMD";
  CurrencyCode2["JapanYen"] = "JPY";
  CurrencyCode2["JerseyPound"] = "JEP";
  CurrencyCode2["JordanDinar"] = "JOD";
  CurrencyCode2["KazakhstanTenge"] = "KZT";
  CurrencyCode2["KenyaShilling"] = "KES";
  CurrencyCode2["KyrgyzstanSom"] = "KGS";
  CurrencyCode2["NorthKoreaWon"] = "KPW";
  CurrencyCode2["SouthKoreaWon"] = "KRW";
  CurrencyCode2["KuwaitDinar"] = "KWD";
  CurrencyCode2["LaosKip"] = "LAK";
  CurrencyCode2["LebanonPound"] = "LBP";
  CurrencyCode2["LiberiaDollar"] = "LRD";
  CurrencyCode2["LesothoLoti"] = "LSL";
  CurrencyCode2["LibyanDinar"] = "LYD";
  CurrencyCode2["LithuaniaLitas"] = "LTL";
  CurrencyCode2["LatviaLats"] = "LVL";
  CurrencyCode2["LibyaDinar"] = "LYD";
  CurrencyCode2["MacauPataca"] = "MOP";
  CurrencyCode2["MaldivesRufiyaa"] = "MVR";
  CurrencyCode2["MalawiKwacha"] = "MWK";
  CurrencyCode2["MaltaLira"] = "MTL";
  CurrencyCode2["MauritiusRupee"] = "MUR";
  CurrencyCode2["MongoliaTughrik"] = "MNT";
  CurrencyCode2["MoroccoDirham"] = "MAD";
  CurrencyCode2["MoldovaLeu"] = "MDL";
  CurrencyCode2["MozambiqueMetical"] = "MZN";
  CurrencyCode2["MadagascarAriary"] = "MGA";
  CurrencyCode2["MacedoniaDenar"] = "MKD";
  CurrencyCode2["MexicoPeso"] = "MXN";
  CurrencyCode2["MalaysiaRinggit"] = "MYR";
  CurrencyCode2["MyanmarKyat"] = "MMK";
  CurrencyCode2["MicronesiaFederatedStatesDollar"] = "USD";
  CurrencyCode2["NicaraguaCordoba"] = "NIO";
  CurrencyCode2["NamibiaDollar"] = "NAD";
  CurrencyCode2["NetherlandsAntillesGuilder"] = "ANG";
  CurrencyCode2["NewCaledoniaFranc"] = "XPF";
  CurrencyCode2["NigeriaNaira"] = "NGN";
  CurrencyCode2["NicaraguaCordobaOro"] = "NIO";
  CurrencyCode2["NigerCFAFranc"] = "XOF";
  CurrencyCode2["NorwayKrone"] = "NOK";
  CurrencyCode2["NepalRupee"] = "NPR";
  CurrencyCode2["NewZealandDollar"] = "NZD";
  CurrencyCode2["OmanRial"] = "OMR";
  CurrencyCode2["PanamaBalboa"] = "PAB";
  CurrencyCode2["PeruNuevoSol"] = "PEN";
  CurrencyCode2["PapuaNewGuineaKina"] = "PGK";
  CurrencyCode2["PhilippinesPeso"] = "PHP";
  CurrencyCode2["PakistanRupee"] = "PKR";
  CurrencyCode2["PeruNuevo"] = "PEN";
  CurrencyCode2["PolandZloty"] = "PLN";
  CurrencyCode2["ParaguayGuarani"] = "PYG";
  CurrencyCode2["QatarRial"] = "QAR";
  CurrencyCode2["RomaniaNewLeu"] = "RON";
  CurrencyCode2["SerbiaDinar"] = "RSD";
  CurrencyCode2["SriLankaRupee"] = "LKR";
  CurrencyCode2["RussiaRuble"] = "RUB";
  CurrencyCode2["RwandaFranc"] = "RWF";
  CurrencyCode2["SaudiArabiaRiyal"] = "SAR";
  CurrencyCode2["SlovakiaKoruna"] = "SKK";
  CurrencyCode2["SloveniaTolar"] = "SIT";
  CurrencyCode2["SolomonIslandsDollar"] = "SBD";
  CurrencyCode2["SeychellesRupee"] = "SCR";
  CurrencyCode2["SudanPound"] = "SDG";
  CurrencyCode2["SwedenKrona"] = "SEK";
  CurrencyCode2["SingaporeDollar"] = "SGD";
  CurrencyCode2["SaintHelenaPound"] = "SHP";
  CurrencyCode2["SierraLeoneLeone"] = "SLL";
  CurrencyCode2["SomaliaShilling"] = "SOS";
  CurrencyCode2["SurinameDollar"] = "SRD";
  CurrencyCode2["SintMaartenPound"] = "SXD";
  CurrencyCode2["SyriaPound"] = "SYP";
  CurrencyCode2["SwazilandLilangeni"] = "SZL";
  CurrencyCode2["SwitzerlandFranc"] = "CHF";
  CurrencyCode2["ThailandBaht"] = "THB";
  CurrencyCode2["TajikistanSomoni"] = "TJS";
  CurrencyCode2["TurkmenistanManat"] = "TMT";
  CurrencyCode2["TunisiaDinar"] = "TND";
  CurrencyCode2["TongaPaanga"] = "TOP";
  CurrencyCode2["TurkeyLira"] = "TRY";
  CurrencyCode2["TrinidadAndTobagoDollar"] = "TTD";
  CurrencyCode2["TaiwanNewDollar"] = "TWD";
  CurrencyCode2["TanzaniaShilling"] = "TZS";
  CurrencyCode2["UnitedArabEmiratesDirham"] = "AED";
  CurrencyCode2["UkraineHryvnia"] = "UAH";
  CurrencyCode2["UgandaShilling"] = "UGX";
  CurrencyCode2["UnitedKingdomPound"] = "GBP";
  CurrencyCode2["UnitedStatesDollar"] = "USD";
  CurrencyCode2["UruguayPeso"] = "UYU";
  CurrencyCode2["UzbekistanSom"] = "UZS";
  CurrencyCode2["VenezuelaBolivar"] = "VEF";
  CurrencyCode2["VietnamDong"] = "VND";
  CurrencyCode2["VanuatuVatu"] = "VUV";
  CurrencyCode2["SamoaTala"] = "WST";
  CurrencyCode2["YemenRial"] = "YER";
  CurrencyCode2["SouthAfricaRand"] = "ZAR";
  CurrencyCode2["ZambiaKwacha"] = "ZMW";
  CurrencyCode2["ZimbabweDollar"] = "ZWL";
})(CurrencyCode$1 || (CurrencyCode$1 = {}));
({
  AfghanistanAfghani: {
    code: CurrencyCode$1.AfghanistanAfghani,
    countries: [CountryCode$1.Afghanistan],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Afghan Afghani",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u060B",
    symbol_native: "\u060B",
    symbol_placement: "before",
    thousands_separator: ","
  },
  AlbaniaLek: {
    code: CurrencyCode$1.AlbaniaLek,
    countries: [CountryCode$1.Albania],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Albanian Lek",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Lek",
    symbol_native: "Lek",
    symbol_placement: "before",
    thousands_separator: "."
  },
  AlgeriaDinar: {
    code: CurrencyCode$1.AlgeriaDinar,
    countries: [CountryCode$1.Algeria],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Algerian Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u062F.\u062C",
    symbol_native: "\u062F.\u062C",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ArgentinaPeso: {
    code: CurrencyCode$1.ArgentinaPeso,
    countries: [CountryCode$1.Argentina],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Argentine Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ArmeniaDram: {
    code: CurrencyCode$1.ArmeniaDram,
    countries: [CountryCode$1.Armenia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Armenian Dram",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0564\u0580.",
    symbol_native: "\u0564\u0580.",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ArubaFlorin: {
    code: CurrencyCode$1.ArubaFlorin,
    countries: [CountryCode$1.Aruba],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Aruban Florin",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0192",
    symbol_native: "\u0192",
    symbol_placement: "before",
    thousands_separator: ","
  },
  AustraliaDollar: {
    code: CurrencyCode$1.AustraliaDollar,
    countries: [CountryCode$1.Australia],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Australian Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  AzerbaijanManat: {
    code: CurrencyCode$1.AzerbaijanNewManat,
    countries: [CountryCode$1.Azerbaijan],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Azerbaijani Manat",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u043C\u0430\u043D",
    symbol_native: "\u043C\u0430\u043D",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BahrainDinar: {
    code: CurrencyCode$1.BahrainDinar,
    countries: [CountryCode$1.Bahrain],
    decimal_digits: 3,
    decimal_separator: ".",
    name: "Bahraini Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: ".\u062F.\u0628",
    symbol_native: ".\u062F.\u0628",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BangladeshTaka: {
    code: CurrencyCode$1.BangladeshTaka,
    countries: [CountryCode$1.Bangladesh],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Bangladeshi Taka",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u09F3",
    symbol_native: "\u09F3",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BarbadosDollar: {
    code: CurrencyCode$1.BarbadosDollar,
    countries: [CountryCode$1.Barbados],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Barbadian Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BelarusRuble: {
    code: CurrencyCode$1.BelarusRuble,
    countries: [CountryCode$1.Belarus],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Belarusian Ruble",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Br",
    symbol_native: "Br",
    symbol_placement: "before",
    thousands_separator: "."
  },
  BelizeDollar: {
    code: CurrencyCode$1.BelizeDollar,
    countries: [CountryCode$1.Belize],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Belize Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "BZ$",
    symbol_native: "BZ$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BermudaDollar: {
    code: CurrencyCode$1.BermudaDollar,
    countries: [CountryCode$1.Bermuda],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Bermudian Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BoliviaBoliviano: {
    code: CurrencyCode$1.BoliviaBoliviano,
    countries: [CountryCode$1.Bolivia],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Bolivian Boliviano",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$b",
    symbol_native: "$b",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BosniaAndHerzegovinaConvertibleMarka: {
    code: CurrencyCode$1.BosniaAndHerzegovinaConvertibleMark,
    countries: [CountryCode$1.BosniaAndHerzegovina],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Bosnia and Herzegovina Convertible Marka",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "KM",
    symbol_native: "KM",
    symbol_placement: "before",
    thousands_separator: "."
  },
  BotswanaPula: {
    code: CurrencyCode$1.BotswanaPula,
    countries: [CountryCode$1.Botswana],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Botswana Pula",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "P",
    symbol_native: "P",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BrazilReal: {
    code: CurrencyCode$1.BrazilReal,
    countries: [CountryCode$1.Brazil],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Brazilian Real",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "R$",
    symbol_native: "R$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  BruneiDollar: {
    code: CurrencyCode$1.BruneiDollar,
    countries: [CountryCode$1.Brunei],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Brunei Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BulgariaLev: {
    code: CurrencyCode$1.BulgariaLev,
    countries: [CountryCode$1.Bulgaria],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Bulgarian Lev",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u043B\u0432",
    symbol_native: "\u043B\u0432",
    symbol_placement: "before",
    thousands_separator: "."
  },
  BurundiFranc: {
    code: CurrencyCode$1.BurundiFranc,
    countries: [CountryCode$1.Burundi],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Burundian Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "FBu",
    symbol_native: "FBu",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CambodiaRiel: {
    code: CurrencyCode$1.CambodiaRiel,
    countries: [CountryCode$1.Cambodia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Cambodian Riel",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u17DB",
    symbol_native: "\u17DB",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CanadaDollar: {
    code: CurrencyCode$1.CanadaDollar,
    countries: [CountryCode$1.Canada],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Canadian Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CapeVerdeEscudo: {
    code: CurrencyCode$1.CapeVerdeEscudo,
    countries: [CountryCode$1.CapeVerde],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Cape Verde Escudo",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Esc",
    symbol_native: "Esc",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CaymanIslandsDollar: {
    code: CurrencyCode$1.CaymanIslandsDollar,
    countries: [CountryCode$1.CaymanIslands],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Cayman Islands Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ChilePeso: {
    code: CurrencyCode$1.ChilePeso,
    countries: [CountryCode$1.Chile],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Chilean Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ChinaYuanRenminbi: {
    code: CurrencyCode$1.ChinaYuan,
    countries: [CountryCode$1.China],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Chinese Yuan",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA5",
    symbol_native: "\xA5",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ColombiaPeso: {
    code: CurrencyCode$1.ColombiaPeso,
    countries: [CountryCode$1.Colombia],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Colombian Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ComorosFranc: {
    code: CurrencyCode$1.ComorosFranc,
    countries: [CountryCode$1.Comoros],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Comoros Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "CF",
    symbol_native: "CF",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CostaRicaColon: {
    code: CurrencyCode$1.CostaRicaColon,
    countries: [CountryCode$1.CostaRica],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Costa Rican Colon",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A1",
    symbol_native: "\u20A1",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CroatiaKuna: {
    code: CurrencyCode$1.CroatiaKuna,
    countries: [CountryCode$1.Croatia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Croatian Kuna",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kn",
    symbol_native: "kn",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CubaConvertiblePeso: {
    code: CurrencyCode$1.CubaConvertiblePeso,
    countries: [CountryCode$1.Cuba],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Cuba Convertible Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CubaPeso: {
    code: CurrencyCode$1.CubaPeso,
    countries: [CountryCode$1.Cuba],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Cuba Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CyprusPound: {
    code: CurrencyCode$1.CyprusPound,
    countries: [CountryCode$1.Cyprus],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Cyprus Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CzechRepublicKoruna: {
    code: CurrencyCode$1.CzechRepublicKoruna,
    countries: [CountryCode$1.CzechRepublic],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Czech Republic Koruna",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "K\u010D",
    symbol_native: "K\u010D",
    symbol_placement: "before",
    thousands_separator: "."
  },
  DenmarkKrone: {
    code: CurrencyCode$1.DenmarkKrone,
    countries: [CountryCode$1.Denmark],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Denmark Krone",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  DjiboutiFranc: {
    code: CurrencyCode$1.DjiboutiFranc,
    countries: [CountryCode$1.Djibouti],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Djibouti Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Fdj",
    symbol_native: "Fdj",
    symbol_placement: "before",
    thousands_separator: ","
  },
  DominicanRepublicPeso: {
    code: CurrencyCode$1.DominicanRepublicPeso,
    countries: [CountryCode$1.DominicanRepublic],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Dominican Republic Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "RD$",
    symbol_native: "RD$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  EastCaribbeanDollar: {
    code: CurrencyCode$1.EastCaribbeanDollar,
    countries: [
      CountryCode$1.AntiguaAndBarbuda,
      CountryCode$1.Dominica,
      CountryCode$1.Grenada,
      CountryCode$1.SaintKittsAndNevis,
      CountryCode$1.SaintLucia,
      CountryCode$1.SaintVincentAndTheGrenadines
    ],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "East Caribbean Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  EgyptPound: {
    code: CurrencyCode$1.EgyptPound,
    countries: [CountryCode$1.Egypt],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Egypt Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ElSalvadorColon: {
    code: CurrencyCode$1.ElSalvadorColon,
    countries: [CountryCode$1.ElSalvador],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "El Salvador Colon",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A1",
    symbol_native: "\u20A1",
    symbol_placement: "before",
    thousands_separator: "."
  },
  EquatorialGuineaEkwele: {
    code: CurrencyCode$1.EquatorialGuineaEkwele,
    countries: [CountryCode$1.EquatorialGuinea],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Equatorial Guinea Ekwele",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "GQE",
    symbol_native: "GQE",
    symbol_placement: "before",
    thousands_separator: ","
  },
  EritreaNakfa: {
    code: CurrencyCode$1.EritreaNakfa,
    countries: [CountryCode$1.Eritrea],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Eritrea Nakfa",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Nfk",
    symbol_native: "Nfk",
    symbol_placement: "before",
    thousands_separator: "."
  },
  EstoniaKroon: {
    code: CurrencyCode$1.EstoniaKroon,
    countries: [CountryCode$1.Estonia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Estonia Kroon",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  EthiopiaBirr: {
    code: CurrencyCode$1.EthiopiaBirr,
    countries: [CountryCode$1.Ethiopia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Ethiopia Birr",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Br",
    symbol_native: "Br",
    symbol_placement: "before",
    thousands_separator: "."
  },
  Euro: {
    code: CurrencyCode$1.Euro,
    countries: [
      CountryCode$1.Andorra,
      CountryCode$1.Austria,
      CountryCode$1.Belgium,
      CountryCode$1.Cyprus,
      CountryCode$1.Estonia,
      CountryCode$1.Finland,
      CountryCode$1.France,
      CountryCode$1.Germany,
      CountryCode$1.Greece,
      CountryCode$1.Ireland,
      CountryCode$1.Italy,
      CountryCode$1.Latvia,
      CountryCode$1.Lithuania,
      CountryCode$1.Luxembourg,
      CountryCode$1.Malta,
      CountryCode$1.Monaco,
      CountryCode$1.Netherlands,
      CountryCode$1.Portugal,
      CountryCode$1.Spain,
      CountryCode$1.Sweden,
      CountryCode$1.UnitedKingdom
    ],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Euro",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AC",
    symbol_native: "\u20AC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  FalklandIslandsPound: {
    code: CurrencyCode$1.FalklandIslandsPound,
    countries: [CountryCode$1.FalklandIslands],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Equatorial Guinea Ekwele",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  FijiDollar: {
    code: CurrencyCode$1.FijiDollar,
    countries: [CountryCode$1.Fiji],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Fiji Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GambiaDalasi: {
    code: CurrencyCode$1.GambiaDalasi,
    countries: [CountryCode$1.Gambia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Gambia Dalasi",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "D",
    symbol_native: "D",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GeorgiaLari: {
    code: CurrencyCode$1.GeorgiaLari,
    countries: [CountryCode$1.Georgia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Georgia Lari",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20BE",
    symbol_native: "\u20BE",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GhanaCedi: {
    code: CurrencyCode$1.GhanaCedi,
    countries: [CountryCode$1.Ghana],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Ghana Cedi",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B5",
    symbol_native: "\u20B5",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GibraltarPound: {
    code: CurrencyCode$1.GibraltarPound,
    countries: [CountryCode$1.Gibraltar],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Gibraltar Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GuatemalaQuetzal: {
    code: CurrencyCode$1.GuatemalaQuetzal,
    countries: [CountryCode$1.Guatemala],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Guatemala Quetzal",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Q",
    symbol_native: "Q",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GuernseyPound: {
    code: CurrencyCode$1.GuernseyPound,
    countries: [CountryCode$1.Guernsey],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Guernsey Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GuineaBissauPeso: {
    code: CurrencyCode$1.GuineaBissauPeso,
    countries: [CountryCode$1.GuineaBissau],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Guinea-Bissau Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B5",
    symbol_native: "\u20B5",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GuyanaDollar: {
    code: CurrencyCode$1.GuyanaDollar,
    countries: [CountryCode$1.Guyana],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Guyana Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  HaitiGourde: {
    code: CurrencyCode$1.HaitiGourde,
    countries: [CountryCode$1.Haiti],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Haiti Gourde",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "G",
    symbol_native: "G",
    symbol_placement: "before",
    thousands_separator: "."
  },
  HondurasLempira: {
    code: CurrencyCode$1.HondurasLempira,
    countries: [CountryCode$1.Honduras],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Honduras Lempira",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "L",
    symbol_native: "L",
    symbol_placement: "before",
    thousands_separator: "."
  },
  HongKongDollar: {
    code: CurrencyCode$1.HongKongDollar,
    countries: [CountryCode$1.HongKong],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Hong Kong Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  HungaryForint: {
    code: CurrencyCode$1.HungaryForint,
    countries: [CountryCode$1.Hungary],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Hungary Forint",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Ft",
    symbol_native: "Ft",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IcelandKrona: {
    code: CurrencyCode$1.IcelandKrona,
    countries: [CountryCode$1.Iceland],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Iceland Krona",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IndianRupee: {
    code: CurrencyCode$1.IndiaRupee,
    countries: [CountryCode$1.India, CountryCode$1.Bhutan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Indian Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B9",
    symbol_native: "\u20B9",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IndonesiaRupiah: {
    code: CurrencyCode$1.IndonesiaRupiah,
    countries: [CountryCode$1.Indonesia],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Indonesia Rupiah",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Rp",
    symbol_native: "Rp",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IranRial: {
    code: CurrencyCode$1.IranRial,
    countries: [CountryCode$1.Iran],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Iran Rial",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IsleOfManPound: {
    code: CurrencyCode$1.IsleOfManPound,
    countries: [CountryCode$1.IsleOfMan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Isle of Man Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IsraeliShekel: {
    code: CurrencyCode$1.IsraelNewShekel,
    countries: [CountryCode$1.Israel],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Israeli Shekel",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AA",
    symbol_native: "\u20AA",
    symbol_placement: "before",
    thousands_separator: "."
  },
  JamaicaDollar: {
    code: CurrencyCode$1.JamaicaDollar,
    countries: [CountryCode$1.Jamaica],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Jamaica Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "J$",
    symbol_native: "J$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  JapanYen: {
    code: CurrencyCode$1.JapanYen,
    countries: [CountryCode$1.Japan],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Japan Yen",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA5",
    symbol_native: "\uFFE5",
    symbol_placement: "before",
    thousands_separator: "."
  },
  JerseyPound: {
    code: CurrencyCode$1.JerseyPound,
    countries: [CountryCode$1.Jersey],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Jersey Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  JordanDinar: {
    code: CurrencyCode$1.JordanDinar,
    countries: [CountryCode$1.Jordan],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Jordan Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "JD",
    symbol_native: "JD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  KazakhstanTenge: {
    code: CurrencyCode$1.KazakhstanTenge,
    countries: [CountryCode$1.Kazakhstan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Kazakhstan Tenge",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B8",
    symbol_native: "\u20B8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  KenyaShilling: {
    code: CurrencyCode$1.KenyaShilling,
    countries: [CountryCode$1.Kenya],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Kenya Shilling",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "KSh",
    symbol_native: "KSh",
    symbol_placement: "before",
    thousands_separator: "."
  },
  KuwaitDinar: {
    code: CurrencyCode$1.KuwaitDinar,
    countries: [CountryCode$1.Kuwait],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Kuwait Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "KD",
    symbol_native: "KD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  KyrgyzstanSom: {
    code: CurrencyCode$1.KyrgyzstanSom,
    countries: [CountryCode$1.Kyrgyzstan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Kyrgyzstan Som",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "KGS",
    symbol_native: "KGS",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LaosKip: {
    code: CurrencyCode$1.LaosKip,
    countries: [CountryCode$1.Laos],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Laos Kip",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AD",
    symbol_native: "\u20AD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LatviaLats: {
    code: CurrencyCode$1.LatviaLats,
    countries: [CountryCode$1.Latvia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Latvia Lat",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Ls",
    symbol_native: "Ls",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LebanonPound: {
    code: CurrencyCode$1.LebanonPound,
    countries: [CountryCode$1.Lebanon],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Lebanon Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LesothoLoti: {
    code: CurrencyCode$1.LesothoLoti,
    countries: [CountryCode$1.Lesotho],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Lesotho Loti",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "M",
    symbol_native: "M",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LiberiaDollar: {
    code: CurrencyCode$1.LiberiaDollar,
    countries: [CountryCode$1.Liberia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Liberia Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LibyanDinar: {
    code: CurrencyCode$1.LibyanDinar,
    countries: [CountryCode$1.Libya],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Libyan Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "LD",
    symbol_native: "LD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LithuaniaLitas: {
    code: CurrencyCode$1.LithuaniaLitas,
    countries: [CountryCode$1.Lithuania],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Lithuania Litas",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Lt",
    symbol_native: "Lt",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MacauPataca: {
    code: CurrencyCode$1.MacauPataca,
    countries: [CountryCode$1.Macau],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Macau Pataca",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "MOP$",
    symbol_native: "MOP$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MacedoniaDenar: {
    code: CurrencyCode$1.MacedoniaDenar,
    countries: [CountryCode$1.NorthMacedonia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Macedonia Denar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0434\u0435\u043D",
    symbol_native: "\u0434\u0435\u043D",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MadagascarAriary: {
    code: CurrencyCode$1.MadagascarAriary,
    countries: [CountryCode$1.Madagascar],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Madagascar Ariary",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Ar",
    symbol_native: "Ar",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MalawiKwacha: {
    code: CurrencyCode$1.MalawiKwacha,
    countries: [CountryCode$1.Malawi],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Malawi Kwacha",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "MK",
    symbol_native: "MK",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MalaysiaRinggit: {
    code: CurrencyCode$1.MalaysiaRinggit,
    countries: [CountryCode$1.Malaysia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Malaysia Ringgit",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "RM",
    symbol_native: "RM",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MaldivesRufiyaa: {
    code: CurrencyCode$1.MaldivesRufiyaa,
    countries: [CountryCode$1.Maldives],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Maldives Rufiyaa",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Rf",
    symbol_native: "Rf",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MaltaLira: {
    code: CurrencyCode$1.MaltaLira,
    countries: [CountryCode$1.Malta],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Malta Lira",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Lm",
    symbol_native: "Lm",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MauritiusRupee: {
    code: CurrencyCode$1.MauritiusRupee,
    countries: [CountryCode$1.Mauritius],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Mauritius Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MexicoPeso: {
    code: CurrencyCode$1.MexicoPeso,
    countries: [CountryCode$1.Mexico],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Mexico Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MoldovaLeu: {
    code: CurrencyCode$1.MoldovaLeu,
    countries: [CountryCode$1.Moldova],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Moldova Leu",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "L",
    symbol_native: "L",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MongoliaTughrik: {
    code: CurrencyCode$1.MongoliaTughrik,
    countries: [CountryCode$1.Mongolia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Mongolia Tughrik",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AE",
    symbol_native: "\u20AE",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MoroccoDirham: {
    code: CurrencyCode$1.MoroccoDirham,
    countries: [CountryCode$1.Morocco],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Morocco Dirham",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "DH",
    symbol_native: "DH",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MozambiqueMetical: {
    code: CurrencyCode$1.MozambiqueMetical,
    countries: [CountryCode$1.Mozambique],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Mozambique Metical",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "MT",
    symbol_native: "MT",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MyanmarKyat: {
    code: CurrencyCode$1.MyanmarKyat,
    countries: [CountryCode$1.Myanmar],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Myanmar Kyat",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "K",
    symbol_native: "K",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NamibiaDollar: {
    code: CurrencyCode$1.NamibiaDollar,
    countries: [CountryCode$1.Namibia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Namibia Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NepalRupee: {
    code: CurrencyCode$1.NepalRupee,
    countries: [CountryCode$1.Nepal],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Nepal Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NetherlandsAntillesGuilder: {
    code: CurrencyCode$1.NetherlandsAntillesGuilder,
    countries: [CountryCode$1.NetherlandsAntilles],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Netherlands Antilles Guilder",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0192",
    symbol_native: "\u0192",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NewCaledoniaFranc: {
    code: CurrencyCode$1.NewCaledoniaFranc,
    countries: [CountryCode$1.NewCaledonia],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "New Caledonia Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A3",
    symbol_native: "\u20A3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NewZealandDollar: {
    code: CurrencyCode$1.NewZealandDollar,
    countries: [CountryCode$1.NewZealand],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "New Zealand Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NicaraguaCordoba: {
    code: CurrencyCode$1.NicaraguaCordoba,
    countries: [CountryCode$1.Nicaragua],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Nicaragua Cordoba",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "C$",
    symbol_native: "C$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NigerCFAFranc: {
    code: CurrencyCode$1.NigerCFAFranc,
    countries: [CountryCode$1.Niger],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Niger CFA Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "CFA",
    symbol_native: "CFA",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NigeriaNaira: {
    code: CurrencyCode$1.NigeriaNaira,
    countries: [CountryCode$1.Nigeria],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Nigeria Naira",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A6",
    symbol_native: "\u20A6",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NorthKoreaWon: {
    code: CurrencyCode$1.NorthKoreaWon,
    countries: [CountryCode$1.NorthKorea],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "North Korea Won",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A9",
    symbol_native: "\u20A9",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NorwayKrone: {
    code: CurrencyCode$1.NorwayKrone,
    countries: [CountryCode$1.Norway],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Norway Krone",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  OmanRial: {
    code: CurrencyCode$1.OmanRial,
    countries: [CountryCode$1.Oman],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Oman Rial",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PakistanRupee: {
    code: CurrencyCode$1.PakistanRupee,
    countries: [CountryCode$1.Pakistan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Pakistan Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PanamaBalboa: {
    code: CurrencyCode$1.PanamaBalboa,
    countries: [CountryCode$1.Panama],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Panama Balboa",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "B/.",
    symbol_native: "B/.",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ParaguayGuarani: {
    code: CurrencyCode$1.ParaguayGuarani,
    countries: [CountryCode$1.Paraguay],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Paraguay Guarani",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Gs",
    symbol_native: "Gs",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PeruvianNuevo: {
    code: CurrencyCode$1.PeruNuevo,
    countries: [CountryCode$1.Peru],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Peruvian Nuevo",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "S/.",
    symbol_native: "S/.",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PhilippinesPeso: {
    code: CurrencyCode$1.PhilippinesPeso,
    countries: [CountryCode$1.Philippines],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Philippines Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B1",
    symbol_native: "\u20B1",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PolandZloty: {
    code: CurrencyCode$1.PolandZloty,
    countries: [CountryCode$1.Poland],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Poland Zloty",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "z\u0142",
    symbol_native: "z\u0142",
    symbol_placement: "before",
    thousands_separator: "."
  },
  QatarRial: {
    code: CurrencyCode$1.QatarRial,
    countries: [CountryCode$1.Qatar],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Qatar Rial",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  RomaniaNewLeu: {
    code: CurrencyCode$1.RomaniaNewLeu,
    countries: [CountryCode$1.Romania],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Romania New Leu",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "lei",
    symbol_native: "lei",
    symbol_placement: "before",
    thousands_separator: "."
  },
  RussiaRuble: {
    code: CurrencyCode$1.RussiaRuble,
    countries: [CountryCode$1.RussianFederation],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Russia Ruble",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20BD",
    symbol_native: "\u20BD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  RwandaFranc: {
    code: CurrencyCode$1.RwandaFranc,
    countries: [CountryCode$1.Rwanda],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Rwanda Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "RF",
    symbol_native: "RF",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SaudiArabiaRiyal: {
    code: CurrencyCode$1.SaudiArabiaRiyal,
    countries: [CountryCode$1.SaudiArabia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Saudi Arabia Riyal",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SerbiaDinar: {
    code: CurrencyCode$1.SerbiaDinar,
    countries: [CountryCode$1.Serbia],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Serbia Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0414\u0438\u043D.",
    symbol_native: "\u0414\u0438\u043D.",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SeychellesRupee: {
    code: CurrencyCode$1.SeychellesRupee,
    countries: [CountryCode$1.Seychelles],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Seychelles Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SingaporeDollar: {
    code: CurrencyCode$1.SingaporeDollar,
    countries: [CountryCode$1.Singapore],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Singapore Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SlovakiaKoruna: {
    code: CurrencyCode$1.SlovakiaKoruna,
    countries: [CountryCode$1.Slovakia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Slovakia Koruna",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Sk",
    symbol_native: "Sk",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SloveniaTolar: {
    code: CurrencyCode$1.SloveniaTolar,
    countries: [CountryCode$1.Slovenia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Slovenia Tolar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "SIT",
    symbol_native: "SIT",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SolomonIslandsDollar: {
    code: CurrencyCode$1.SolomonIslandsDollar,
    countries: [CountryCode$1.SolomonIslands],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Solomon Islands Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SomaliaShilling: {
    code: CurrencyCode$1.SomaliaShilling,
    countries: [CountryCode$1.Somalia],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Somalia Shilling",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "S",
    symbol_native: "S",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SouthAfricaRand: {
    code: CurrencyCode$1.SouthAfricaRand,
    countries: [CountryCode$1.SouthAfrica],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "South Africa Rand",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "R",
    symbol_native: "R",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SouthKoreaWon: {
    code: CurrencyCode$1.SouthKoreaWon,
    countries: [CountryCode$1.SouthKorea],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "South Korea Won",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A9",
    symbol_native: "\u20A9",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SriLankaRupee: {
    code: CurrencyCode$1.SriLankaRupee,
    countries: [CountryCode$1.SriLanka],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Sri Lanka Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SudanPound: {
    code: CurrencyCode$1.SudanPound,
    countries: [CountryCode$1.Sudan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Sudan Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SurinameDollar: {
    code: CurrencyCode$1.SurinameDollar,
    countries: [CountryCode$1.Suriname],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Suriname Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SwazilandLilangeni: {
    code: CurrencyCode$1.SwazilandLilangeni,
    countries: [CountryCode$1.Swaziland],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Swaziland Lilangeni",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "E",
    symbol_native: "E",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SwedenKrona: {
    code: CurrencyCode$1.SwedenKrona,
    countries: [CountryCode$1.Sweden],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Sweden Krona",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SwitzerlandFranc: {
    code: CurrencyCode$1.SwitzerlandFranc,
    countries: [CountryCode$1.Switzerland],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Switzerland Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "CHF",
    symbol_native: "CHF",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SyriaPound: {
    code: CurrencyCode$1.SyriaPound,
    countries: [CountryCode$1.Syria],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Syria Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TaiwanNewDollar: {
    code: CurrencyCode$1.TaiwanNewDollar,
    countries: [CountryCode$1.Taiwan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Taiwan New Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "NT$",
    symbol_native: "NT$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TajikistanSomoni: {
    code: CurrencyCode$1.TajikistanSomoni,
    countries: [CountryCode$1.Tajikistan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Tajikistan Somoni",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "TJS",
    symbol_native: "TJS",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TanzaniaShilling: {
    code: CurrencyCode$1.TanzaniaShilling,
    countries: [CountryCode$1.Tanzania],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Tanzania Shilling",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "TSh",
    symbol_native: "TSh",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ThailandBaht: {
    code: CurrencyCode$1.ThailandBaht,
    countries: [CountryCode$1.Thailand],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Thailand Baht",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0E3F",
    symbol_native: "\u0E3F",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TunisiaDinar: {
    code: CurrencyCode$1.TunisiaDinar,
    countries: [CountryCode$1.Tunisia],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Tunisia Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u062F.\u062A",
    symbol_native: "\u062F.\u062A",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TurkeyLira: {
    code: CurrencyCode$1.TurkeyLira,
    countries: [CountryCode$1.Turkey],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Turkey Lira",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20BA",
    symbol_native: "\u20BA",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TurkmenistanManat: {
    code: CurrencyCode$1.TurkmenistanManat,
    countries: [CountryCode$1.Turkmenistan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Turkmenistan Manat",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "m",
    symbol_native: "m",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UgandaShilling: {
    code: CurrencyCode$1.UgandaShilling,
    countries: [CountryCode$1.Uganda],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Uganda Shilling",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "USh",
    symbol_native: "USh",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UkraineHryvnia: {
    code: CurrencyCode$1.UkraineHryvnia,
    countries: [CountryCode$1.Ukraine],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Ukraine Hryvnia",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B4",
    symbol_native: "\u20B4",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UnitedArabEmiratesDirham: {
    code: CurrencyCode$1.UnitedArabEmiratesDirham,
    countries: [CountryCode$1.UnitedArabEmirates],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "United Arab Emirates Dirham",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u062F.\u0625",
    symbol_native: "\u062F.\u0625",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UnitedKingdomPound: {
    code: CurrencyCode$1.UnitedKingdomPound,
    countries: [CountryCode$1.UnitedKingdom],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "United Kingdom Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UnitedStatesDollar: {
    code: CurrencyCode$1.UnitedStatesDollar,
    countries: [CountryCode$1.UnitedStates],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "United States Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UruguayPeso: {
    code: CurrencyCode$1.UruguayPeso,
    countries: [CountryCode$1.Uruguay],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Uruguay Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$U",
    symbol_native: "$U",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UzbekistanSom: {
    code: CurrencyCode$1.UzbekistanSom,
    countries: [CountryCode$1.Uzbekistan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Uzbekistan Som",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "UZS",
    symbol_native: "UZS",
    symbol_placement: "before",
    thousands_separator: "."
  },
  VanuatuVatu: {
    code: CurrencyCode$1.VanuatuVatu,
    countries: [CountryCode$1.Vanuatu],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Vanuatu Vatu",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "VT",
    symbol_native: "VT",
    symbol_placement: "before",
    thousands_separator: "."
  },
  VenezuelaBolivar: {
    code: CurrencyCode$1.VenezuelaBolivar,
    countries: [CountryCode$1.Venezuela],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Venezuela Bolivar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Bs. F",
    symbol_native: "Bs. F",
    symbol_placement: "before",
    thousands_separator: "."
  },
  VietnamDong: {
    code: CurrencyCode$1.VietnamDong,
    countries: [CountryCode$1.Vietnam],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Vietnam Dong",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AB",
    symbol_native: "\u20AB",
    symbol_placement: "before",
    thousands_separator: "."
  },
  YemenRial: {
    code: CurrencyCode$1.YemenRial,
    countries: [CountryCode$1.Yemen],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Yemen Rial",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ZambiaKwacha: {
    code: CurrencyCode$1.ZambiaKwacha,
    countries: [CountryCode$1.Zambia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Zambia Kwacha",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "ZK",
    symbol_native: "ZK",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ZimbabweDollar: {
    code: CurrencyCode$1.ZimbabweDollar,
    countries: [CountryCode$1.Zimbabwe],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Zimbabwe Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AB",
    symbol_native: "\u20AB",
    symbol_placement: "before",
    thousands_separator: "."
  }
});
var CryptoCurrency$1;
(function(CryptoCurrency2) {
  CryptoCurrency2["Bitcoin"] = "BTC";
  CryptoCurrency2["Ethereum"] = "ETH";
  CryptoCurrency2["Litecoin"] = "LTC";
  CryptoCurrency2["Ripple"] = "XRP";
  CryptoCurrency2["Dash"] = "DASH";
  CryptoCurrency2["Zcash"] = "ZEC";
  CryptoCurrency2["Dogecoin"] = "DOGE";
  CryptoCurrency2["Monero"] = "XMR";
  CryptoCurrency2["BitcoinCash"] = "BCH";
  CryptoCurrency2["EOS"] = "EOS";
  CryptoCurrency2["Binance"] = "BNB";
  CryptoCurrency2["Stellar"] = "XLM";
  CryptoCurrency2["Cardano"] = "ADA";
  CryptoCurrency2["IOTA"] = "IOTA";
  CryptoCurrency2["Tezos"] = "XTZ";
  CryptoCurrency2["NEO"] = "NEO";
  CryptoCurrency2["TRON"] = "TRX";
  CryptoCurrency2["EOSClassic"] = "EOSC";
  CryptoCurrency2["Ontology"] = "ONT";
  CryptoCurrency2["VeChain"] = "VEN";
  CryptoCurrency2["QTUM"] = "QTUM";
  CryptoCurrency2["Lisk"] = "LSK";
  CryptoCurrency2["Waves"] = "WAVES";
  CryptoCurrency2["OmiseGO"] = "OMG";
  CryptoCurrency2["Zilliqa"] = "ZIL";
  CryptoCurrency2["BitcoinGold"] = "BTG";
  CryptoCurrency2["Decred"] = "DCR";
  CryptoCurrency2["Stratis"] = "STRAT";
  CryptoCurrency2["Populous"] = "PPT";
  CryptoCurrency2["Augur"] = "REP";
  CryptoCurrency2["Golem"] = "GNT";
  CryptoCurrency2["Siacoin"] = "SC";
  CryptoCurrency2["BasicAttentionToken"] = "BAT";
  CryptoCurrency2["ZCoin"] = "XZC";
  CryptoCurrency2["StratisHedged"] = "SNT";
  CryptoCurrency2["VeChainHedged"] = "VEN";
  CryptoCurrency2["PowerLedger"] = "POWR";
  CryptoCurrency2["WavesHedged"] = "WAVE";
  CryptoCurrency2["ZilliqaHedged"] = "ZRX";
  CryptoCurrency2["BitcoinDiamond"] = "BCD";
  CryptoCurrency2["DigiByte"] = "DGB";
  CryptoCurrency2["DigiByteHedged"] = "DGB";
  CryptoCurrency2["Bytecoin"] = "BCN";
  CryptoCurrency2["BytecoinHedged"] = "BCN";
})(CryptoCurrency$1 || (CryptoCurrency$1 = {}));
var LanguageCode$1;
(function(LanguageCode2) {
  LanguageCode2["Afrikaans"] = "af";
  LanguageCode2["Albanian"] = "sq";
  LanguageCode2["Amharic"] = "am";
  LanguageCode2["Arabic"] = "ar";
  LanguageCode2["Armenian"] = "hy";
  LanguageCode2["Azerbaijani"] = "az";
  LanguageCode2["Bashkir"] = "ba";
  LanguageCode2["Basque"] = "eu";
  LanguageCode2["Belarusian"] = "be";
  LanguageCode2["Bengali"] = "bn";
  LanguageCode2["Berber"] = "ber";
  LanguageCode2["Bhutani"] = "dz";
  LanguageCode2["Bihari"] = "bh";
  LanguageCode2["Bislama"] = "bi";
  LanguageCode2["Bosnian"] = "bs";
  LanguageCode2["Breten"] = "br";
  LanguageCode2["Bulgarian"] = "bg";
  LanguageCode2["Burmese"] = "my";
  LanguageCode2["Cantonese"] = "yue";
  LanguageCode2["Catalan"] = "ca";
  LanguageCode2["Chinese"] = "zh";
  LanguageCode2["Chuvash"] = "cv";
  LanguageCode2["Corsican"] = "co";
  LanguageCode2["Croatian"] = "hr";
  LanguageCode2["Czech"] = "cs";
  LanguageCode2["Danish"] = "da";
  LanguageCode2["Dari"] = "prs";
  LanguageCode2["Divehi"] = "dv";
  LanguageCode2["Dutch"] = "nl";
  LanguageCode2["English"] = "en";
  LanguageCode2["Esperanto"] = "eo";
  LanguageCode2["Estonian"] = "et";
  LanguageCode2["Faroese"] = "fo";
  LanguageCode2["Farsi"] = "fa";
  LanguageCode2["Filipino"] = "fil";
  LanguageCode2["Finnish"] = "fi";
  LanguageCode2["French"] = "fr";
  LanguageCode2["Frisian"] = "fy";
  LanguageCode2["Galician"] = "gl";
  LanguageCode2["Georgian"] = "ka";
  LanguageCode2["German"] = "de";
  LanguageCode2["Greek"] = "el";
  LanguageCode2["Greenlandic"] = "kl";
  LanguageCode2["Gujarati"] = "gu";
  LanguageCode2["Haitian"] = "ht";
  LanguageCode2["Hausa"] = "ha";
  LanguageCode2["Hebrew"] = "he";
  LanguageCode2["Hindi"] = "hi";
  LanguageCode2["Hungarian"] = "hu";
  LanguageCode2["Icelandic"] = "is";
  LanguageCode2["Igbo"] = "ig";
  LanguageCode2["Indonesian"] = "id";
  LanguageCode2["Irish"] = "ga";
  LanguageCode2["Italian"] = "it";
  LanguageCode2["Japanese"] = "ja";
  LanguageCode2["Javanese"] = "jv";
  LanguageCode2["Kannada"] = "kn";
  LanguageCode2["Karelian"] = "krl";
  LanguageCode2["Kazakh"] = "kk";
  LanguageCode2["Khmer"] = "km";
  LanguageCode2["Komi"] = "kv";
  LanguageCode2["Konkani"] = "kok";
  LanguageCode2["Korean"] = "ko";
  LanguageCode2["Kurdish"] = "ku";
  LanguageCode2["Kyrgyz"] = "ky";
  LanguageCode2["Lao"] = "lo";
  LanguageCode2["Latin"] = "la";
  LanguageCode2["Latvian"] = "lv";
  LanguageCode2["Lithuanian"] = "lt";
  LanguageCode2["Luxembourgish"] = "lb";
  LanguageCode2["Ossetian"] = "os";
  LanguageCode2["Macedonian"] = "mk";
  LanguageCode2["Malagasy"] = "mg";
  LanguageCode2["Malay"] = "ms";
  LanguageCode2["Malayalam"] = "ml";
  LanguageCode2["Maltese"] = "mt";
  LanguageCode2["Maori"] = "mi";
  LanguageCode2["Marathi"] = "mr";
  LanguageCode2["Mari"] = "mhr";
  LanguageCode2["Mongolian"] = "mn";
  LanguageCode2["Montenegrin"] = "me";
  LanguageCode2["Nepali"] = "ne";
  LanguageCode2["NorthernSotho"] = "nso";
  LanguageCode2["Norwegian"] = "no";
  LanguageCode2["NorwegianBokmal"] = "nb";
  LanguageCode2["NorwegianNynorsk"] = "nn";
  LanguageCode2["Oriya"] = "or";
  LanguageCode2["Pashto"] = "ps";
  LanguageCode2["Persian"] = "fa";
  LanguageCode2["Polish"] = "pl";
  LanguageCode2["Portuguese"] = "pt";
  LanguageCode2["Punjabi"] = "pa";
  LanguageCode2["Quechua"] = "qu";
  LanguageCode2["Romanian"] = "ro";
  LanguageCode2["Russian"] = "ru";
  LanguageCode2["Sakha"] = "sah";
  LanguageCode2["Sami"] = "se";
  LanguageCode2["Samoan"] = "sm";
  LanguageCode2["Sanskrit"] = "sa";
  LanguageCode2["Scots"] = "gd";
  LanguageCode2["Serbian"] = "sr";
  LanguageCode2["SerbianCyrillic"] = "sr-Cyrl";
  LanguageCode2["Sesotho"] = "st";
  LanguageCode2["Shona"] = "sn";
  LanguageCode2["Sindhi"] = "sd";
  LanguageCode2["Sinhala"] = "si";
  LanguageCode2["Slovak"] = "sk";
  LanguageCode2["Slovenian"] = "sl";
  LanguageCode2["Somali"] = "so";
  LanguageCode2["Spanish"] = "es";
  LanguageCode2["Sudanese"] = "su";
  LanguageCode2["Sutu"] = "sx";
  LanguageCode2["Swahili"] = "sw";
  LanguageCode2["Swedish"] = "sv";
  LanguageCode2["Syriac"] = "syr";
  LanguageCode2["Tagalog"] = "tl";
  LanguageCode2["Tajik"] = "tg";
  LanguageCode2["Tamazight"] = "tmh";
  LanguageCode2["Tamil"] = "ta";
  LanguageCode2["Tatar"] = "tt";
  LanguageCode2["Telugu"] = "te";
  LanguageCode2["Thai"] = "th";
  LanguageCode2["Tibetan"] = "bo";
  LanguageCode2["Tsonga"] = "ts";
  LanguageCode2["Tswana"] = "tn";
  LanguageCode2["Turkish"] = "tr";
  LanguageCode2["Turkmen"] = "tk";
  LanguageCode2["Ukrainian"] = "uk";
  LanguageCode2["Urdu"] = "ur";
  LanguageCode2["Uzbek"] = "uz";
  LanguageCode2["Vietnamese"] = "vi";
  LanguageCode2["Welsh"] = "cy";
  LanguageCode2["Xhosa"] = "xh";
  LanguageCode2["Yiddish"] = "yi";
  LanguageCode2["Yoruba"] = "yo";
  LanguageCode2["Zulu"] = "zu";
})(LanguageCode$1 || (LanguageCode$1 = {}));
var LocaleCode$1;
(function(LocaleCode2) {
  LocaleCode2["Afrikaans"] = "af";
  LocaleCode2["AfrikaansSouthAfrica"] = "af-ZA";
  LocaleCode2["Albanian"] = "sq";
  LocaleCode2["AlbanianAlbania"] = "sq-AL";
  LocaleCode2["Amharic"] = "am";
  LocaleCode2["AmharicEthiopia"] = "am-ET";
  LocaleCode2["Arabic"] = "ar";
  LocaleCode2["ArabicAlgeria"] = "ar-DZ";
  LocaleCode2["ArabicBahrain"] = "ar-BH";
  LocaleCode2["ArabicEgypt"] = "ar-EG";
  LocaleCode2["ArabicIraq"] = "ar-IQ";
  LocaleCode2["ArabicJordan"] = "ar-JO";
  LocaleCode2["ArabicKuwait"] = "ar-KW";
  LocaleCode2["ArabicLebanon"] = "ar-LB";
  LocaleCode2["ArabicLibya"] = "ar-LY";
  LocaleCode2["ArabicMorocco"] = "ar-MA";
  LocaleCode2["ArabicOman"] = "ar-OM";
  LocaleCode2["ArabicQatar"] = "ar-QA";
  LocaleCode2["ArabicSaudiArabia"] = "ar-SA";
  LocaleCode2["ArabicSyria"] = "ar-SY";
  LocaleCode2["ArabicTunisia"] = "ar-TN";
  LocaleCode2["ArabicUnitedArabEmirates"] = "ar-AE";
  LocaleCode2["ArabicYemen"] = "ar-YE";
  LocaleCode2["Armenian"] = "hy";
  LocaleCode2["ArmenianArmenia"] = "hy-AM";
  LocaleCode2["Azerbaijani"] = "az";
  LocaleCode2["AzerbaijaniAzerbaijan"] = "az-AZ";
  LocaleCode2["AzerbaijaniCyrillicAzerbaijan"] = "az-Cyrl-AZ";
  LocaleCode2["Bashkir"] = "ba";
  LocaleCode2["Basque"] = "eu";
  LocaleCode2["BasqueSpain"] = "eu-ES";
  LocaleCode2["Belarusian"] = "be";
  LocaleCode2["BelarusianBelarus"] = "be-BY";
  LocaleCode2["Bengali"] = "bn";
  LocaleCode2["BengaliBangladesh"] = "bn-BD";
  LocaleCode2["BengaliIndia"] = "bn-IN";
  LocaleCode2["Berber"] = "ber";
  LocaleCode2["Bhutani"] = "dz";
  LocaleCode2["BhutaniBhutan"] = "dz-BT";
  LocaleCode2["Bosnian"] = "bs";
  LocaleCode2["BosnianBosniaAndHerzegovina"] = "bs-BA";
  LocaleCode2["Breton"] = "br";
  LocaleCode2["Bulgarian"] = "bg";
  LocaleCode2["BulgarianBosniaAndHerzegovina"] = "bg-BG";
  LocaleCode2["BulgarianBulgaria"] = "bg-BG";
  LocaleCode2["Burmese"] = "my";
  LocaleCode2["BurmeseMyanmar"] = "my-MM";
  LocaleCode2["Cantonese"] = "yue";
  LocaleCode2["CantoneseHongKong"] = "yue-HK";
  LocaleCode2["Catalan"] = "ca";
  LocaleCode2["CatalanSpain"] = "ca-ES";
  LocaleCode2["Chechen"] = "ce";
  LocaleCode2["Cherokee"] = "chr";
  LocaleCode2["Chinese"] = "zh";
  LocaleCode2["ChineseSimplified"] = "zh-Hans";
  LocaleCode2["ChineseSimplifiedChina"] = "zh-Hans-CN";
  LocaleCode2["ChineseSimplifiedHongKong"] = "zh-Hans-HK";
  LocaleCode2["ChineseSimplifiedMacau"] = "zh-Hans-MO";
  LocaleCode2["ChineseSimplifiedSingapore"] = "zh-Hans-SG";
  LocaleCode2["ChineseTraditional"] = "zh-Hant";
  LocaleCode2["ChineseTraditionalHongKong"] = "zh-Hant-HK";
  LocaleCode2["ChineseTraditionalMacau"] = "zh-Hant-MO";
  LocaleCode2["ChineseTraditionalSingapore"] = "zh-Hant-SG";
  LocaleCode2["ChineseTraditionalTaiwan"] = "zh-Hant-TW";
  LocaleCode2["Chuvash"] = "cv";
  LocaleCode2["CorsicanFrance"] = "co-FR";
  LocaleCode2["Croatian"] = "hr";
  LocaleCode2["CroatianBosniaAndHerzegovina"] = "hr-BA";
  LocaleCode2["CroatianCroatia"] = "hr-HR";
  LocaleCode2["Czech"] = "cs";
  LocaleCode2["CzechCzechRepublic"] = "cs-CZ";
  LocaleCode2["Danish"] = "da";
  LocaleCode2["DanishDenmark"] = "da-DK";
  LocaleCode2["Dari"] = "prs";
  LocaleCode2["DariAfghanistan"] = "prs-AF";
  LocaleCode2["Divehi"] = "dv";
  LocaleCode2["DivehiMaldives"] = "dv-MV";
  LocaleCode2["Dutch"] = "nl";
  LocaleCode2["DutchBelgium"] = "nl-BE";
  LocaleCode2["DutchNetherlands"] = "nl-NL";
  LocaleCode2["English"] = "en";
  LocaleCode2["EnglishAustralia"] = "en-AU";
  LocaleCode2["EnglishBelgium"] = "en-BE";
  LocaleCode2["EnglishBelize"] = "en-BZ";
  LocaleCode2["EnglishCanada"] = "en-CA";
  LocaleCode2["EnglishCaribbean"] = "en-029";
  LocaleCode2["EnglishIreland"] = "en-IE";
  LocaleCode2["EnglishJamaica"] = "en-JM";
  LocaleCode2["EnglishNewZealand"] = "en-NZ";
  LocaleCode2["EnglishPhilippines"] = "en-PH";
  LocaleCode2["EnglishSingapore"] = "en-SG";
  LocaleCode2["EnglishSouthAfrica"] = "en-ZA";
  LocaleCode2["EnglishTrinidadAndTobago"] = "en-TT";
  LocaleCode2["EnglishUnitedKingdom"] = "en-GB";
  LocaleCode2["EnglishUnitedStates"] = "en-US";
  LocaleCode2["EnglishZimbabwe"] = "en-ZW";
  LocaleCode2["Esperanto"] = "eo";
  LocaleCode2["Estonian"] = "et";
  LocaleCode2["EstonianEstonia"] = "et-EE";
  LocaleCode2["Faroese"] = "fo";
  LocaleCode2["FaroeseFaroeIslands"] = "fo-FO";
  LocaleCode2["Farsi"] = "fa";
  LocaleCode2["FarsiIran"] = "fa-IR";
  LocaleCode2["Filipino"] = "fil";
  LocaleCode2["FilipinoPhilippines"] = "fil-PH";
  LocaleCode2["Finnish"] = "fi";
  LocaleCode2["FinnishFinland"] = "fi-FI";
  LocaleCode2["French"] = "fr";
  LocaleCode2["FrenchBelgium"] = "fr-BE";
  LocaleCode2["FrenchCanada"] = "fr-CA";
  LocaleCode2["FrenchFrance"] = "fr-FR";
  LocaleCode2["FrenchLuxembourg"] = "fr-LU";
  LocaleCode2["FrenchMonaco"] = "fr-MC";
  LocaleCode2["FrenchReunion"] = "fr-RE";
  LocaleCode2["FrenchSwitzerland"] = "fr-CH";
  LocaleCode2["Frisian"] = "fy";
  LocaleCode2["FrisianNetherlands"] = "fy-NL";
  LocaleCode2["Galician"] = "gl";
  LocaleCode2["GalicianSpain"] = "gl-ES";
  LocaleCode2["Georgian"] = "ka";
  LocaleCode2["GeorgianGeorgia"] = "ka-GE";
  LocaleCode2["German"] = "de";
  LocaleCode2["GermanAustria"] = "de-AT";
  LocaleCode2["GermanBelgium"] = "de-BE";
  LocaleCode2["GermanGermany"] = "de-DE";
  LocaleCode2["GermanLiechtenstein"] = "de-LI";
  LocaleCode2["GermanLuxembourg"] = "de-LU";
  LocaleCode2["GermanSwitzerland"] = "de-CH";
  LocaleCode2["Greenlandic"] = "kl";
  LocaleCode2["GreenlandicGreenland"] = "kl-GL";
  LocaleCode2["Greek"] = "el";
  LocaleCode2["GreekGreece"] = "el-GR";
  LocaleCode2["Gujarati"] = "gu";
  LocaleCode2["GujaratiIndia"] = "gu-IN";
  LocaleCode2["Haitian"] = "ht";
  LocaleCode2["Hausa"] = "ha";
  LocaleCode2["HausaGhana"] = "ha-GH";
  LocaleCode2["HausaNiger"] = "ha-NE";
  LocaleCode2["HausaNigeria"] = "ha-NG";
  LocaleCode2["Hebrew"] = "he";
  LocaleCode2["HebrewIsrael"] = "he-IL";
  LocaleCode2["Hindi"] = "hi";
  LocaleCode2["HindiIndia"] = "hi-IN";
  LocaleCode2["Hungarian"] = "hu";
  LocaleCode2["HungarianHungary"] = "hu-HU";
  LocaleCode2["Icelandic"] = "is";
  LocaleCode2["IcelandicIceland"] = "is-IS";
  LocaleCode2["Igbo"] = "ig";
  LocaleCode2["IgboNigeria"] = "ig-NG";
  LocaleCode2["Indonesian"] = "id";
  LocaleCode2["IndonesianIndonesia"] = "id-ID";
  LocaleCode2["Irish"] = "ga";
  LocaleCode2["IrishIreland"] = "ga-IE";
  LocaleCode2["Italian"] = "it";
  LocaleCode2["ItalianItaly"] = "it-IT";
  LocaleCode2["ItalianSwitzerland"] = "it-CH";
  LocaleCode2["Japanese"] = "ja";
  LocaleCode2["JapaneseJapan"] = "ja-JP";
  LocaleCode2["Javanese"] = "jv";
  LocaleCode2["Kannada"] = "kn";
  LocaleCode2["KannadaIndia"] = "kn-IN";
  LocaleCode2["Karelian"] = "krl";
  LocaleCode2["Kazakh"] = "kk";
  LocaleCode2["KazakhKazakhstan"] = "kk-KZ";
  LocaleCode2["Khmer"] = "km";
  LocaleCode2["KhmerCambodia"] = "km-KH";
  LocaleCode2["KinyarwandaRwanda"] = "rw-RW";
  LocaleCode2["Komi"] = "kv";
  LocaleCode2["Konkani"] = "kok";
  LocaleCode2["KonkaniIndia"] = "kok-IN";
  LocaleCode2["Korean"] = "ko";
  LocaleCode2["KoreanSouthKorea"] = "ko-KR";
  LocaleCode2["Kurdish"] = "ku";
  LocaleCode2["KurdishIraq"] = "ku-IQ";
  LocaleCode2["KurdishTurkey"] = "ku-TR";
  LocaleCode2["Kyrgyz"] = "ky";
  LocaleCode2["KyrgyzKyrgyzstan"] = "ky-KG";
  LocaleCode2["Lao"] = "lo";
  LocaleCode2["LaoLaos"] = "lo-LA";
  LocaleCode2["Latin"] = "la";
  LocaleCode2["Latvian"] = "lv";
  LocaleCode2["LatvianLatvia"] = "lv-LV";
  LocaleCode2["Lithuanian"] = "lt";
  LocaleCode2["LithuanianLithuania"] = "lt-LT";
  LocaleCode2["Luxembourgish"] = "lb";
  LocaleCode2["LuxembourgishBelgium"] = "lb-LU";
  LocaleCode2["LuxembourgishLuxembourg"] = "lb-LU";
  LocaleCode2["Macedonian"] = "mk";
  LocaleCode2["MacedonianNorthMacedonia"] = "mk-MK";
  LocaleCode2["Malagasy"] = "mg";
  LocaleCode2["Malay"] = "ms";
  LocaleCode2["MalayBrunei"] = "ms-BN";
  LocaleCode2["MalayIndia"] = "ms-IN";
  LocaleCode2["MalayMalaysia"] = "ms-MY";
  LocaleCode2["MalaySingapore"] = "ms-SG";
  LocaleCode2["Malayalam"] = "ml";
  LocaleCode2["MalayalamIndia"] = "ml-IN";
  LocaleCode2["Maltese"] = "mt";
  LocaleCode2["MalteseMalta"] = "mt-MT";
  LocaleCode2["Maori"] = "mi";
  LocaleCode2["MaoriNewZealand"] = "mi-NZ";
  LocaleCode2["Marathi"] = "mr";
  LocaleCode2["MarathiIndia"] = "mr-IN";
  LocaleCode2["Mari"] = "chm";
  LocaleCode2["Mongolian"] = "mn";
  LocaleCode2["MongolianMongolia"] = "mn-MN";
  LocaleCode2["Montenegrin"] = "me";
  LocaleCode2["MontenegrinMontenegro"] = "me-ME";
  LocaleCode2["Nepali"] = "ne";
  LocaleCode2["NepaliNepal"] = "ne-NP";
  LocaleCode2["NorthernSotho"] = "ns";
  LocaleCode2["NorthernSothoSouthAfrica"] = "ns-ZA";
  LocaleCode2["Norwegian"] = "nb";
  LocaleCode2["NorwegianBokmalNorway"] = "nb-NO";
  LocaleCode2["NorwegianNynorskNorway"] = "nn-NO";
  LocaleCode2["Oriya"] = "or";
  LocaleCode2["OriyaIndia"] = "or-IN";
  LocaleCode2["Ossetian"] = "os";
  LocaleCode2["Pashto"] = "ps";
  LocaleCode2["PashtoAfghanistan"] = "ps-AF";
  LocaleCode2["Persian"] = "fa";
  LocaleCode2["PersianIran"] = "fa-IR";
  LocaleCode2["Polish"] = "pl";
  LocaleCode2["PolishPoland"] = "pl-PL";
  LocaleCode2["Portuguese"] = "pt";
  LocaleCode2["PortugueseBrazil"] = "pt-BR";
  LocaleCode2["PortuguesePortugal"] = "pt-PT";
  LocaleCode2["Punjabi"] = "pa";
  LocaleCode2["PunjabiIndia"] = "pa-IN";
  LocaleCode2["PunjabiPakistan"] = "pa-PK";
  LocaleCode2["Quechua"] = "qu";
  LocaleCode2["QuechuaBolivia"] = "qu-BO";
  LocaleCode2["QuechuaEcuador"] = "qu-EC";
  LocaleCode2["QuechuaPeru"] = "qu-PE";
  LocaleCode2["Romanian"] = "ro";
  LocaleCode2["RomanianRomania"] = "ro-RO";
  LocaleCode2["Russian"] = "ru";
  LocaleCode2["RussianKazakhstan"] = "ru-KZ";
  LocaleCode2["RussianKyrgyzstan"] = "ru-KG";
  LocaleCode2["RussianRussia"] = "ru-RU";
  LocaleCode2["RussianUkraine"] = "ru-UA";
  LocaleCode2["Sakha"] = "sah";
  LocaleCode2["Sanskrit"] = "sa";
  LocaleCode2["SanskritIndia"] = "sa-IN";
  LocaleCode2["Sami"] = "se";
  LocaleCode2["SamiNorway"] = "se-NO";
  LocaleCode2["SamiSweden"] = "se-SE";
  LocaleCode2["SamiFinland"] = "se-FI";
  LocaleCode2["Samoan"] = "sm";
  LocaleCode2["SamoanSamoa"] = "sm-WS";
  LocaleCode2["Scots"] = "gd";
  LocaleCode2["Serbian"] = "sr";
  LocaleCode2["SerbianBosniaAndHerzegovina"] = "sr-BA";
  LocaleCode2["SerbianSerbiaAndMontenegro"] = "sr-SP";
  LocaleCode2["SerbianCyrillic"] = "sr-SP-Cyrl";
  LocaleCode2["SerbianCyrillicBosniaAndHerzegovina"] = "sr-Cyrl-BA";
  LocaleCode2["SerbianCyrillicSerbiaAndMontenegro"] = "sr-Cyrl-SP";
  LocaleCode2["Sesotho"] = "st";
  LocaleCode2["SesothoSouthAfrica"] = "st-ZA";
  LocaleCode2["Shona"] = "sn";
  LocaleCode2["ShonaZimbabwe"] = "sn-ZW";
  LocaleCode2["Sindhi"] = "sd";
  LocaleCode2["SindhiPakistan"] = "sd-PK";
  LocaleCode2["Sinhala"] = "si";
  LocaleCode2["SinhalaSriLanka"] = "si-LK";
  LocaleCode2["Slovak"] = "sk";
  LocaleCode2["SlovakSlovakia"] = "sk-SK";
  LocaleCode2["Slovenian"] = "sl";
  LocaleCode2["SlovenianSlovenia"] = "sl-SI";
  LocaleCode2["Somali"] = "so";
  LocaleCode2["SomaliSomalia"] = "so-SO";
  LocaleCode2["Spanish"] = "es";
  LocaleCode2["SpanishArgentina"] = "es-AR";
  LocaleCode2["SpanishBolivia"] = "es-BO";
  LocaleCode2["SpanishChile"] = "es-CL";
  LocaleCode2["SpanishColombia"] = "es-CO";
  LocaleCode2["SpanishCostaRica"] = "es-CR";
  LocaleCode2["SpanishCuba"] = "es-CU";
  LocaleCode2["SpanishDominicanRepublic"] = "es-DO";
  LocaleCode2["SpanishEcuador"] = "es-EC";
  LocaleCode2["SpanishEquatorialGuinea"] = "es-GQ";
  LocaleCode2["SpanishElSalvador"] = "es-SV";
  LocaleCode2["SpanishGuatemala"] = "es-GT";
  LocaleCode2["SpanishHonduras"] = "es-HN";
  LocaleCode2["SpanishMexico"] = "es-MX";
  LocaleCode2["SpanishNicaragua"] = "es-NI";
  LocaleCode2["SpanishPanama"] = "es-PA";
  LocaleCode2["SpanishParaguay"] = "es-PY";
  LocaleCode2["SpanishPeru"] = "es-PE";
  LocaleCode2["SpanishPuertoRico"] = "es-PR";
  LocaleCode2["SpanishSpain"] = "es-ES";
  LocaleCode2["SpanishUnitedStates"] = "es-US";
  LocaleCode2["SpanishUruguay"] = "es-UY";
  LocaleCode2["SpanishVenezuela"] = "es-VE";
  LocaleCode2["Sudanese"] = "su";
  LocaleCode2["Sutu"] = "st";
  LocaleCode2["SutuSouthAfrica"] = "st-ZA";
  LocaleCode2["Swahili"] = "sw";
  LocaleCode2["SwahiliKenya"] = "sw-KE";
  LocaleCode2["Swedish"] = "sv";
  LocaleCode2["SwedishFinland"] = "sv-FI";
  LocaleCode2["SwedishSweden"] = "sv-SE";
  LocaleCode2["Syriac"] = "syr";
  LocaleCode2["SyriacSyria"] = "syr-SY";
  LocaleCode2["Tajik"] = "tg";
  LocaleCode2["TajikTajikistan"] = "tg-TJ";
  LocaleCode2["Tagalog"] = "tl";
  LocaleCode2["TagalogPhilippines"] = "tl-PH";
  LocaleCode2["Tamazight"] = "tmh";
  LocaleCode2["Tamil"] = "ta";
  LocaleCode2["TamilIndia"] = "ta-IN";
  LocaleCode2["Tatar"] = "tt";
  LocaleCode2["Telugu"] = "te";
  LocaleCode2["TeluguIndia"] = "te-IN";
  LocaleCode2["Thai"] = "th";
  LocaleCode2["ThaiThailand"] = "th-TH";
  LocaleCode2["Tibetan"] = "bo";
  LocaleCode2["TibetanBhutan"] = "bo-BT";
  LocaleCode2["TibetanChina"] = "bo-CN";
  LocaleCode2["TibetanIndia"] = "bo-IN";
  LocaleCode2["Tsonga"] = "ts";
  LocaleCode2["Tswana"] = "tn";
  LocaleCode2["TswanaSouthAfrica"] = "tn-ZA";
  LocaleCode2["Turkish"] = "tr";
  LocaleCode2["TurkishTurkey"] = "tr-TR";
  LocaleCode2["Turkmen"] = "tk";
  LocaleCode2["Ukrainian"] = "uk";
  LocaleCode2["UkrainianUkraine"] = "uk-UA";
  LocaleCode2["Urdu"] = "ur";
  LocaleCode2["UrduAfghanistan"] = "ur-AF";
  LocaleCode2["UrduIndia"] = "ur-IN";
  LocaleCode2["UrduPakistan"] = "ur-PK";
  LocaleCode2["Uzbek"] = "uz";
  LocaleCode2["UzbekCyrillic"] = "uz-Cyrl-UZ";
  LocaleCode2["UzbekLatin"] = "uz-Latn-UZ";
  LocaleCode2["UzbekUzbekistan"] = "uz-UZ";
  LocaleCode2["Vietnamese"] = "vi";
  LocaleCode2["VietnameseVietnam"] = "vi-VN";
  LocaleCode2["Welsh"] = "cy";
  LocaleCode2["WelshUnitedKingdom"] = "cy-GB";
  LocaleCode2["Xhosa"] = "xh";
  LocaleCode2["XhosaSouthAfrica"] = "xh-ZA";
  LocaleCode2["Yiddish"] = "yi";
  LocaleCode2["Yoruba"] = "yo";
  LocaleCode2["YorubaNigeria"] = "yo-NG";
  LocaleCode2["ZhuyinMandarinChina"] = "yue-Hant-CN";
  LocaleCode2["Zulu"] = "zu";
  LocaleCode2["ZuluSouthAfrica"] = "zu-ZA";
})(LocaleCode$1 || (LocaleCode$1 = {}));
var TimezoneRegions$1;
(function(TimezoneRegions2) {
  TimezoneRegions2["AfricaAbidjan"] = "Africa/Abidjan";
  TimezoneRegions2["AfricaAccra"] = "Africa/Accra";
  TimezoneRegions2["AfricaAddisAbaba"] = "Africa/Addis_Ababa";
  TimezoneRegions2["AfricaAlgiers"] = "Africa/Algiers";
  TimezoneRegions2["AfricaAsmara"] = "Africa/Asmara";
  TimezoneRegions2["AfricaBamako"] = "Africa/Bamako";
  TimezoneRegions2["AfricaBangui"] = "Africa/Bangui";
  TimezoneRegions2["AfricaBanjul"] = "Africa/Banjul";
  TimezoneRegions2["AfricaBissau"] = "Africa/Bissau";
  TimezoneRegions2["AfricaBlantyre"] = "Africa/Blantyre";
  TimezoneRegions2["AfricaBrazzaville"] = "Africa/Brazzaville";
  TimezoneRegions2["AfricaBujumbura"] = "Africa/Bujumbura";
  TimezoneRegions2["AfricaCairo"] = "Africa/Cairo";
  TimezoneRegions2["AfricaCasablanca"] = "Africa/Casablanca";
  TimezoneRegions2["AfricaCeuta"] = "Africa/Ceuta";
  TimezoneRegions2["AfricaConakry"] = "Africa/Conakry";
  TimezoneRegions2["AfricaDakar"] = "Africa/Dakar";
  TimezoneRegions2["AfricaDarEsSalaam"] = "Africa/Dar_es_Salaam";
  TimezoneRegions2["AfricaDjibouti"] = "Africa/Djibouti";
  TimezoneRegions2["AfricaDouala"] = "Africa/Douala";
  TimezoneRegions2["AfricaElAaiun"] = "Africa/El_Aaiun";
  TimezoneRegions2["AfricaFreetown"] = "Africa/Freetown";
  TimezoneRegions2["AfricaGaborone"] = "Africa/Gaborone";
  TimezoneRegions2["AfricaHarare"] = "Africa/Harare";
  TimezoneRegions2["AfricaJohannesburg"] = "Africa/Johannesburg";
  TimezoneRegions2["AfricaJuba"] = "Africa/Juba";
  TimezoneRegions2["AfricaKampala"] = "Africa/Kampala";
  TimezoneRegions2["AfricaKhartoum"] = "Africa/Khartoum";
  TimezoneRegions2["AfricaKigali"] = "Africa/Kigali";
  TimezoneRegions2["AfricaKinshasa"] = "Africa/Kinshasa";
  TimezoneRegions2["AfricaLagos"] = "Africa/Lagos";
  TimezoneRegions2["AfricaLibreville"] = "Africa/Libreville";
  TimezoneRegions2["AfricaLome"] = "Africa/Lome";
  TimezoneRegions2["AfricaLuanda"] = "Africa/Luanda";
  TimezoneRegions2["AfricaLubumbashi"] = "Africa/Lubumbashi";
  TimezoneRegions2["AfricaLusaka"] = "Africa/Lusaka";
  TimezoneRegions2["AfricaMalabo"] = "Africa/Malabo";
  TimezoneRegions2["AfricaMaputo"] = "Africa/Maputo";
  TimezoneRegions2["AfricaMaseru"] = "Africa/Maseru";
  TimezoneRegions2["AfricaMbabane"] = "Africa/Mbabane";
  TimezoneRegions2["AfricaMogadishu"] = "Africa/Mogadishu";
  TimezoneRegions2["AfricaMonrovia"] = "Africa/Monrovia";
  TimezoneRegions2["AfricaNairobi"] = "Africa/Nairobi";
  TimezoneRegions2["AfricaNdjamena"] = "Africa/Ndjamena";
  TimezoneRegions2["AfricaNiamey"] = "Africa/Niamey";
  TimezoneRegions2["AfricaNouakchott"] = "Africa/Nouakchott";
  TimezoneRegions2["AfricaOuagadougou"] = "Africa/Ouagadougou";
  TimezoneRegions2["AfricaPortoNovo"] = "Africa/Porto-Novo";
  TimezoneRegions2["AfricaSaoTome"] = "Africa/Sao_Tome";
  TimezoneRegions2["AfricaTripoli"] = "Africa/Tripoli";
  TimezoneRegions2["AfricaTunis"] = "Africa/Tunis";
  TimezoneRegions2["AfricaWindhoek"] = "Africa/Windhoek";
  TimezoneRegions2["AmericaAdak"] = "America/Adak";
  TimezoneRegions2["AmericaAnchorage"] = "America/Anchorage";
  TimezoneRegions2["AmericaAnguilla"] = "America/Anguilla";
  TimezoneRegions2["AmericaAntigua"] = "America/Antigua";
  TimezoneRegions2["AmericaAraguaina"] = "America/Araguaina";
  TimezoneRegions2["AmericaArgentinaBuenosAires"] = "America/Argentina/Buenos_Aires";
  TimezoneRegions2["AmericaArgentinaCatamarca"] = "America/Argentina/Catamarca";
  TimezoneRegions2["AmericaArgentinaCordoba"] = "America/Argentina/Cordoba";
  TimezoneRegions2["AmericaArgentinaJujuy"] = "America/Argentina/Jujuy";
  TimezoneRegions2["AmericaArgentinaLaRioja"] = "America/Argentina/La_Rioja";
  TimezoneRegions2["AmericaArgentinaMendoza"] = "America/Argentina/Mendoza";
  TimezoneRegions2["AmericaArgentinaRioGallegos"] = "America/Argentina/Rio_Gallegos";
  TimezoneRegions2["AmericaArgentinaSalta"] = "America/Argentina/Salta";
  TimezoneRegions2["AmericaArgentinaSanJuan"] = "America/Argentina/San_Juan";
  TimezoneRegions2["AmericaArgentinaSanLuis"] = "America/Argentina/San_Luis";
  TimezoneRegions2["AmericaArgentinaTucuman"] = "America/Argentina/Tucuman";
  TimezoneRegions2["AmericaArgentinaUshuaia"] = "America/Argentina/Ushuaia";
  TimezoneRegions2["AmericaAruba"] = "America/Aruba";
  TimezoneRegions2["AmericaAsuncion"] = "America/Asuncion";
  TimezoneRegions2["AmericaAtikokan"] = "America/Atikokan";
  TimezoneRegions2["AmericaAtka"] = "America/Atka";
  TimezoneRegions2["AmericaBahia"] = "America/Bahia";
  TimezoneRegions2["AmericaBahiaBanderas"] = "America/Bahia_Banderas";
  TimezoneRegions2["AmericaBarbados"] = "America/Barbados";
  TimezoneRegions2["AmericaBelem"] = "America/Belem";
  TimezoneRegions2["AmericaBelize"] = "America/Belize";
  TimezoneRegions2["AmericaBlancSablon"] = "America/Blanc-Sablon";
  TimezoneRegions2["AmericaBoaVista"] = "America/Boa_Vista";
  TimezoneRegions2["AmericaBogota"] = "America/Bogota";
  TimezoneRegions2["AmericaBoise"] = "America/Boise";
  TimezoneRegions2["AmericaCambridgeBay"] = "America/Cambridge_Bay";
  TimezoneRegions2["AmericaCampoGrande"] = "America/Campo_Grande";
  TimezoneRegions2["AmericaCancun"] = "America/Cancun";
  TimezoneRegions2["AmericaCaracas"] = "America/Caracas";
  TimezoneRegions2["AmericaCayenne"] = "America/Cayenne";
  TimezoneRegions2["AmericaCayman"] = "America/Cayman";
  TimezoneRegions2["AmericaChicago"] = "America/Chicago";
  TimezoneRegions2["AmericaChihuahua"] = "America/Chihuahua";
  TimezoneRegions2["AmericaCoralHarbour"] = "America/Coral_Harbour";
  TimezoneRegions2["AmericaCordoba"] = "America/Cordoba";
  TimezoneRegions2["AmericaCostaRica"] = "America/Costa_Rica";
  TimezoneRegions2["AmericaCreston"] = "America/Creston";
  TimezoneRegions2["AmericaCuiaba"] = "America/Cuiaba";
  TimezoneRegions2["AmericaCuracao"] = "America/Curacao";
  TimezoneRegions2["AmericaDanmarkshavn"] = "America/Danmarkshavn";
  TimezoneRegions2["AmericaDawson"] = "America/Dawson";
  TimezoneRegions2["AmericaDawsonCreek"] = "America/Dawson_Creek";
  TimezoneRegions2["AmericaDenver"] = "America/Denver";
  TimezoneRegions2["AmericaDetroit"] = "America/Detroit";
  TimezoneRegions2["AmericaDominica"] = "America/Dominica";
  TimezoneRegions2["AmericaEdmonton"] = "America/Edmonton";
  TimezoneRegions2["AmericaEirunepe"] = "America/Eirunepe";
  TimezoneRegions2["AmericaElSalvador"] = "America/El_Salvador";
  TimezoneRegions2["AmericaFortaleza"] = "America/Fortaleza";
  TimezoneRegions2["AmericaGlaceBay"] = "America/Glace_Bay";
  TimezoneRegions2["AmericaGodthab"] = "America/Godthab";
  TimezoneRegions2["AmericaGooseBay"] = "America/Goose_Bay";
  TimezoneRegions2["AmericaGrandTurk"] = "America/Grand_Turk";
  TimezoneRegions2["AmericaGrenada"] = "America/Grenada";
  TimezoneRegions2["AmericaGuadeloupe"] = "America/Guadeloupe";
  TimezoneRegions2["AmericaGuatemala"] = "America/Guatemala";
  TimezoneRegions2["AmericaGuayaquil"] = "America/Guayaquil";
  TimezoneRegions2["AmericaGuyana"] = "America/Guyana";
  TimezoneRegions2["AmericaHalifax"] = "America/Halifax";
  TimezoneRegions2["AmericaHavana"] = "America/Havana";
  TimezoneRegions2["AmericaHermosillo"] = "America/Hermosillo";
  TimezoneRegions2["AmericaIndianaIndianapolis"] = "America/Indiana/Indianapolis";
  TimezoneRegions2["AmericaIndianaKnox"] = "America/Indiana/Knox";
  TimezoneRegions2["AmericaIndianaMarengo"] = "America/Indiana/Marengo";
  TimezoneRegions2["AmericaIndianaPetersburg"] = "America/Indiana/Petersburg";
  TimezoneRegions2["AmericaIndianaTellCity"] = "America/Indiana/Tell_City";
  TimezoneRegions2["AmericaIndianaVevay"] = "America/Indiana/Vevay";
  TimezoneRegions2["AmericaIndianaVincennes"] = "America/Indiana/Vincennes";
  TimezoneRegions2["AmericaIndianaWinamac"] = "America/Indiana/Winamac";
  TimezoneRegions2["AmericaInuvik"] = "America/Inuvik";
  TimezoneRegions2["AmericaIqaluit"] = "America/Iqaluit";
  TimezoneRegions2["AmericaJamaica"] = "America/Jamaica";
  TimezoneRegions2["AmericaJuneau"] = "America/Juneau";
  TimezoneRegions2["AmericaKentuckyLouisville"] = "America/Kentucky/Louisville";
  TimezoneRegions2["AmericaKentuckyMonticello"] = "America/Kentucky/Monticello";
  TimezoneRegions2["AmericaKralendijk"] = "America/Kralendijk";
  TimezoneRegions2["AmericaLaPaz"] = "America/La_Paz";
  TimezoneRegions2["AmericaLima"] = "America/Lima";
  TimezoneRegions2["AmericaLosAngeles"] = "America/Los_Angeles";
  TimezoneRegions2["AmericaLouisville"] = "America/Louisville";
  TimezoneRegions2["AmericaLowerPrinces"] = "America/Lower_Princes";
  TimezoneRegions2["AmericaMaceio"] = "America/Maceio";
  TimezoneRegions2["AmericaManagua"] = "America/Managua";
  TimezoneRegions2["AmericaManaus"] = "America/Manaus";
  TimezoneRegions2["AmericaMarigot"] = "America/Marigot";
  TimezoneRegions2["AmericaMartinique"] = "America/Martinique";
  TimezoneRegions2["AmericaMatamoros"] = "America/Matamoros";
  TimezoneRegions2["AmericaMazatlan"] = "America/Mazatlan";
  TimezoneRegions2["AmericaMenominee"] = "America/Menominee";
  TimezoneRegions2["AmericaMerida"] = "America/Merida";
  TimezoneRegions2["AmericaMetlakatla"] = "America/Metlakatla";
  TimezoneRegions2["AmericaMexicoCity"] = "America/Mexico_City";
  TimezoneRegions2["AmericaMiquelon"] = "America/Miquelon";
  TimezoneRegions2["AmericaMoncton"] = "America/Moncton";
  TimezoneRegions2["AmericaMonterrey"] = "America/Monterrey";
  TimezoneRegions2["AmericaMontevideo"] = "America/Montevideo";
  TimezoneRegions2["AmericaMontserrat"] = "America/Montserrat";
  TimezoneRegions2["AmericaMontreal"] = "America/Montreal";
  TimezoneRegions2["AmericaNassau"] = "America/Nassau";
  TimezoneRegions2["AmericaNewYork"] = "America/New_York";
  TimezoneRegions2["AmericaNipigon"] = "America/Nipigon";
  TimezoneRegions2["AmericaNome"] = "America/Nome";
  TimezoneRegions2["AmericaNoronha"] = "America/Noronha";
  TimezoneRegions2["AmericaNorthDakotaBeulah"] = "America/North_Dakota/Beulah";
  TimezoneRegions2["AmericaNorthDakotaCenter"] = "America/North_Dakota/Center";
  TimezoneRegions2["AmericaNorthDakotaNewSalem"] = "America/North_Dakota/New_Salem";
  TimezoneRegions2["AmericaOjinaga"] = "America/Ojinaga";
  TimezoneRegions2["AmericaPanama"] = "America/Panama";
  TimezoneRegions2["AmericaPangnirtung"] = "America/Pangnirtung";
  TimezoneRegions2["AmericaParamaribo"] = "America/Paramaribo";
  TimezoneRegions2["AmericaPhoenix"] = "America/Phoenix";
  TimezoneRegions2["AmericaPortAuPrince"] = "America/Port-au-Prince";
  TimezoneRegions2["AmericaPortOfSpain"] = "America/Port_of_Spain";
  TimezoneRegions2["AmericaPortoVelho"] = "America/Porto_Velho";
  TimezoneRegions2["AmericaPuertoRico"] = "America/Puerto_Rico";
  TimezoneRegions2["AmericaRainyRiver"] = "America/Rainy_River";
  TimezoneRegions2["AmericaRankinInlet"] = "America/Rankin_Inlet";
  TimezoneRegions2["AmericaRecife"] = "America/Recife";
  TimezoneRegions2["AmericaRegina"] = "America/Regina";
  TimezoneRegions2["AmericaResolute"] = "America/Resolute";
  TimezoneRegions2["AmericaRioBranco"] = "America/Rio_Branco";
  TimezoneRegions2["AmericaSantaIsabel"] = "America/Santa_Isabel";
  TimezoneRegions2["AmericaSantarem"] = "America/Santarem";
  TimezoneRegions2["AmericaSantiago"] = "America/Santiago";
  TimezoneRegions2["AmericaSantoDomingo"] = "America/Santo_Domingo";
  TimezoneRegions2["AmericaSaoPaulo"] = "America/Sao_Paulo";
  TimezoneRegions2["AmericaScoresbysund"] = "America/Scoresbysund";
  TimezoneRegions2["AmericaShiprock"] = "America/Shiprock";
  TimezoneRegions2["AmericaSitka"] = "America/Sitka";
  TimezoneRegions2["AmericaStBarthelemy"] = "America/St_Barthelemy";
  TimezoneRegions2["AmericaStJohns"] = "America/St_Johns";
  TimezoneRegions2["AmericaStKitts"] = "America/St_Kitts";
  TimezoneRegions2["AmericaStLucia"] = "America/St_Lucia";
  TimezoneRegions2["AmericaStThomas"] = "America/St_Thomas";
  TimezoneRegions2["AmericaStVincent"] = "America/St_Vincent";
  TimezoneRegions2["AmericaSwiftCurrent"] = "America/Swift_Current";
  TimezoneRegions2["AmericaTegucigalpa"] = "America/Tegucigalpa";
  TimezoneRegions2["AmericaThule"] = "America/Thule";
  TimezoneRegions2["AmericaThunderBay"] = "America/Thunder_Bay";
  TimezoneRegions2["AmericaTijuana"] = "America/Tijuana";
  TimezoneRegions2["AmericaToronto"] = "America/Toronto";
  TimezoneRegions2["AmericaTortola"] = "America/Tortola";
  TimezoneRegions2["AmericaVancouver"] = "America/Vancouver";
  TimezoneRegions2["AmericaWhitehorse"] = "America/Whitehorse";
  TimezoneRegions2["AmericaWinnipeg"] = "America/Winnipeg";
  TimezoneRegions2["AmericaYakutat"] = "America/Yakutat";
  TimezoneRegions2["AmericaYellowknife"] = "America/Yellowknife";
  TimezoneRegions2["AntarcticaCasey"] = "Antarctica/Casey";
  TimezoneRegions2["AntarcticaDavis"] = "Antarctica/Davis";
  TimezoneRegions2["AntarcticaDumontDUrville"] = "Antarctica/DumontDUrville";
  TimezoneRegions2["AntarcticaMacquarie"] = "Antarctica/Macquarie";
  TimezoneRegions2["AntarcticaMawson"] = "Antarctica/Mawson";
  TimezoneRegions2["AntarcticaMcMurdo"] = "Antarctica/McMurdo";
  TimezoneRegions2["AntarcticaPalmer"] = "Antarctica/Palmer";
  TimezoneRegions2["AntarcticaRothera"] = "Antarctica/Rothera";
  TimezoneRegions2["AntarcticaSyowa"] = "Antarctica/Syowa";
  TimezoneRegions2["AntarcticaTroll"] = "Antarctica/Troll";
  TimezoneRegions2["AntarcticaVostok"] = "Antarctica/Vostok";
  TimezoneRegions2["ArcticLongyearbyen"] = "Arctic/Longyearbyen";
  TimezoneRegions2["AsiaAden"] = "Asia/Aden";
  TimezoneRegions2["AsiaAlmaty"] = "Asia/Almaty";
  TimezoneRegions2["AsiaAmman"] = "Asia/Amman";
  TimezoneRegions2["AsiaAnadyr"] = "Asia/Anadyr";
  TimezoneRegions2["AsiaAqtau"] = "Asia/Aqtau";
  TimezoneRegions2["AsiaAqtobe"] = "Asia/Aqtobe";
  TimezoneRegions2["AsiaAshgabat"] = "Asia/Ashgabat";
  TimezoneRegions2["AsiaBaghdad"] = "Asia/Baghdad";
  TimezoneRegions2["AsiaBahrain"] = "Asia/Bahrain";
  TimezoneRegions2["AsiaBaku"] = "Asia/Baku";
  TimezoneRegions2["AsiaBangkok"] = "Asia/Bangkok";
  TimezoneRegions2["AsiaBarnaul"] = "Asia/Barnaul";
  TimezoneRegions2["AsiaBeirut"] = "Asia/Beirut";
  TimezoneRegions2["AsiaBishkek"] = "Asia/Bishkek";
  TimezoneRegions2["AsiaBrunei"] = "Asia/Brunei";
  TimezoneRegions2["AsiaChita"] = "Asia/Chita";
  TimezoneRegions2["AsiaChoibalsan"] = "Asia/Choibalsan";
  TimezoneRegions2["AsiaColombo"] = "Asia/Colombo";
  TimezoneRegions2["AsiaDamascus"] = "Asia/Damascus";
  TimezoneRegions2["AsiaDhaka"] = "Asia/Dhaka";
  TimezoneRegions2["AsiaDili"] = "Asia/Dili";
  TimezoneRegions2["AsiaDubai"] = "Asia/Dubai";
  TimezoneRegions2["AsiaDushanbe"] = "Asia/Dushanbe";
  TimezoneRegions2["AsiaFamagusta"] = "Asia/Famagusta";
  TimezoneRegions2["AsiaGaza"] = "Asia/Gaza";
  TimezoneRegions2["AsiaHebron"] = "Asia/Hebron";
  TimezoneRegions2["AsiaHoChiMinh"] = "Asia/Ho_Chi_Minh";
  TimezoneRegions2["AsiaHongKong"] = "Asia/Hong_Kong";
  TimezoneRegions2["AsiaHovd"] = "Asia/Hovd";
  TimezoneRegions2["AsiaIrkutsk"] = "Asia/Irkutsk";
  TimezoneRegions2["AsiaJakarta"] = "Asia/Jakarta";
  TimezoneRegions2["AsiaJayapura"] = "Asia/Jayapura";
  TimezoneRegions2["AsiaJerusalem"] = "Asia/Jerusalem";
  TimezoneRegions2["AsiaKabul"] = "Asia/Kabul";
  TimezoneRegions2["AsiaKamchatka"] = "Asia/Kamchatka";
  TimezoneRegions2["AsiaKarachi"] = "Asia/Karachi";
  TimezoneRegions2["AsiaKathmandu"] = "Asia/Kathmandu";
  TimezoneRegions2["AsiaKhandyga"] = "Asia/Khandyga";
  TimezoneRegions2["AsiaKolkata"] = "Asia/Kolkata";
  TimezoneRegions2["AsiaKrasnoyarsk"] = "Asia/Krasnoyarsk";
  TimezoneRegions2["AsiaKualaLumpur"] = "Asia/Kuala_Lumpur";
  TimezoneRegions2["AsiaKuching"] = "Asia/Kuching";
  TimezoneRegions2["AsiaKuwait"] = "Asia/Kuwait";
  TimezoneRegions2["AsiaMacau"] = "Asia/Macau";
  TimezoneRegions2["AsiaMagadan"] = "Asia/Magadan";
  TimezoneRegions2["AsiaMakassar"] = "Asia/Makassar";
  TimezoneRegions2["AsiaManila"] = "Asia/Manila";
  TimezoneRegions2["AsiaMuscat"] = "Asia/Muscat";
  TimezoneRegions2["AsiaNicosia"] = "Asia/Nicosia";
  TimezoneRegions2["AsiaNovokuznetsk"] = "Asia/Novokuznetsk";
  TimezoneRegions2["AsiaNovosibirsk"] = "Asia/Novosibirsk";
  TimezoneRegions2["AsiaOmsk"] = "Asia/Omsk";
  TimezoneRegions2["AsiaOral"] = "Asia/Oral";
  TimezoneRegions2["AsiaPhnomPenh"] = "Asia/Phnom_Penh";
  TimezoneRegions2["AsiaPontianak"] = "Asia/Pontianak";
  TimezoneRegions2["AsiaPyongyang"] = "Asia/Pyongyang";
  TimezoneRegions2["AsiaQatar"] = "Asia/Qatar";
  TimezoneRegions2["AsiaQyzylorda"] = "Asia/Qyzylorda";
  TimezoneRegions2["AsiaRangoon"] = "Asia/Rangoon";
  TimezoneRegions2["AsiaRiyadh"] = "Asia/Riyadh";
  TimezoneRegions2["AsiaSakhalin"] = "Asia/Sakhalin";
  TimezoneRegions2["AsiaSamarkand"] = "Asia/Samarkand";
  TimezoneRegions2["AsiaSeoul"] = "Asia/Seoul";
  TimezoneRegions2["AsiaShanghai"] = "Asia/Shanghai";
  TimezoneRegions2["AsiaSingapore"] = "Asia/Singapore";
  TimezoneRegions2["AsiaSrednekolymsk"] = "Asia/Srednekolymsk";
  TimezoneRegions2["AsiaTaipei"] = "Asia/Taipei";
  TimezoneRegions2["AsiaTashkent"] = "Asia/Tashkent";
  TimezoneRegions2["AsiaTbilisi"] = "Asia/Tbilisi";
  TimezoneRegions2["AsiaTehran"] = "Asia/Tehran";
  TimezoneRegions2["AsiaThimphu"] = "Asia/Thimphu";
  TimezoneRegions2["AsiaTokyo"] = "Asia/Tokyo";
  TimezoneRegions2["AsiaTomsk"] = "Asia/Tomsk";
  TimezoneRegions2["AsiaUlaanbaatar"] = "Asia/Ulaanbaatar";
  TimezoneRegions2["AsiaUrumqi"] = "Asia/Urumqi";
  TimezoneRegions2["AsiaUstNera"] = "Asia/Ust-Nera";
  TimezoneRegions2["AsiaVientiane"] = "Asia/Vientiane";
  TimezoneRegions2["AsiaVladivostok"] = "Asia/Vladivostok";
  TimezoneRegions2["AsiaYakutsk"] = "Asia/Yakutsk";
  TimezoneRegions2["AsiaYekaterinburg"] = "Asia/Yekaterinburg";
  TimezoneRegions2["AsiaYerevan"] = "Asia/Yerevan";
  TimezoneRegions2["AtlanticAzores"] = "Atlantic/Azores";
  TimezoneRegions2["AtlanticBermuda"] = "Atlantic/Bermuda";
  TimezoneRegions2["AtlanticCanary"] = "Atlantic/Canary";
  TimezoneRegions2["AtlanticCapeVerde"] = "Atlantic/Cape_Verde";
  TimezoneRegions2["AtlanticFaroe"] = "Atlantic/Faroe";
  TimezoneRegions2["AtlanticMadeira"] = "Atlantic/Madeira";
  TimezoneRegions2["AtlanticReykjavik"] = "Atlantic/Reykjavik";
  TimezoneRegions2["AtlanticSouthGeorgia"] = "Atlantic/South_Georgia";
  TimezoneRegions2["AtlanticStHelena"] = "Atlantic/St_Helena";
  TimezoneRegions2["AtlanticStanley"] = "Atlantic/Stanley";
  TimezoneRegions2["AustraliaAdelaide"] = "Australia/Adelaide";
  TimezoneRegions2["AustraliaBrisbane"] = "Australia/Brisbane";
  TimezoneRegions2["AustraliaBrokenHill"] = "Australia/Broken_Hill";
  TimezoneRegions2["AustraliaCanberra"] = "Australia/Canberra";
  TimezoneRegions2["AustraliaCurrie"] = "Australia/Currie";
  TimezoneRegions2["AustraliaDarwin"] = "Australia/Darwin";
  TimezoneRegions2["AustraliaEucla"] = "Australia/Eucla";
  TimezoneRegions2["AustraliaHobart"] = "Australia/Hobart";
  TimezoneRegions2["AustraliaLindeman"] = "Australia/Lindeman";
  TimezoneRegions2["AustraliaLordHowe"] = "Australia/Lord_Howe";
  TimezoneRegions2["AustraliaMelbourne"] = "Australia/Melbourne";
  TimezoneRegions2["AustraliaPerth"] = "Australia/Perth";
  TimezoneRegions2["AustraliaSydney"] = "Australia/Sydney";
  TimezoneRegions2["EuropeAmsterdam"] = "Europe/Amsterdam";
  TimezoneRegions2["EuropeAndorra"] = "Europe/Andorra";
  TimezoneRegions2["EuropeAthens"] = "Europe/Athens";
  TimezoneRegions2["EuropeBelgrade"] = "Europe/Belgrade";
  TimezoneRegions2["EuropeBerlin"] = "Europe/Berlin";
  TimezoneRegions2["EuropeBratislava"] = "Europe/Bratislava";
  TimezoneRegions2["EuropeBrussels"] = "Europe/Brussels";
  TimezoneRegions2["EuropeBucharest"] = "Europe/Bucharest";
  TimezoneRegions2["EuropeBudapest"] = "Europe/Budapest";
  TimezoneRegions2["EuropeBusingen"] = "Europe/Busingen";
  TimezoneRegions2["EuropeChisinau"] = "Europe/Chisinau";
  TimezoneRegions2["EuropeCopenhagen"] = "Europe/Copenhagen";
  TimezoneRegions2["EuropeDublin"] = "Europe/Dublin";
  TimezoneRegions2["EuropeGibraltar"] = "Europe/Gibraltar";
  TimezoneRegions2["EuropeGuernsey"] = "Europe/Guernsey";
  TimezoneRegions2["EuropeHelsinki"] = "Europe/Helsinki";
  TimezoneRegions2["EuropeIsleOfMan"] = "Europe/Isle_of_Man";
  TimezoneRegions2["EuropeIstanbul"] = "Europe/Istanbul";
  TimezoneRegions2["EuropeJersey"] = "Europe/Jersey";
  TimezoneRegions2["EuropeKaliningrad"] = "Europe/Kaliningrad";
  TimezoneRegions2["EuropeKiev"] = "Europe/Kiev";
  TimezoneRegions2["EuropeKirov"] = "Europe/Kirov";
  TimezoneRegions2["EuropeLisbon"] = "Europe/Lisbon";
  TimezoneRegions2["EuropeLjubljana"] = "Europe/Ljubljana";
  TimezoneRegions2["EuropeLondon"] = "Europe/London";
  TimezoneRegions2["EuropeLuxembourg"] = "Europe/Luxembourg";
  TimezoneRegions2["EuropeMadrid"] = "Europe/Madrid";
  TimezoneRegions2["EuropeMalta"] = "Europe/Malta";
  TimezoneRegions2["EuropeMariehamn"] = "Europe/Mariehamn";
  TimezoneRegions2["EuropeMinsk"] = "Europe/Minsk";
  TimezoneRegions2["EuropeMonaco"] = "Europe/Monaco";
  TimezoneRegions2["EuropeMoscow"] = "Europe/Moscow";
  TimezoneRegions2["EuropeOslo"] = "Europe/Oslo";
  TimezoneRegions2["EuropeParis"] = "Europe/Paris";
  TimezoneRegions2["EuropePodgorica"] = "Europe/Podgorica";
  TimezoneRegions2["EuropePrague"] = "Europe/Prague";
  TimezoneRegions2["EuropeRiga"] = "Europe/Riga";
  TimezoneRegions2["EuropeRome"] = "Europe/Rome";
  TimezoneRegions2["EuropeSamara"] = "Europe/Samara";
  TimezoneRegions2["EuropeSanMarino"] = "Europe/San_Marino";
  TimezoneRegions2["EuropeSarajevo"] = "Europe/Sarajevo";
  TimezoneRegions2["EuropeSimferopol"] = "Europe/Simferopol";
  TimezoneRegions2["EuropeSkopje"] = "Europe/Skopje";
  TimezoneRegions2["EuropeSofia"] = "Europe/Sofia";
  TimezoneRegions2["EuropeStockholm"] = "Europe/Stockholm";
  TimezoneRegions2["EuropeTallinn"] = "Europe/Tallinn";
  TimezoneRegions2["EuropeTirane"] = "Europe/Tirane";
  TimezoneRegions2["EuropeUzhgorod"] = "Europe/Uzhgorod";
  TimezoneRegions2["EuropeVaduz"] = "Europe/Vaduz";
  TimezoneRegions2["EuropeVatican"] = "Europe/Vatican";
  TimezoneRegions2["EuropeVienna"] = "Europe/Vienna";
  TimezoneRegions2["EuropeVilnius"] = "Europe/Vilnius";
  TimezoneRegions2["EuropeVolgograd"] = "Europe/Volgograd";
  TimezoneRegions2["EuropeWarsaw"] = "Europe/Warsaw";
  TimezoneRegions2["EuropeZagreb"] = "Europe/Zagreb";
  TimezoneRegions2["EuropeZaporozhye"] = "Europe/Zaporozhye";
  TimezoneRegions2["EuropeZurich"] = "Europe/Zurich";
  TimezoneRegions2["GMT"] = "GMT";
  TimezoneRegions2["IndianAntananarivo"] = "Indian/Antananarivo";
  TimezoneRegions2["IndianChagos"] = "Indian/Chagos";
  TimezoneRegions2["IndianChristmas"] = "Indian/Christmas";
  TimezoneRegions2["IndianCocos"] = "Indian/Cocos";
  TimezoneRegions2["IndianComoro"] = "Indian/Comoro";
  TimezoneRegions2["IndianKerguelen"] = "Indian/Kerguelen";
  TimezoneRegions2["IndianMahe"] = "Indian/Mahe";
  TimezoneRegions2["IndianMaldives"] = "Indian/Maldives";
  TimezoneRegions2["IndianMauritius"] = "Indian/Mauritius";
  TimezoneRegions2["IndianMayotte"] = "Indian/Mayotte";
  TimezoneRegions2["IndianReunion"] = "Indian/Reunion";
  TimezoneRegions2["PacificApia"] = "Pacific/Apia";
  TimezoneRegions2["PacificAuckland"] = "Pacific/Auckland";
  TimezoneRegions2["PacificBougainville"] = "Pacific/Bougainville";
  TimezoneRegions2["PacificChatham"] = "Pacific/Chatham";
  TimezoneRegions2["PacificChuuk"] = "Pacific/Chuuk";
  TimezoneRegions2["PacificEaster"] = "Pacific/Easter";
  TimezoneRegions2["PacificEfate"] = "Pacific/Efate";
  TimezoneRegions2["PacificEnderbury"] = "Pacific/Enderbury";
  TimezoneRegions2["PacificFakaofo"] = "Pacific/Fakaofo";
  TimezoneRegions2["PacificFiji"] = "Pacific/Fiji";
  TimezoneRegions2["PacificFunafuti"] = "Pacific/Funafuti";
  TimezoneRegions2["PacificGalapagos"] = "Pacific/Galapagos";
  TimezoneRegions2["PacificGambier"] = "Pacific/Gambier";
  TimezoneRegions2["PacificGuadalcanal"] = "Pacific/Guadalcanal";
  TimezoneRegions2["PacificGuam"] = "Pacific/Guam";
  TimezoneRegions2["PacificHonolulu"] = "Pacific/Honolulu";
  TimezoneRegions2["PacificJohnston"] = "Pacific/Johnston";
  TimezoneRegions2["PacificKiritimati"] = "Pacific/Kiritimati";
  TimezoneRegions2["PacificKosrae"] = "Pacific/Kosrae";
  TimezoneRegions2["PacificKwajalein"] = "Pacific/Kwajalein";
  TimezoneRegions2["PacificMajuro"] = "Pacific/Majuro";
  TimezoneRegions2["PacificMarquesas"] = "Pacific/Marquesas";
  TimezoneRegions2["PacificMidway"] = "Pacific/Midway";
  TimezoneRegions2["PacificNauru"] = "Pacific/Nauru";
  TimezoneRegions2["PacificNiue"] = "Pacific/Niue";
  TimezoneRegions2["PacificNorfolk"] = "Pacific/Norfolk";
  TimezoneRegions2["PacificNoumea"] = "Pacific/Noumea";
  TimezoneRegions2["PacificPagoPago"] = "Pacific/Pago_Pago";
  TimezoneRegions2["PacificPalau"] = "Pacific/Palau";
  TimezoneRegions2["PacificPitcairn"] = "Pacific/Pitcairn";
  TimezoneRegions2["PacificPohnpei"] = "Pacific/Pohnpei";
  TimezoneRegions2["PacificPonape"] = "Pacific/Ponape";
  TimezoneRegions2["PacificPortMoresby"] = "Pacific/Port_Moresby";
  TimezoneRegions2["PacificRarotonga"] = "Pacific/Rarotonga";
  TimezoneRegions2["PacificSaipan"] = "Pacific/Saipan";
  TimezoneRegions2["PacificSamoa"] = "Pacific/Samoa";
  TimezoneRegions2["PacificTahiti"] = "Pacific/Tahiti";
  TimezoneRegions2["PacificTarawa"] = "Pacific/Tarawa";
  TimezoneRegions2["PacificTongatapu"] = "Pacific/Tongatapu";
  TimezoneRegions2["PacificTruk"] = "Pacific/Truk";
  TimezoneRegions2["PacificWake"] = "Pacific/Wake";
  TimezoneRegions2["PacificWallis"] = "Pacific/Wallis";
  TimezoneRegions2["PacificYap"] = "Pacific/Yap";
})(TimezoneRegions$1 || (TimezoneRegions$1 = {}));
var TimezoneOffset$1;
(function(TimezoneOffset2) {
  TimezoneOffset2["UTC_MINUS_12"] = "UTC-12";
  TimezoneOffset2["UTC_MINUS_11_30"] = "UTC-11:30";
  TimezoneOffset2["UTC_MINUS_11"] = "UTC-11";
  TimezoneOffset2["UTC_MINUS_10_30"] = "UTC-10:30";
  TimezoneOffset2["UTC_MINUS_10"] = "UTC-10";
  TimezoneOffset2["UTC_MINUS_9_30"] = "UTC-9:30";
  TimezoneOffset2["UTC_MINUS_9"] = "UTC-09";
  TimezoneOffset2["UTC_MINUS_8_45"] = "UTC-8:45";
  TimezoneOffset2["UTC_MINUS_8"] = "UTC-08";
  TimezoneOffset2["UTC_MINUS_7"] = "UTC-07";
  TimezoneOffset2["UTC_MINUS_6_30"] = "UTC-6:30";
  TimezoneOffset2["UTC_MINUS_6"] = "UTC-06";
  TimezoneOffset2["UTC_MINUS_5_45"] = "UTC-5:45";
  TimezoneOffset2["UTC_MINUS_5_30"] = "UTC-5:30";
  TimezoneOffset2["UTC_MINUS_5"] = "UTC-05";
  TimezoneOffset2["UTC_MINUS_4_30"] = "UTC-4:30";
  TimezoneOffset2["UTC_MINUS_4"] = "UTC-04";
  TimezoneOffset2["UTC_MINUS_3_30"] = "UTC-3:30";
  TimezoneOffset2["UTC_MINUS_3"] = "UTC-03";
  TimezoneOffset2["UTC_MINUS_2_30"] = "UTC-2:30";
  TimezoneOffset2["UTC_MINUS_2"] = "UTC-02";
  TimezoneOffset2["UTC_MINUS_1"] = "UTC-01";
  TimezoneOffset2["UTC_0"] = "UTC+00";
  TimezoneOffset2["UTC_PLUS_1"] = "UTC+01";
  TimezoneOffset2["UTC_PLUS_2"] = "UTC+02";
  TimezoneOffset2["UTC_PLUS_3"] = "UTC+03";
  TimezoneOffset2["UTC_PLUS_3_30"] = "UTC+3:30";
  TimezoneOffset2["UTC_PLUS_4"] = "UTC+04";
  TimezoneOffset2["UTC_PLUS_4_30"] = "UTC+4:30";
  TimezoneOffset2["UTC_PLUS_5"] = "UTC+05";
  TimezoneOffset2["UTC_PLUS_5_30"] = "UTC+5:30";
  TimezoneOffset2["UTC_PLUS_5_45"] = "UTC+5:45";
  TimezoneOffset2["UTC_PLUS_6"] = "UTC+06";
  TimezoneOffset2["UTC_PLUS_6_30"] = "UTC+6:30";
  TimezoneOffset2["UTC_PLUS_7"] = "UTC+07";
  TimezoneOffset2["UTC_PLUS_8"] = "UTC+08";
  TimezoneOffset2["UTC_PLUS_8_45"] = "UTC+8:45";
  TimezoneOffset2["UTC_PLUS_9"] = "UTC+09";
  TimezoneOffset2["UTC_PLUS_9_30"] = "UTC+9:30";
  TimezoneOffset2["UTC_PLUS_10"] = "UTC+10";
  TimezoneOffset2["UTC_PLUS_10_30"] = "UTC+10:30";
  TimezoneOffset2["UTC_PLUS_11"] = "UTC+11";
  TimezoneOffset2["UTC_PLUS_11_30"] = "UTC+11:30";
  TimezoneOffset2["UTC_PLUS_12"] = "UTC+12";
  TimezoneOffset2["UTC_PLUS_12_45"] = "UTC+12:45";
  TimezoneOffset2["UTC_PLUS_13"] = "UTC+13";
  TimezoneOffset2["UTC_PLUS_13_45"] = "UTC+13:45";
  TimezoneOffset2["UTC_PLUS_14"] = "UTC+14";
})(TimezoneOffset$1 || (TimezoneOffset$1 = {}));
var Timezones$1;
(function(Timezones2) {
  Timezones2["AcreTime"] = "ACT";
  Timezones2["AfghanistanTime"] = "AFT";
  Timezones2["AIXCentralEuropeanTime"] = "DFT";
  Timezones2["AlaskaDaylightTime"] = "AKDT";
  Timezones2["AlaskaStandardTime"] = "AKST";
  Timezones2["AlmaAtaTime"] = "ALMT";
  Timezones2["AmazonSummerTime"] = "AMST";
  Timezones2["AmazonTime"] = "AMT";
  Timezones2["AnadyrTime"] = "ANAT";
  Timezones2["AqtobeTime"] = "AQTT";
  Timezones2["ArabiaStandardTime"] = "AST";
  Timezones2["ArgentinaTime"] = "ART";
  Timezones2["ArmeniaTime"] = "AMT";
  Timezones2["ASEANCommonTime"] = "ASEAN";
  Timezones2["AtlanticDaylightTime"] = "ADT";
  Timezones2["AtlanticStandardTime"] = "AST";
  Timezones2["AustralianCentralDaylightSavingTime"] = "ACDT";
  Timezones2["AustralianCentralStandardTime"] = "ACST";
  Timezones2["AustralianCentralWesternStandardTime"] = "ACWST";
  Timezones2["AustralianEasternDaylightSavingTime"] = "AEDT";
  Timezones2["AustralianEasternStandardTime"] = "AEST";
  Timezones2["AustralianEasternTime"] = "AET";
  Timezones2["AustralianWesternStandardTime"] = "AWST";
  Timezones2["AzerbaijanTime"] = "AZT";
  Timezones2["AzoresStandardTime"] = "AZOT";
  Timezones2["AzoresSummerTime"] = "AZOST";
  Timezones2["BakerIslandTime"] = "BIT";
  Timezones2["BangladeshStandardTime"] = "BST";
  Timezones2["BhutanTime"] = "BTT";
  Timezones2["BoliviaTime"] = "BOT";
  Timezones2["BougainvilleStandardTime"] = "BST";
  Timezones2["BrasiliaSummerTime"] = "BRST";
  Timezones2["BrasiliaTime"] = "BRT";
  Timezones2["BritishIndianOceanTime"] = "BIOT";
  Timezones2["BritishSummerTime"] = "BST";
  Timezones2["BruneiTime"] = "BNT";
  Timezones2["CapeVerdeTime"] = "CVT";
  Timezones2["CentralAfricaTime"] = "CAT";
  Timezones2["CentralDaylightTime"] = "CDT";
  Timezones2["CentralEuropeanSummerTime"] = "CEST";
  Timezones2["CentralEuropeanTime"] = "CET";
  Timezones2["CentralIndonesiaTime"] = "WITA";
  Timezones2["CentralStandardTime"] = "CST";
  Timezones2["CentralTime"] = "CT";
  Timezones2["CentralWesternStandardTime"] = "CWST";
  Timezones2["ChamorroStandardTime"] = "CHST";
  Timezones2["ChathamDaylightTime"] = "CHADT";
  Timezones2["ChathamStandardTime"] = "CHAST";
  Timezones2["ChileStandardTime"] = "CLT";
  Timezones2["ChileSummerTime"] = "CLST";
  Timezones2["ChinaStandardTime"] = "CST";
  Timezones2["ChoibalsanStandardTime"] = "CHOT";
  Timezones2["ChoibalsanSummerTime"] = "CHOST";
  Timezones2["ChristmasIslandTime"] = "CXT";
  Timezones2["ChuukTime"] = "CHUT";
  Timezones2["ClipptertonIslandStandardTime"] = "CIST";
  Timezones2["CocosIslandsTime"] = "CCT";
  Timezones2["ColombiaSummerTime"] = "COST";
  Timezones2["ColombiaTime"] = "COT";
  Timezones2["CookIslandTime"] = "CKT";
  Timezones2["CoordinatedUniversalTime"] = "UTC";
  Timezones2["CubaDaylightTime"] = "CDT";
  Timezones2["CubaStandardTime"] = "CST";
  Timezones2["DavisTime"] = "DAVT";
  Timezones2["DumontDUrvilleTime"] = "DDUT";
  Timezones2["EastAfricaTime"] = "EAT";
  Timezones2["EasterIslandStandardTime"] = "EAST";
  Timezones2["EasterIslandSummerTime"] = "EASST";
  Timezones2["EasternCaribbeanTime"] = "ECT";
  Timezones2["EasternDaylightTime"] = "EDT";
  Timezones2["EasternEuropeanSummerTime"] = "EEST";
  Timezones2["EasternEuropeanTime"] = "EET";
  Timezones2["EasternGreenlandSummerTime"] = "EGST";
  Timezones2["EasternGreenlandTime"] = "EGT";
  Timezones2["EasternIndonesianTime"] = "WIT";
  Timezones2["EasternStandardTime"] = "EST";
  Timezones2["EasternTime"] = "ET";
  Timezones2["EcuadorTime"] = "ECT";
  Timezones2["FalklandIslandsSummerTime"] = "FKST";
  Timezones2["FalklandIslandsTime"] = "FKT";
  Timezones2["FernandoDeNoronhaTime"] = "FNT";
  Timezones2["FijiTime"] = "FJT";
  Timezones2["FrenchGuianaTime"] = "GFT";
  Timezones2["FrenchSouthernAndAntarcticTime"] = "TFT";
  Timezones2["FurtherEasternEuropeanTime"] = "FET";
  Timezones2["GalapagosTime"] = "GALT";
  Timezones2["GambierIslandTime"] = "GIT";
  Timezones2["GambierIslandsTime"] = "GAMT";
  Timezones2["GeorgiaStandardTime"] = "GET";
  Timezones2["GilbertIslandTime"] = "GILT";
  Timezones2["GreenwichMeanTime"] = "GMT";
  Timezones2["GulfStandardTime"] = "GST";
  Timezones2["GuyanaTime"] = "GYT";
  Timezones2["HawaiiAleutianDaylightTime"] = "HDT";
  Timezones2["HawaiiAleutianStandardTime"] = "HST";
  Timezones2["HeardAndMcDonaldIslandsTime"] = "HMT";
  Timezones2["HeureAvanceeDEuropeCentraleTime"] = "HAEC";
  Timezones2["HongKongTime"] = "HKT";
  Timezones2["HovdSummerTime"] = "HOVST";
  Timezones2["HovdTime"] = "HOVT";
  Timezones2["IndianOceanTime"] = "IOT";
  Timezones2["IndianStandardTime"] = "IST";
  Timezones2["IndochinaTime"] = "ICT";
  Timezones2["InternationalDayLineWestTime"] = "IDLW";
  Timezones2["IranDaylightTime"] = "IRDT";
  Timezones2["IranStandardTime"] = "IRST";
  Timezones2["IrishStandardTime"] = "IST";
  Timezones2["IrkutskSummerTime"] = "IRKST";
  Timezones2["IrkutskTime"] = "IRKT";
  Timezones2["IsraelDaylightTime"] = "IDT";
  Timezones2["IsraelStandardTime"] = "IST";
  Timezones2["JapanStandardTime"] = "JST";
  Timezones2["KaliningradTime"] = "KALT";
  Timezones2["KamchatkaTime"] = "KAMT";
  Timezones2["KoreaStandardTime"] = "KST";
  Timezones2["KosraeTime"] = "KOST";
  Timezones2["KrasnoyarskSummerTime"] = "KRAST";
  Timezones2["KrasnoyarskTime"] = "KRAT";
  Timezones2["KyrgyzstanTime"] = "KGT";
  Timezones2["LineIslandsTime"] = "LINT";
  Timezones2["KazakhstanStandardTime"] = "KAST";
  Timezones2["LordHoweStandardTime"] = "LHST";
  Timezones2["LordHoweSummerTime"] = "LHST";
  Timezones2["MacquarieIslandStationTime"] = "MIST";
  Timezones2["MagadanTime"] = "MAGT";
  Timezones2["MalaysiaStandardTime"] = "MST";
  Timezones2["MalaysiaTime"] = "MYT";
  Timezones2["MaldivesTime"] = "MVT";
  Timezones2["MarquesasIslandsTime"] = "MART";
  Timezones2["MarshallIslandsTime"] = "MHT";
  Timezones2["MauritiusTime"] = "MUT";
  Timezones2["MawsonStationTime"] = "MAWT";
  Timezones2["MiddleEuropeanSummerTime"] = "MEDT";
  Timezones2["MiddleEuropeanTime"] = "MET";
  Timezones2["MoscowTime"] = "MSK";
  Timezones2["MountainDaylightTime"] = "MDT";
  Timezones2["MountainStandardTime"] = "MST";
  Timezones2["MyanmarStandardTime"] = "MMT";
  Timezones2["NepalTime"] = "NCT";
  Timezones2["NauruTime"] = "NRT";
  Timezones2["NewCaledoniaTime"] = "NCT";
  Timezones2["NewZealandDaylightTime"] = "NZDT";
  Timezones2["NewZealandStandardTime"] = "NZST";
  Timezones2["NewfoundlandDaylightTime"] = "NDT";
  Timezones2["NewfoundlandStandardTime"] = "NST";
  Timezones2["NewfoundlandTime"] = "NT";
  Timezones2["NiueTime"] = "NUT";
  Timezones2["NorfolkIslandTime"] = "NFT";
  Timezones2["NovosibirskTime"] = "NOVT";
  Timezones2["OmskTime"] = "OMST";
  Timezones2["OralTime"] = "ORAT";
  Timezones2["PacificDaylightTime"] = "PDT";
  Timezones2["PacificStandardTime"] = "PST";
  Timezones2["PakistanStandardTime"] = "PKT";
  Timezones2["PalauTime"] = "PWT";
  Timezones2["PapuaNewGuineaTime"] = "PGT";
  Timezones2["ParaguaySummerTime"] = "PYST";
  Timezones2["ParaguayTime"] = "PYT";
  Timezones2["PeruTime"] = "PET";
  Timezones2["PhilippineStandardTime"] = "PHST";
  Timezones2["PhilippineTime"] = "PHT";
  Timezones2["PhoenixIslandTime"] = "PHOT";
  Timezones2["PitcairnTime"] = "PST";
  Timezones2["PohnpeiStandardTime"] = "PONT";
  Timezones2["ReunionTime"] = "RET";
  Timezones2["RotheraResearchStationTime"] = "ROTT";
  Timezones2["SaintPierreAndMiquelonDaylightTime"] = "PMDT";
  Timezones2["SaintPierreAndMiquelonStandardTime"] = "PMST";
  Timezones2["SakhalinIslandTime"] = "SAKT";
  Timezones2["SamaraTime"] = "SAMT";
  Timezones2["SamoaDaylightTime"] = "SDT";
  Timezones2["SamoaStandardTime"] = "SST";
  Timezones2["SeychellesTime"] = "SCT";
  Timezones2["ShowaStationTime"] = "SYOT";
  Timezones2["SingaporeStandardTime"] = "SST";
  Timezones2["SingaporeTime"] = "SGT";
  Timezones2["SolomonIslandsTime"] = "SBT";
  Timezones2["SouthAfricanStandardTime"] = "SAST";
  Timezones2["SouthGeorgiaAndTheSouthSandwichIslandsTime"] = "GST";
  Timezones2["SrednekolymskTime"] = "SRET";
  Timezones2["SriLankaStandardTime"] = "SLST";
  Timezones2["SurinameTime"] = "SRT";
  Timezones2["TahitiTime"] = "TAHT";
  Timezones2["TajikistanTime"] = "TJT";
  Timezones2["ThailandStandardTime"] = "THA";
  Timezones2["TimorLesteTime"] = "TLT";
  Timezones2["TokelauTime"] = "TKT";
  Timezones2["TongaTime"] = "TOT";
  Timezones2["TurkeyTime"] = "TRT";
  Timezones2["TurkmenistanTime"] = "TMT";
  Timezones2["TuvaluTime"] = "TVT";
  Timezones2["UlaanbaatarStandardTime"] = "ULAT";
  Timezones2["UlaanbaatarSummerTime"] = "ULAST";
  Timezones2["UruguayStandardTime"] = "UYT";
  Timezones2["UruguaySummerTime"] = "UYST";
  Timezones2["UzbekistanTime"] = "UZT";
  Timezones2["VanuatuTime"] = "VUT";
  Timezones2["VenezuelaStandardTime"] = "VET";
  Timezones2["VladivostokTime"] = "VLAT";
  Timezones2["VolgogradTime"] = "VOLT";
  Timezones2["VostokStationTime"] = "VOST";
  Timezones2["WakeIslandTime"] = "WAKT";
  Timezones2["WestAfricaSummerTime"] = "WAST";
  Timezones2["WestAfricaTime"] = "WAT";
  Timezones2["WestGreenlandSummerTime"] = "WGST";
  Timezones2["WestGreenlandTime"] = "WGT";
  Timezones2["WestKazakhstanTime"] = "WKT";
  Timezones2["WesternEuropeanSummerTime"] = "WEDT";
  Timezones2["WesternEuropeanTime"] = "WET";
  Timezones2["WesternIndonesianTime"] = "WIT";
  Timezones2["WesternStandardTime"] = "WST";
  Timezones2["YakutskTime"] = "YAKT";
  Timezones2["YekaterinburgTime"] = "YEKT";
})(Timezones$1 || (Timezones$1 = {}));
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AcreTime,
  name: "Acre Time",
  offset: TimezoneOffset$1.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AfghanistanTime,
  name: "Afghanistan Time",
  offset: TimezoneOffset$1.UTC_PLUS_4_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AIXCentralEuropeanTime,
  name: "AIX Central European Time",
  offset: TimezoneOffset$1.UTC_PLUS_1
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.AlaskaDaylightTime,
  name: "Alaska Daylight Time",
  offset: TimezoneOffset$1.UTC_MINUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AlaskaStandardTime,
  name: "Alaska Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AlmaAtaTime,
  name: "Alma-Ata Time",
  offset: TimezoneOffset$1.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AmazonSummerTime,
  name: "Amazon Summer Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AmazonTime,
  name: "Amazon Time",
  offset: TimezoneOffset$1.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AnadyrTime,
  name: "Anadyr Time",
  offset: TimezoneOffset$1.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AqtobeTime,
  name: "Aqtobe Time",
  offset: TimezoneOffset$1.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ArabiaStandardTime,
  name: "Arabia Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ArgentinaTime,
  name: "Argentina Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ArmeniaTime,
  name: "Armenia Time",
  offset: TimezoneOffset$1.UTC_PLUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.AtlanticDaylightTime,
  name: "Atlantic Daylight Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AtlanticStandardTime,
  name: "Atlantic Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.AustralianCentralDaylightSavingTime,
  name: "Australian Central Daylight Saving Time",
  offset: TimezoneOffset$1.UTC_PLUS_10_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AustralianCentralStandardTime,
  name: "Australian Central Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_9_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AustralianCentralWesternStandardTime,
  name: "Australian Central Western Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_8_45
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.AustralianEasternDaylightSavingTime,
  name: "Australian Eastern Daylight Saving Time",
  offset: TimezoneOffset$1.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AustralianEasternStandardTime,
  name: "Australian Eastern Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AustralianEasternTime,
  name: "Australian Eastern Time",
  offset: TimezoneOffset$1.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AustralianWesternStandardTime,
  name: "Australian Western Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AzerbaijanTime,
  name: "Azerbaijan Time",
  offset: TimezoneOffset$1.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.AzoresStandardTime,
  name: "Azores Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_1
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.AzoresSummerTime,
  name: "Azores Summer Time",
  offset: TimezoneOffset$1.UTC_0
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.BakerIslandTime,
  name: "Baker Island Time",
  offset: TimezoneOffset$1.UTC_MINUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.BangladeshStandardTime,
  name: "Bangladesh Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.BhutanTime,
  name: "Bhutan Time",
  offset: TimezoneOffset$1.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.BoliviaTime,
  name: "Bolivia Time",
  offset: TimezoneOffset$1.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.BougainvilleStandardTime,
  name: "Bougainville Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_11
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.BrasiliaSummerTime,
  name: "Brasilia Summer Time",
  offset: TimezoneOffset$1.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.BrasiliaTime,
  name: "Brasilia Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.BritishIndianOceanTime,
  name: "British Indian Ocean Time",
  offset: TimezoneOffset$1.UTC_PLUS_6
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.BritishSummerTime,
  name: "British Summer Time",
  offset: TimezoneOffset$1.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.BruneiTime,
  name: "Brunei Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.CapeVerdeTime,
  name: "Cape Verde Time",
  offset: TimezoneOffset$1.UTC_MINUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.CentralAfricaTime,
  name: "Central Africa Time",
  offset: TimezoneOffset$1.UTC_PLUS_2
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.CentralDaylightTime,
  name: "Central Daylight Time",
  offset: TimezoneOffset$1.UTC_MINUS_5
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.CentralEuropeanSummerTime,
  name: "Central European Summer Time",
  offset: TimezoneOffset$1.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.CentralEuropeanTime,
  name: "Central European Time",
  offset: TimezoneOffset$1.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.CentralIndonesiaTime,
  name: "Central Indonesia Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.CentralStandardTime,
  name: "Central Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.CentralTime,
  name: "Central Time",
  offset: TimezoneOffset$1.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.CentralWesternStandardTime,
  name: "Central Western Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_8_45
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ChamorroStandardTime,
  name: "Chamorro Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_10
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.ChathamDaylightTime,
  name: "Chatham Daylight Time",
  offset: TimezoneOffset$1.UTC_PLUS_13_45
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ChathamStandardTime,
  name: "Chatham Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_12_45
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ChileStandardTime,
  name: "Chile Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.ChileSummerTime,
  name: "Chile Summer Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ChinaStandardTime,
  name: "China Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ChoibalsanStandardTime,
  name: "Choibalsan Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.ChoibalsanSummerTime,
  name: "Choibalsan Summer Time",
  offset: TimezoneOffset$1.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ChristmasIslandTime,
  name: "Christmas Island Time",
  offset: TimezoneOffset$1.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ChuukTime,
  name: "Chuuk Time",
  offset: TimezoneOffset$1.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ClipptertonIslandStandardTime,
  name: "Clippterton Island Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.CocosIslandsTime,
  name: "Cocos Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_6_30
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.ColombiaSummerTime,
  name: "Colombia Summer Time",
  offset: TimezoneOffset$1.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ColombiaTime,
  name: "Colombia Time",
  offset: TimezoneOffset$1.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.CookIslandTime,
  name: "Cook Island Time",
  offset: TimezoneOffset$1.UTC_MINUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.CoordinatedUniversalTime,
  name: "Coordinated Universal Time",
  offset: TimezoneOffset$1.UTC_0
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.CubaDaylightTime,
  name: "Cuba Daylight Time",
  offset: TimezoneOffset$1.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.CubaStandardTime,
  name: "Cuba Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.DavisTime,
  name: "Davis Time",
  offset: TimezoneOffset$1.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.DumontDUrvilleTime,
  name: "Dumont D'Urville Time",
  offset: TimezoneOffset$1.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.EastAfricaTime,
  name: "East Africa Time",
  offset: TimezoneOffset$1.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.EasterIslandStandardTime,
  name: "Easter Island Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_6
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.EasterIslandSummerTime,
  name: "Easter Island Summer Time",
  offset: TimezoneOffset$1.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.EasternCaribbeanTime,
  name: "Eastern Caribbean Time",
  offset: TimezoneOffset$1.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.EasternDaylightTime,
  name: "Eastern Daylight Time",
  offset: TimezoneOffset$1.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.EasternEuropeanSummerTime,
  name: "Eastern European Summer Time",
  offset: TimezoneOffset$1.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.EasternEuropeanTime,
  name: "Eastern European Time",
  offset: TimezoneOffset$1.UTC_PLUS_2
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.EasternGreenlandSummerTime,
  name: "Eastern Greenland Summer Time",
  offset: TimezoneOffset$1.UTC_0
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.EasternGreenlandTime,
  name: "Eastern Greenland Time",
  offset: TimezoneOffset$1.UTC_MINUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.EasternIndonesianTime,
  name: "Eastern Indonesian Time",
  offset: TimezoneOffset$1.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.EasternStandardTime,
  name: "Eastern Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.EasternTime,
  name: "Eastern Time",
  offset: TimezoneOffset$1.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.EcuadorTime,
  name: "Ecuador Time",
  offset: TimezoneOffset$1.UTC_MINUS_5
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.FalklandIslandsSummerTime,
  name: "Falkland Islands Summer Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.FalklandIslandsTime,
  name: "Falkland Islands Time",
  offset: TimezoneOffset$1.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.FernandoDeNoronhaTime,
  name: "Fernando de Noronha Time",
  offset: TimezoneOffset$1.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.FijiTime,
  name: "Fiji Time",
  offset: TimezoneOffset$1.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.FrenchGuianaTime,
  name: "French Guiana Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.FrenchSouthernAndAntarcticTime,
  name: "French Southern and Antarctic Time",
  offset: TimezoneOffset$1.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.FurtherEasternEuropeanTime,
  name: "Further Eastern European Time",
  offset: TimezoneOffset$1.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.GalapagosTime,
  name: "Galapagos Time",
  offset: TimezoneOffset$1.UTC_MINUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.GambierIslandTime,
  name: "Gambier Island Time",
  offset: TimezoneOffset$1.UTC_MINUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.GambierIslandsTime,
  name: "Gambier Islands Time",
  offset: TimezoneOffset$1.UTC_MINUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.GeorgiaStandardTime,
  name: "Georgia Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.GilbertIslandTime,
  name: "Gilbert Island Time",
  offset: TimezoneOffset$1.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.GreenwichMeanTime,
  name: "Greenwich Mean Time",
  offset: TimezoneOffset$1.UTC_0
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.GulfStandardTime,
  name: "Gulf Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.GuyanaTime,
  name: "Guyana Time",
  offset: TimezoneOffset$1.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.HawaiiAleutianDaylightTime,
  name: "Hawaii-Aleutian Daylight Time",
  offset: TimezoneOffset$1.UTC_MINUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.HawaiiAleutianStandardTime,
  name: "Hawaii-Aleutian Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.HeardAndMcDonaldIslandsTime,
  name: "Heard and McDonald Islands Time",
  offset: TimezoneOffset$1.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.HongKongTime,
  name: "Hong Kong Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.HovdSummerTime,
  name: "Hovd Summer Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.HovdTime,
  name: "Hovd Time",
  offset: TimezoneOffset$1.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.IndianOceanTime,
  name: "Indian Ocean Time",
  offset: TimezoneOffset$1.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.IndianStandardTime,
  name: "Indian Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_5_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.IndochinaTime,
  name: "Indochina Time",
  offset: TimezoneOffset$1.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.InternationalDayLineWestTime,
  name: "International Day Line West Time",
  offset: TimezoneOffset$1.UTC_MINUS_12
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.IranDaylightTime,
  name: "Iran Daylight Time",
  offset: TimezoneOffset$1.UTC_PLUS_4_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.IranStandardTime,
  name: "Iran Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_3_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.IrishStandardTime,
  name: "Irish Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.IrkutskTime,
  name: "Irkutsk Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones$1.IsraelDaylightTime,
  name: "Israel Daylight Time",
  offset: TimezoneOffset$1.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.IsraelStandardTime,
  name: "Israel Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.JapanStandardTime,
  name: "Japan Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.KaliningradTime,
  name: "Kaliningrad Time",
  offset: TimezoneOffset$1.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.KamchatkaTime,
  name: "Kamchatka Time",
  offset: TimezoneOffset$1.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.KoreaStandardTime,
  name: "Korea Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.KosraeTime,
  name: "Kosrae Time",
  offset: TimezoneOffset$1.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.KrasnoyarskTime,
  name: "Krasnoyarsk Time",
  offset: TimezoneOffset$1.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.KyrgyzstanTime,
  name: "Kyrgyzstan Time",
  offset: TimezoneOffset$1.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.LineIslandsTime,
  name: "Line Islands Time",
  offset: TimezoneOffset$1.UTC_PLUS_14
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.LordHoweStandardTime,
  name: "Lord Howe Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_10_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.LordHoweSummerTime,
  name: "Lord Howe Summer Time",
  offset: TimezoneOffset$1.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MacquarieIslandStationTime,
  name: "Macquarie Island Station Time",
  offset: TimezoneOffset$1.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MagadanTime,
  name: "Magadan Time",
  offset: TimezoneOffset$1.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MalaysiaStandardTime,
  name: "Malaysia Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MalaysiaTime,
  name: "Malaysia Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MaldivesTime,
  name: "Maldives Time",
  offset: TimezoneOffset$1.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MarquesasIslandsTime,
  name: "Marquesas Islands Time",
  offset: TimezoneOffset$1.UTC_PLUS_9_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MarshallIslandsTime,
  name: "Marshall Islands Time",
  offset: TimezoneOffset$1.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MauritiusTime,
  name: "Mauritius Time",
  offset: TimezoneOffset$1.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MawsonStationTime,
  name: "Mawson Station Time",
  offset: TimezoneOffset$1.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MiddleEuropeanSummerTime,
  name: "Middle European Summer Time",
  offset: TimezoneOffset$1.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MiddleEuropeanTime,
  name: "Middle European Time",
  offset: TimezoneOffset$1.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MoscowTime,
  name: "Moscow Time",
  offset: TimezoneOffset$1.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MountainDaylightTime,
  name: "Mountain Daylight Time",
  offset: TimezoneOffset$1.UTC_MINUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MountainStandardTime,
  name: "Mountain Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.MyanmarStandardTime,
  name: "Myanmar Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_6_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.NepalTime,
  name: "Nepal Time",
  offset: TimezoneOffset$1.UTC_PLUS_5_45
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.NauruTime,
  name: "Nauru Time",
  offset: TimezoneOffset$1.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.NewCaledoniaTime,
  name: "New Caledonia Time",
  offset: TimezoneOffset$1.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.NewZealandDaylightTime,
  name: "New Zealand Daylight Time",
  offset: TimezoneOffset$1.UTC_PLUS_13
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.NewZealandStandardTime,
  name: "New Zealand Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.NewfoundlandDaylightTime,
  name: "Newfoundland Daylight Time",
  offset: TimezoneOffset$1.UTC_MINUS_2_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.NewfoundlandTime,
  name: "Newfoundland Time",
  offset: TimezoneOffset$1.UTC_MINUS_3_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.NiueTime,
  name: "Niue Time",
  offset: TimezoneOffset$1.UTC_MINUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.NorfolkIslandTime,
  name: "Norfolk Island Time",
  offset: TimezoneOffset$1.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.NovosibirskTime,
  name: "Novosibirsk Time",
  offset: TimezoneOffset$1.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.OmskTime,
  name: "Omsk Time",
  offset: TimezoneOffset$1.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.OralTime,
  name: "Oral Time",
  offset: TimezoneOffset$1.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.PacificDaylightTime,
  name: "Pacific Daylight Time",
  offset: TimezoneOffset$1.UTC_MINUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.PacificStandardTime,
  name: "Pacific Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.PakistanStandardTime,
  name: "Pakistan Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.PalauTime,
  name: "Palau Time",
  offset: TimezoneOffset$1.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.PapuaNewGuineaTime,
  name: "Papua New Guinea Time",
  offset: TimezoneOffset$1.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ParaguaySummerTime,
  name: "Paraguay Summer Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ParaguayTime,
  name: "Paraguay Time",
  offset: TimezoneOffset$1.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.PeruTime,
  name: "Peru Time",
  offset: TimezoneOffset$1.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.PhilippineStandardTime,
  name: "Philippine Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.PhilippineTime,
  name: "Philippine Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.PhoenixIslandTime,
  name: "Phoenix Island Time",
  offset: TimezoneOffset$1.UTC_PLUS_13
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.PitcairnTime,
  name: "Pitcairn Time",
  offset: TimezoneOffset$1.UTC_MINUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.PohnpeiStandardTime,
  name: "Pohnpei Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ReunionTime,
  name: "Reunion Time",
  offset: TimezoneOffset$1.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.RotheraResearchStationTime,
  name: "Rothera Research Station Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SaintPierreAndMiquelonDaylightTime,
  name: "Saint Pierre and Miquelon Daylight Time",
  offset: TimezoneOffset$1.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SaintPierreAndMiquelonStandardTime,
  name: "Saint Pierre and Miquelon Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SakhalinIslandTime,
  name: "Sakhalin Island Time",
  offset: TimezoneOffset$1.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SamaraTime,
  name: "Samara Time",
  offset: TimezoneOffset$1.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SamoaDaylightTime,
  name: "Samoa Daylight Time",
  offset: TimezoneOffset$1.UTC_MINUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SamoaStandardTime,
  name: "Samoa Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SeychellesTime,
  name: "Seychelles Time",
  offset: TimezoneOffset$1.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ShowaStationTime,
  name: "Showa Station Time",
  offset: TimezoneOffset$1.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SingaporeStandardTime,
  name: "Singapore Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SingaporeTime,
  name: "Singapore Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SolomonIslandsTime,
  name: "Solomon Islands Time",
  offset: TimezoneOffset$1.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SouthAfricanStandardTime,
  name: "South African Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SouthGeorgiaAndTheSouthSandwichIslandsTime,
  name: "South Georgia and the South Sandwich Islands Time",
  offset: TimezoneOffset$1.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SrednekolymskTime,
  name: "Srednekolymsk Time",
  offset: TimezoneOffset$1.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SriLankaStandardTime,
  name: "Sri Lanka Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_5_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.SurinameTime,
  name: "Suriname Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.TahitiTime,
  name: "Tahiti Time",
  offset: TimezoneOffset$1.UTC_MINUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.TajikistanTime,
  name: "Tajikistan Time",
  offset: TimezoneOffset$1.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.ThailandStandardTime,
  name: "Thailand Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.TimorLesteTime,
  name: "Timor-Leste Time",
  offset: TimezoneOffset$1.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.TokelauTime,
  name: "Tokelau Time",
  offset: TimezoneOffset$1.UTC_PLUS_13
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.TongaTime,
  name: "Tonga Time",
  offset: TimezoneOffset$1.UTC_PLUS_13
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.TurkeyTime,
  name: "Turkey Time",
  offset: TimezoneOffset$1.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.TurkmenistanTime,
  name: "Turkmenistan Time",
  offset: TimezoneOffset$1.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.TuvaluTime,
  name: "Tuvalu Time",
  offset: TimezoneOffset$1.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.UlaanbaatarStandardTime,
  name: "Ulaanbaatar Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.UlaanbaatarSummerTime,
  name: "Ulaanbaatar Summer Time",
  offset: TimezoneOffset$1.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.UruguayStandardTime,
  name: "Uruguay Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.UruguaySummerTime,
  name: "Uruguay Summer Time",
  offset: TimezoneOffset$1.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.UzbekistanTime,
  name: "Uzbekistan Time",
  offset: TimezoneOffset$1.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.VanuatuTime,
  name: "Vanuatu Time",
  offset: TimezoneOffset$1.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.VenezuelaStandardTime,
  name: "Venezuela Standard Time",
  offset: TimezoneOffset$1.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.VladivostokTime,
  name: "Vladivostok Time",
  offset: TimezoneOffset$1.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.VolgogradTime,
  name: "Volgograd Time",
  offset: TimezoneOffset$1.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.VostokStationTime,
  name: "Vostok Station Time",
  offset: TimezoneOffset$1.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.WakeIslandTime,
  name: "Wake Island Time",
  offset: TimezoneOffset$1.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.WestAfricaSummerTime,
  name: "West Africa Summer Time",
  offset: TimezoneOffset$1.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.WestAfricaTime,
  name: "West Africa Time",
  offset: TimezoneOffset$1.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.WestGreenlandSummerTime,
  name: "West Greenland Summer Time",
  offset: TimezoneOffset$1.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.WestGreenlandTime,
  name: "West Greenland Time",
  offset: TimezoneOffset$1.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.WestKazakhstanTime,
  name: "West Kazakhstan Time",
  offset: TimezoneOffset$1.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.WesternEuropeanSummerTime,
  name: "Western European Summer Time",
  offset: TimezoneOffset$1.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.WesternEuropeanTime,
  name: "Western European Time",
  offset: TimezoneOffset$1.UTC_0
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.WesternIndonesianTime,
  name: "Western Indonesian Time",
  offset: TimezoneOffset$1.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.WesternStandardTime,
  name: "Western Standard Time",
  offset: TimezoneOffset$1.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.YakutskTime,
  name: "Yakutsk Time",
  offset: TimezoneOffset$1.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones$1.YekaterinburgTime,
  name: "Yekaterinburg Time",
  offset: TimezoneOffset$1.UTC_PLUS_5
});
var Region$1;
(function(Region2) {
  Region2["Africa"] = "Africa";
  Region2["Americas"] = "Americas";
  Region2["Asia"] = "Asia";
  Region2["Europe"] = "Europe";
  Region2["Oceania"] = "Oceania";
  Region2["Polar"] = "Polar";
})(Region$1 || (Region$1 = {}));
var SubRegion$1;
(function(SubRegion2) {
  SubRegion2["CentralAmerica"] = "Central America";
  SubRegion2["EasternAsia"] = "Eastern Asia";
  SubRegion2["EasternEurope"] = "Eastern Europe";
  SubRegion2["EasternAfrica"] = "Eastern Africa";
  SubRegion2["MiddleAfrica"] = "Middle Africa";
  SubRegion2["MiddleEast"] = "Middle East";
  SubRegion2["NorthernAfrica"] = "Northern Africa";
  SubRegion2["NorthernAmerica"] = "Northern America";
  SubRegion2["NorthernEurope"] = "Northern Europe";
  SubRegion2["Polynesia"] = "Polynesia";
  SubRegion2["SouthAmerica"] = "South America";
  SubRegion2["SouthernAfrica"] = "Southern Africa";
  SubRegion2["SouthernAsia"] = "Southern Asia";
  SubRegion2["SouthernEurope"] = "Southern Europe";
  SubRegion2["WesternAfrica"] = "Western Africa";
  SubRegion2["WesternAsia"] = "Western Asia";
  SubRegion2["WesternEurope"] = "Western Europe";
  SubRegion2["WesternAustralia"] = "Western Australia";
})(SubRegion$1 || (SubRegion$1 = {}));
({
  Afghanistan: {
    i18n: {
      calling_codes: [93],
      currencies: [CurrencyCode$1.AfghanistanAfghani],
      languages: [
        LocaleCode$1.Pashto,
        LocaleCode$1.Dari,
        LocaleCode$1.Turkmen,
        LocaleCode$1.Uzbek
      ],
      tz: {
        offsets: [TimezoneOffset$1.UTC_PLUS_4_30],
        regions: [TimezoneRegions$1.AsiaKabul],
        timezones: [Timezones$1.AfghanistanTime]
      }
    },
    id: CountryCode$1.Afghanistan,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1EB}",
        emoji_unicode: "U+1F1E6 U+1F1EB",
        svg: "https://www.countryflags.io/af/flat/64.svg"
      },
      tld: [".af"]
    },
    iso: {
      alpha2: CountryCode$1.Afghanistan,
      alpha3: "AFG",
      numeric: "004"
    },
    name: {
      alt_spellings: ["AF", "Af\u0121\u0101nist\u0101n"],
      demonym: "Afghan",
      native: {
        endonym: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
      },
      official: "Islamic Republic of Afghanistan",
      short: "Afghanistan",
      translations: {
        [LocaleCode$1.Afrikaans]: "Afghanistan",
        [LocaleCode$1.Albanian]: "Shqip\xEBri",
        [LocaleCode$1.Amharic]: "\u12A0\u134D\u130B\u1295",
        [LocaleCode$1.Arabic]: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode$1.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576",
        [LocaleCode$1.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode$1.Bashkir]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Basque]: "Afganist\xE1n",
        [LocaleCode$1.Belarusian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Bengali]: "\u0986\u09AB\u0997\u09BE\u09A8\u09BF\u09B8\u09CD\u09A4\u09BE\u09A8",
        [LocaleCode$1.Berber]: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode$1.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F51\u0F7C\u0F53\u0F0B\u0F63\u0F7A\u0F0B\u0F66\u0F90\u0F51\u0F0B\u0F46\u0F0D",
        [LocaleCode$1.Bosnian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Breton]: "Afganistan",
        [LocaleCode$1.Bulgarian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Burmese]: "\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A",
        [LocaleCode$1.Catalan]: "Afganistan",
        [LocaleCode$1.Chinese]: "\u963F\u5BCC\u6C57",
        [LocaleCode$1.Croatian]: "Afganistan",
        [LocaleCode$1.Czech]: "Afganistan",
        [LocaleCode$1.Danish]: "Afghanistan",
        [LocaleCode$1.Dutch]: "Afghanistan",
        [LocaleCode$1.English]: "Afghanistan",
        [LocaleCode$1.Esperanto]: "Afganistan",
        [LocaleCode$1.Estonian]: "Afganistan",
        [LocaleCode$1.Finnish]: "Afghanistan",
        [LocaleCode$1.French]: "Afghanistan",
        [LocaleCode$1.Frisian]: "Afghanistan",
        [LocaleCode$1.Galician]: "Afganist\xE1n",
        [LocaleCode$1.Georgian]: "\u10D0\u10D5\u10E6\u10D0\u10DC\u10D4\u10D7\u10D8",
        [LocaleCode$1.German]: "Afghanistan",
        [LocaleCode$1.Greenlandic]: "Afghanistan",
        [LocaleCode$1.Greek]: "\u0391\u03C6\u03B3\u03B1\u03BD\u03B9\u03C3\u03C4\u03AC\u03BD",
        [LocaleCode$1.Gujarati]: "\u0A85\u0AAB\u0A97\u0ABE\u0AA8\u0ABF\u0AB8\u0ACD\u0AA4\u0ABE\u0AA8",
        [LocaleCode$1.Haitian]: "Afghanistan",
        [LocaleCode$1.Hausa]: "Afghanistan",
        [LocaleCode$1.Hebrew]: "\u05D0\u05E4\u05D2\u05E0\u05D9\u05E1\u05D8\u05DF",
        [LocaleCode$1.Hindi]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928",
        [LocaleCode$1.Hungarian]: "Afganistan",
        [LocaleCode$1.Icelandic]: "Afghanistan",
        [LocaleCode$1.Igbo]: "Afghanistan",
        [LocaleCode$1.Indonesian]: "Afghanistan",
        [LocaleCode$1.Irish]: "Afghanistan",
        [LocaleCode$1.Italian]: "Afghanistan",
        [LocaleCode$1.Japanese]: "\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3",
        [LocaleCode$1.Javanese]: "Afghanistan",
        [LocaleCode$1.Kannada]: "\u0C85\u0CAB\u0C97\u0CBE\u0CA8\u0CBF\u0CB8\u0CCD\u0CA4\u0CBE\u0CA8",
        [LocaleCode$1.Kazakh]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Khmer]: "\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17B7\u1780",
        [LocaleCode$1.Korean]: "\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4",
        [LocaleCode$1.Kurdish]: "Afghanistan",
        [LocaleCode$1.Kyrgyz]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Lao]: "\u0EAD\u0EB2\u0E9F\u0EB2\u0EA5\u0EBD\u0E99",
        [LocaleCode$1.Latin]: "Afghanistan",
        [LocaleCode$1.Latvian]: "Afghanistan",
        [LocaleCode$1.Lithuanian]: "Afganistanas",
        [LocaleCode$1.Luxembourgish]: "Afghanistan",
        [LocaleCode$1.Macedonian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Malagasy]: "Afghanistan",
        [LocaleCode$1.Malay]: "Afghanistan",
        [LocaleCode$1.Malayalam]: "\u0D05\u0D2B\u0D17\u0D3E\u0D28\u0D3F\u0D38\u0D4D\u0D24\u0D3E\u0D28",
        [LocaleCode$1.Maltese]: "Afghanistan",
        [LocaleCode$1.Maori]: "Afghanistan",
        [LocaleCode$1.Marathi]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928",
        [LocaleCode$1.Mongolian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Nepali]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928",
        [LocaleCode$1.Norwegian]: "Afghanistan",
        [LocaleCode$1.Pashto]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode$1.Persian]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode$1.Polish]: "Afganistan",
        [LocaleCode$1.Portuguese]: "Afghanistan",
        [LocaleCode$1.Punjabi]: "Afghanistan",
        [LocaleCode$1.Romanian]: "Afghanistan",
        [LocaleCode$1.Polish]: "Afganistan",
        [LocaleCode$1.Russian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Samoan]: "Afghanistan",
        [LocaleCode$1.Sanskrit]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928",
        [LocaleCode$1.Scots]: "Afghanistan",
        [LocaleCode$1.Serbian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Sesotho]: "Afghanistan",
        [LocaleCode$1.Shona]: "Afghanistan",
        [LocaleCode$1.Sindhi]: "Afghanistan",
        [LocaleCode$1.Sinhala]: "\u0D86\u0D9C\u0DCA\u200D\u0DBB\u0DDC\u0D9A\u0DCA\u0D9A\u0DD2\u0DBA\u0DCF\u0DC0",
        [LocaleCode$1.Slovak]: "Afganistan",
        [LocaleCode$1.Slovenian]: "Afganistan",
        [LocaleCode$1.Somali]: "Afghanistan",
        [LocaleCode$1.Spanish]: "Afganist\xE1n",
        [LocaleCode$1.Sudanese]: "Afghanistan",
        [LocaleCode$1.Swahili]: "Afghanistan",
        [LocaleCode$1.Swedish]: "Afghanistan",
        [LocaleCode$1.Tagalog]: "Afghanistan",
        [LocaleCode$1.Tajik]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Tatar]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Tamil]: "\u0B86\u0BAA\u0BCD\u0BAA\u0B95\u0BBE\u0BA9\u0BBF\u0BB8\u0BCD\u0BA4\u0BBE\u0BA9\u0BCD",
        [LocaleCode$1.Telugu]: "\u0C06\u0C2B\u0C4D\u0C18\u0C28\u0C3F\u0C38\u0C4D\u0C24\u0C3E\u0C28\u0C4D",
        [LocaleCode$1.Thai]: "\u0E2D\u0E31\u0E1F\u0E01\u0E32\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19",
        [LocaleCode$1.Tibetan]: "\u0F68\u0F55\u0F0B\u0F42\u0F7A\u0F0B\u0F53\u0F72\u0F66\u0F72\u0F0B\u0F4F\u0F7A\u0F53\u0F66\u0F72\u0F0D",
        [LocaleCode$1.Turkish]: "Afganistan",
        [LocaleCode$1.Ukrainian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Urdu]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode$1.Uzbek]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode$1.Vietnamese]: "Afghanistan",
        [LocaleCode$1.Welsh]: "Afghanistan",
        [LocaleCode$1.Xhosa]: "Afghanistan",
        [LocaleCode$1.Yiddish]: "Afghanistan",
        [LocaleCode$1.Yoruba]: "Afghanistan",
        [LocaleCode$1.Zulu]: "Afghanistan"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Kabul",
          total: 341e5
        }
      },
      geography: {
        area: 652230,
        region: Region$1.Asia,
        sub_region: SubRegion$1.SouthernAsia
      },
      government: {
        capital: "Kabul",
        type: "Islamic Emirate"
      }
    }
  },
  Albania: {
    i18n: {
      calling_codes: [355],
      currencies: [CurrencyCode$1.AlbaniaLek],
      languages: [LocaleCode$1.Albanian, LocaleCode$1.Greek, LocaleCode$1.Turkish],
      tz: {
        offsets: [TimezoneOffset$1.UTC_PLUS_1],
        regions: [TimezoneRegions$1.EuropeBrussels],
        timezones: [Timezones$1.CentralEuropeanTime]
      }
    },
    id: CountryCode$1.Albania,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F1}",
        emoji_unicode: "U+1F1E6 U+1F1F1",
        svg: "https://www.countryflags.io/al/flat/64.svg"
      },
      tld: [".al"]
    },
    iso: {
      alpha2: CountryCode$1.Albania,
      alpha3: "ALB",
      numeric: "008"
    },
    name: {
      alt_spellings: ["AL", "Shqip\xEBri", "Shqip\xEBria", "Shqipnia"],
      demonym: "Albanian",
      native: {
        endonym: "Shqip\xEBri"
      },
      official: "Republic of Albania",
      short: "Albania",
      translations: {
        [LocaleCode$1.Afrikaans]: "Albania",
        [LocaleCode$1.Albanian]: "Albania",
        [LocaleCode$1.Amharic]: "\u12A0\u120D\u1263\u1295\u12EB",
        [LocaleCode$1.Arabic]: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627",
        [LocaleCode$1.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576",
        [LocaleCode$1.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode$1.Bashkir]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode$1.Basque]: "Albania",
        [LocaleCode$1.Belarusian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode$1.Bengali]: "\u0986\u09B2\u09AC\u09BE\u09A8\u09BF\u09AF\u09BC\u09BE",
        [LocaleCode$1.Berber]: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627",
        [LocaleCode$1.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B",
        [LocaleCode$1.Bosnian]: "Albanija",
        [LocaleCode$1.Breton]: "Albania",
        [LocaleCode$1.Bulgarian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode$1.Burmese]: "\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A",
        [LocaleCode$1.Catalan]: "Alb\xE0nia",
        [LocaleCode$1.Chinese]: "\u963F\u5C14\u5DF4\u5C3C\u4E9A",
        [LocaleCode$1.Croatian]: "Albanija",
        [LocaleCode$1.Czech]: "Alb\xE1nie",
        [LocaleCode$1.Danish]: "Albanien",
        [LocaleCode$1.Dutch]: "Albani\xEB",
        [LocaleCode$1.English]: "Albania",
        [LocaleCode$1.Esperanto]: "Albanio",
        [LocaleCode$1.Estonian]: "Albaania",
        [LocaleCode$1.Finnish]: "Albania",
        [LocaleCode$1.French]: "Albanie",
        [LocaleCode$1.Frisian]: "Albani\xEB",
        [LocaleCode$1.Galician]: "Alb\xE2nia",
        [LocaleCode$1.Georgian]: "\u10D0\u10DA\u10D1\u10D0\u10DC\u10D8\u10D0",
        [LocaleCode$1.German]: "Albanien",
        [LocaleCode$1.Greenlandic]: "Albania",
        [LocaleCode$1.Greek]: "\u0391\u03BB\u03B2\u03B1\u03BD\u03AF\u03B1",
        [LocaleCode$1.Gujarati]: "\u0A85\u0AB2\u0AAC\u0AA8\u0ABF\u0AAF\u0ABE",
        [LocaleCode$1.Haitian]: "Albanais",
        [LocaleCode$1.Hausa]: "Albania",
        [LocaleCode$1.Hebrew]: "\u05D0\u05DC\u05D1\u05E0\u05D9\u05D4",
        [LocaleCode$1.Hindi]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E",
        [LocaleCode$1.Hungarian]: "Alb\xE1nia",
        [LocaleCode$1.Icelandic]: "Alb\xFAnir",
        [LocaleCode$1.Igbo]: "Albania",
        [LocaleCode$1.Indonesian]: "Albania",
        [LocaleCode$1.Irish]: "Alb\xE1in",
        [LocaleCode$1.Italian]: "Albania",
        [LocaleCode$1.Japanese]: "\u30A2\u30EB\u30D0\u30CB\u30A2",
        [LocaleCode$1.Javanese]: "Albania",
        [LocaleCode$1.Kannada]: "\u0C85\u0CB2\u0CCD\u0CAC\u0CBE\u0CA8\u0CBF\u0CAF\u0CBE",
        [LocaleCode$1.Kazakh]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode$1.Khmer]: "\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17C1\u179F\u17CA\u17B8",
        [LocaleCode$1.Korean]: "\uC54C\uBC14\uB2C8\uC544",
        [LocaleCode$1.Kurdish]: "\u0622\u0644\u0628\u0627\u0646\u06CC\u0627",
        [LocaleCode$1.Kyrgyz]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode$1.Lao]: "\u0EAD\u0EB2\u0EA5\u0EB2\u0E99\u0EB5",
        [LocaleCode$1.Latin]: "Albania",
        [LocaleCode$1.Latvian]: "Alb\u0101nija",
        [LocaleCode$1.Lithuanian]: "Albanija",
        [LocaleCode$1.Luxembourgish]: "Albani\xEB",
        [LocaleCode$1.Macedonian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430",
        [LocaleCode$1.Malagasy]: "Albania",
        [LocaleCode$1.Malay]: "Albania",
        [LocaleCode$1.Malayalam]: "\u0D05\u0D32\u0D4D\u0D2C\u0D3E\u0D28\u0D3F\u0D2F\u0D3E",
        [LocaleCode$1.Maltese]: "Albania",
        [LocaleCode$1.Maori]: "Albania",
        [LocaleCode$1.Marathi]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E",
        [LocaleCode$1.Mongolian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode$1.Nepali]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E",
        [LocaleCode$1.Norwegian]: "Albania",
        [LocaleCode$1.Pashto]: "\u0627\u0627\u0644\u0628\u0627\u0646\u06CC",
        [LocaleCode$1.Persian]: "\u0622\u0644\u0628\u0627\u0646\u06CC",
        [LocaleCode$1.Polish]: "Albania",
        [LocaleCode$1.Portuguese]: "Alb\xE2nia",
        [LocaleCode$1.Punjabi]: "\u0A05\u0A32\u0A2C\u0A28\u0A40\u0A06",
        [LocaleCode$1.Romanian]: "Alb\u0103n",
        [LocaleCode$1.Russian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode$1.Samoan]: "Albania",
        [LocaleCode$1.Sanskrit]: "Albani",
        [LocaleCode$1.Scots]: "Alb\xE0inia",
        [LocaleCode$1.Serbian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430",
        [LocaleCode$1.Sesotho]: "Albania",
        [LocaleCode$1.Shona]: "Albania",
        [LocaleCode$1.Sindhi]: "Albania",
        [LocaleCode$1.Sinhala]: "\u0D87\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA",
        [LocaleCode$1.Slovak]: "Alb\xE1nsko",
        [LocaleCode$1.Slovenian]: "Albanija",
        [LocaleCode$1.Somali]: "Albania",
        [LocaleCode$1.Spanish]: "Albania",
        [LocaleCode$1.Sudanese]: "Albania",
        [LocaleCode$1.Swahili]: "Albania",
        [LocaleCode$1.Swedish]: "Albanien",
        [LocaleCode$1.Tagalog]: "Albania",
        [LocaleCode$1.Tajik]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode$1.Tamil]: "\u0B85\u0BB2\u0BCD\u0BAA\u0BBE\u0BA9\u0BBF\u0BAF\u0BBE",
        [LocaleCode$1.Tatar]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode$1.Telugu]: "\u0C05\u0C32\u0C4D\u0C2C\u0C3E\u0C28\u0C3F\u0C2F\u0C3E",
        [LocaleCode$1.Thai]: "\u0E2D\u0E31\u0E25\u0E41\u0E1A\u0E19\u0E34\u0E19\u0E35",
        [LocaleCode$1.Tibetan]: "\u0F68\u0F63\u0F0B\u0F56\u0F72\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F72",
        [LocaleCode$1.Turkish]: "Albaniye",
        [LocaleCode$1.Ukrainian]: "\u0410\u043B\u0431\u0430\u043D\u0456\u044F",
        [LocaleCode$1.Urdu]: "\u0622\u0644\u0628\u0627\u0646\u06CC",
        [LocaleCode$1.Uzbek]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode$1.Vietnamese]: "Albanie",
        [LocaleCode$1.Welsh]: "Albania",
        [LocaleCode$1.Xhosa]: "Albania",
        [LocaleCode$1.Yiddish]: "\u05D0\u05DC\u05D1\u05E0\u05D9\u05E9",
        [LocaleCode$1.Yoruba]: "Albania",
        [LocaleCode$1.Zulu]: "Albania"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Tirana",
          total: 2853e3
        }
      },
      geography: {
        area: 28748,
        region: Region$1.Europe,
        sub_region: SubRegion$1.SouthernEurope
      },
      government: {
        capital: "Tirana",
        type: "Republic"
      }
    }
  },
  Algeria: {
    i18n: {
      calling_codes: [213],
      currencies: [CurrencyCode$1.AlgeriaDinar],
      languages: [
        LocaleCode$1.Arabic,
        LocaleCode$1.French,
        LocaleCode$1.Berber,
        LocaleCode$1.Tamazight
      ],
      tz: {
        offsets: [TimezoneOffset$1.UTC_PLUS_1, TimezoneOffset$1.UTC_PLUS_2],
        regions: [TimezoneRegions$1.AfricaAlgiers],
        timezones: [Timezones$1.CentralEuropeanTime]
      }
    },
    id: CountryCode$1.Algeria,
    info: {
      flag: {
        emoji: "\u{1F1E9}\u{1F1FF}",
        emoji_unicode: "U+1F1E9 U+1F1FF",
        svg: "https://www.countryflags.io/dz/flat/64.svg"
      },
      tld: [".dz", ".\u062C\u0632\u0627\u0626\u0631"]
    },
    iso: {
      alpha2: CountryCode$1.Algeria,
      alpha3: "DZA",
      numeric: "012"
    },
    name: {
      alt_spellings: ["DZ", "Dzayer", "Alg\xE9rie"],
      demonym: "Algerian",
      native: {
        endonym: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631"
      },
      official: "People's Democratic Republic of Algeria",
      short: "Algeria",
      translations: {
        [LocaleCode$1.Afrikaans]: "Algerije",
        [LocaleCode$1.Albanian]: "Algeria",
        [LocaleCode$1.Amharic]: "\u12A0\u120D\u1300\u122D\u1235",
        [LocaleCode$1.Arabic]: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631",
        [LocaleCode$1.Armenian]: "\u0531\u056C\u0563\u0578\u0580\u056B\u0561",
        [LocaleCode$1.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode$1.Bashkir]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Basque]: "Algeria",
        [LocaleCode$1.Belarusian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Bengali]: "\u0986\u09B2\u099C\u09C7\u09B0",
        [LocaleCode$1.Berber]: "\u062C\u0632\u0627\u0626\u0631",
        [LocaleCode$1.Bhutani]: "\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41",
        [LocaleCode$1.Bosnian]: "Al\u017Eir",
        [LocaleCode$1.Breton]: "Algeria",
        [LocaleCode$1.Bulgarian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Burmese]: "\u1021\u102C\u101B\u1015\u103A",
        [LocaleCode$1.Catalan]: "Alg\xE8ria",
        [LocaleCode$1.Chinese]: "\u963F\u5C14\u53CA\u5229\u4E9A",
        [LocaleCode$1.Croatian]: "Al\u017Eir",
        [LocaleCode$1.Czech]: "Al\u017E\xEDrsko",
        [LocaleCode$1.Danish]: "Algeriet",
        [LocaleCode$1.Dutch]: "Algerije",
        [LocaleCode$1.English]: "Algeria",
        [LocaleCode$1.Esperanto]: "Al\u011Derio",
        [LocaleCode$1.Estonian]: "Al\u017Eira",
        [LocaleCode$1.Finnish]: "Algeria",
        [LocaleCode$1.French]: "Alg\xE9rie",
        [LocaleCode$1.Frisian]: "Algeri\xEB",
        [LocaleCode$1.Galician]: "Alxeria",
        [LocaleCode$1.Georgian]: "\u10D0\u10DA\u10D2\u10D8\u10E3\u10E0\u10D8",
        [LocaleCode$1.German]: "Algerien",
        [LocaleCode$1.Greenlandic]: "Algeria",
        [LocaleCode$1.Greek]: "\u0391\u03BB\u03B3\u03B5\u03C1\u03AF\u03B1",
        [LocaleCode$1.Gujarati]: "\u0A86\u0AB2\u0AC7\u0A97\u0AB0\u0ABF\u0AAF\u0ABE",
        [LocaleCode$1.Haitian]: "Alg\xE9rie",
        [LocaleCode$1.Hausa]: "Algeria",
        [LocaleCode$1.Hebrew]: "\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4",
        [LocaleCode$1.Hindi]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E",
        [LocaleCode$1.Hungarian]: "Alg\xE1r",
        [LocaleCode$1.Icelandic]: "Alg\xFAra",
        [LocaleCode$1.Igbo]: "Algeria",
        [LocaleCode$1.Indonesian]: "Aljir",
        [LocaleCode$1.Irish]: "Alg\xE9rie",
        [LocaleCode$1.Italian]: "Algeria",
        [LocaleCode$1.Japanese]: "\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2",
        [LocaleCode$1.Javanese]: "Aljir",
        [LocaleCode$1.Kannada]: "\u0C86\u0CB2\u0CCD\u0C97\u0CC7\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD",
        [LocaleCode$1.Kazakh]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Khmer]: "\u17A2\u17B6\u179B\u17CB\u1794\u17B6\u1793\u17B8",
        [LocaleCode$1.Korean]: "\uC54C\uC81C\uB9AC",
        [LocaleCode$1.Kurdish]: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u062C\u0632\u0627\u06CC\u0631",
        [LocaleCode$1.Kyrgyz]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Lao]: "\u0EAD\u0EB2\u0EA5\u0EB2\u0E88\u0EB5\u0E99",
        [LocaleCode$1.Latin]: "Algeria",
        [LocaleCode$1.Latvian]: "Al\u017E\u012Brija",
        [LocaleCode$1.Lithuanian]: "Al\u017Eyras",
        [LocaleCode$1.Luxembourgish]: "Algeria",
        [LocaleCode$1.Macedonian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Malagasy]: "Alg\xE9rie",
        [LocaleCode$1.Malay]: "Aljir",
        [LocaleCode$1.Malayalam]: "\u0D06\u0D32\u0D02\u0D17\u0D47\u0D30\u0D3F\u0D2F\u0D7B",
        [LocaleCode$1.Maltese]: "Alg\xE9rie",
        [LocaleCode$1.Maori]: "Algeria",
        [LocaleCode$1.Marathi]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E",
        [LocaleCode$1.Mongolian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Nepali]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E",
        [LocaleCode$1.Norwegian]: "Algeria",
        [LocaleCode$1.Pashto]: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631",
        [LocaleCode$1.Persian]: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0639\u0631\u0628",
        [LocaleCode$1.Polish]: "Algieria",
        [LocaleCode$1.Portuguese]: "Alg\xE9ria",
        [LocaleCode$1.Punjabi]: "\u0A06\u0A32\u0A47\u0A17\u0A40\u0A06",
        [LocaleCode$1.Romanian]: "Algeria",
        [LocaleCode$1.Russian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Samoan]: "Algeria",
        [LocaleCode$1.Sanskrit]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E",
        [LocaleCode$1.Scots]: "Algeria",
        [LocaleCode$1.Serbian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Sesotho]: "Algeria",
        [LocaleCode$1.Shona]: "Algeria",
        [LocaleCode$1.Sindhi]: "Algeria",
        [LocaleCode$1.Sinhala]: "\u0D86\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA",
        [LocaleCode$1.Slovak]: "Al\u017E\xEDrsko",
        [LocaleCode$1.Slovenian]: "Al\u017Eir",
        [LocaleCode$1.Somali]: "Algeria",
        [LocaleCode$1.Spanish]: "Algeria",
        [LocaleCode$1.Sudanese]: "Aljir",
        [LocaleCode$1.Swahili]: "Aljir",
        [LocaleCode$1.Swedish]: "Algeriet",
        [LocaleCode$1.Tagalog]: "Algeria",
        [LocaleCode$1.Tajik]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Tamil]: "\u0B86\u0BB2\u0BCD\u0B95\u0BC7\u0BB0\u0BBF\u0BAF\u0BBE",
        [LocaleCode$1.Tatar]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Telugu]: "\u0C06\u0C32\u0C4D\u0C17\u0C47\u0C30\u0C3F\u0C2F\u0C3E",
        [LocaleCode$1.Thai]: "\u0E2D\u0E32\u0E23\u0E32\u0E01\u0E2D\u0E19",
        [LocaleCode$1.Tibetan]: "\u0F68\u0F63\u0F9F\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F61\u0F72",
        [LocaleCode$1.Turkish]: "Cezayir",
        [LocaleCode$1.Ukrainian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Urdu]: "\u0622\u0644\u062C\u06CC\u0631",
        [LocaleCode$1.Uzbek]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode$1.Vietnamese]: "\u1EA2\u0301\u1EA1\u1EA3\u1EAD\u1EB5",
        [LocaleCode$1.Welsh]: "Algeria",
        [LocaleCode$1.Xhosa]: "Algeria",
        [LocaleCode$1.Yiddish]: "\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4",
        [LocaleCode$1.Yoruba]: "Algeria",
        [LocaleCode$1.Zulu]: "Algeria"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Oran",
          total: 371e5
        }
      },
      geography: {
        area: 2381740,
        region: Region$1.Africa,
        sub_region: SubRegion$1.NorthernAfrica
      },
      government: {
        capital: "Algiers",
        type: "Republic"
      }
    }
  },
  AmericanSamoa: {
    i18n: {
      calling_codes: [1684],
      currencies: [CurrencyCode$1.AmericanSamoaTala],
      languages: [LocaleCode$1.English, LocaleCode$1.Samoan],
      tz: {
        offsets: [TimezoneOffset$1.UTC_MINUS_11],
        regions: [TimezoneRegions$1.PacificSamoa],
        timezones: [Timezones$1.SamoaStandardTime]
      }
    },
    id: CountryCode$1.AmericanSamoa,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F8}",
        emoji_unicode: "U+1F1E6 U+1F1F8",
        svg: "https://www.countryflags.io/as/flat/64.svg"
      },
      tld: [".as"]
    },
    iso: {
      alpha2: CountryCode$1.AmericanSamoa,
      alpha3: "ASM",
      numeric: "016"
    },
    name: {
      alt_spellings: ["AS", "Amerika S\u0101moa", "Amelika S\u0101moa", "S\u0101moa Amelika"],
      demonym: "American Samoan",
      native: {
        endonym: "American Samoa"
      },
      official: "American Samoa",
      short: "American Samoa",
      translations: {
        [LocaleCode$1.Afrikaans]: "Amerikaans Samoa",
        [LocaleCode$1.Albanian]: "Samoa Amerikane",
        [LocaleCode$1.Amharic]: "\u1233\u121E\u12A0\u122D",
        [LocaleCode$1.Arabic]: "\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629",
        [LocaleCode$1.Armenian]: "\u054D\u0561\u0570\u0561\u0574\u0561\u056C\u056B\u0561",
        [LocaleCode$1.Azerbaijani]: "Samoa Amerikana",
        [LocaleCode$1.Bashkir]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Basque]: "Samoa Amerikana",
        [LocaleCode$1.Belarusian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Bengali]: "\u0986\u09AE\u09C7\u09B0\u09BF\u0995\u09BE\u09A8 \u09B8\u09BE\u09AE\u09CB\u09AF\u09BC\u09BE",
        [LocaleCode$1.Berber]: "\u062C\u0632\u0631 \u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629",
        [LocaleCode$1.Bhutani]: "\u0F68\u0F62\u0F92\u0FB1\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F58\u0F44\u0F66\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F66\u0F90\u0F56\u0F66\u0F0B\u0F62\u0F92\u0FB1\u0F74\u0F51\u0F0B\u0F46\u0F7A\u0F53\u0F0B\u0F54\u0F7C\u0F0D",
        [LocaleCode$1.Bosnian]: "Ameri\u010Dka Samoa",
        [LocaleCode$1.Breton]: "Samoa Amerikan",
        [LocaleCode$1.Bulgarian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Burmese]: "\u1021\u1019\u1039\u1038\u1019\u101B\u102D\u102F\u1018\u102C\u101E\u102C",
        [LocaleCode$1.Catalan]: "Samoa Americana",
        [LocaleCode$1.Chinese]: "\u7F8E\u5C5E\u8428\u6469\u4E9A",
        [LocaleCode$1.Croatian]: "Ameri\u010Dka Samoa",
        [LocaleCode$1.Czech]: "Americk\xE1 Samoa",
        [LocaleCode$1.Danish]: "Amerikansk Samoa",
        [LocaleCode$1.Dutch]: "Amerikaans Samoa",
        [LocaleCode$1.English]: "American Samoa",
        [LocaleCode$1.Esperanto]: "Samoa Amerika",
        [LocaleCode$1.Estonian]: "Ameerika Samoa",
        [LocaleCode$1.Finnish]: "Amerikka Samoa",
        [LocaleCode$1.French]: "American Samoa",
        [LocaleCode$1.Frisian]: "Amerikaans Samoa",
        [LocaleCode$1.Galician]: "Samoa Americana",
        [LocaleCode$1.Georgian]: "\u10D0\u10DB\u10D4\u10E0\u10D8\u10D9\u10D8\u10E1 \u10E1\u10D0\u10DB\u10DD\u10D0",
        [LocaleCode$1.German]: "Amerikanisch-Samoa",
        [LocaleCode$1.Greenlandic]: "Amerikaans Samoa",
        [LocaleCode$1.Greek]: "\u0391\u03BC\u03B5\u03C1\u03B9\u03BA\u03B1\u03BD\u03B9\u03BA\u03AE \u03A3\u03B1\u03BC\u03CC\u03B1",
        [LocaleCode$1.Gujarati]: "\u0A86\u0AAE\u0AC7\u0AB0\u0ABF\u0A95\u0AA8 \u0AB8\u0ABE\u0AAE\u0ACB\u0AAF\u0ABE",
        [LocaleCode$1.Haitian]: "Amerikaans Samoa",
        [LocaleCode$1.Hausa]: "Amerikaans Samoa",
        [LocaleCode$1.Hebrew]: "\u05D0\u05DE\u05E8\u05D9\u05E7\u05E0\u05D9\u05D4 \u05E1\u05DE\u05D5\u05D0\u05D4",
        [LocaleCode$1.Hindi]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906",
        [LocaleCode$1.Hungarian]: "Amerikai Szamoa",
        [LocaleCode$1.Icelandic]: "Amerikai Szamoa",
        [LocaleCode$1.Igbo]: "Ikina Amerika",
        [LocaleCode$1.Indonesian]: "Samoa Amerika",
        [LocaleCode$1.Irish]: "Samoa Amerikana",
        [LocaleCode$1.Italian]: "Samoa Americane",
        [LocaleCode$1.Japanese]: "\u30A2\u30E1\u30EA\u30AB\u9818\u30B5\u30E2\u30A2",
        [LocaleCode$1.Javanese]: "Samoa Amerika",
        [LocaleCode$1.Kannada]: "\u0C85\u0CAE\u0CC7\u0CB0\u0CBF\u0C95\u0CA8\u0CCD \u0CB8\u0CAE\u0CCB\u0C86",
        [LocaleCode$1.Kazakh]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Khmer]: "\u17A2\u17B6\u1798\u17C9\u17B6\u179A\u17B8\u179F\u17D2\u178F\u1784\u17CB",
        [LocaleCode$1.Korean]: "\uC544\uBA54\uB9AC\uCE74 \uC0AC\uBAA8\uC544",
        [LocaleCode$1.Kurdish]: "Amerikaans Samoa",
        [LocaleCode$1.Kyrgyz]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Lao]: "\u0EAD\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94",
        [LocaleCode$1.Latin]: "Samoa Amerikana",
        [LocaleCode$1.Latvian]: "Amerikas Samoa",
        [LocaleCode$1.Lithuanian]: "Amerikos Samoa",
        [LocaleCode$1.Luxembourgish]: "Amerikaans Samoa",
        [LocaleCode$1.Macedonian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Malagasy]: "Samoa Amerika",
        [LocaleCode$1.Malay]: "Amerika Samo",
        [LocaleCode$1.Malayalam]: "\u0D05\u0D2E\u0D47\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D28\u0D4D\u0D31\u0D4D \u0D38\u0D2E\u0D4B\u0D06",
        [LocaleCode$1.Maltese]: "Samoa Amerika",
        [LocaleCode$1.Maori]: "Samoa Amerika",
        [LocaleCode$1.Marathi]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906",
        [LocaleCode$1.Mongolian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Nepali]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906",
        [LocaleCode$1.Norwegian]: "Amerikansk Samoa",
        [LocaleCode$1.Pashto]: "\u0627\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627",
        [LocaleCode$1.Persian]: "\u0622\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627",
        [LocaleCode$1.Polish]: "Samoa Ameryka\u0144skie",
        [LocaleCode$1.Portuguese]: "Samoa Americana",
        [LocaleCode$1.Punjabi]: "\u0A05\u0A2E\u0A30\u0A40\u0A15\u0A40 \u0A38\u0A3E\u0A2E\u0A4B\u0A06",
        [LocaleCode$1.Romanian]: "Samoa americane",
        [LocaleCode$1.Russian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Samoan]: "Samoa Amerika",
        [LocaleCode$1.Sanskrit]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906",
        [LocaleCode$1.Scots]: "Amerikaans Samoa",
        [LocaleCode$1.Serbian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Sesotho]: "Amerikaans Samoa",
        [LocaleCode$1.Shona]: "Amerikaans Samoa",
        [LocaleCode$1.Sindhi]: "Amerikaans Samoa",
        [LocaleCode$1.Sinhala]: "\u0D86\u0DBB\u0DCA\u0DA2\u0DD2\u0DB1\u0DCF\u0DB1\u0DD4 \u0DC3\u0DD0\u0DB8\u0DD0\u0DBD\u0DCA\u0DC0",
        [LocaleCode$1.Slovak]: "Amerikaans Samoa",
        [LocaleCode$1.Slovenian]: "Amerikaans Samoa",
        [LocaleCode$1.Somali]: "Amerikaans Samoa",
        [LocaleCode$1.Spanish]: "Samoa Americana",
        [LocaleCode$1.Sudanese]: "Amerikaans Samoa",
        [LocaleCode$1.Swahili]: "Amerikaans Samoa",
        [LocaleCode$1.Swedish]: "Amerikansk Samoa",
        [LocaleCode$1.Tagalog]: "Amerikaans Samoa",
        [LocaleCode$1.Tajik]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Tamil]: "\u0B85\u0BAE\u0BC6\u0BB0\u0BBF\u0B95\u0BCD \u0B9A\u0BAE\u0BCB\u0BB5\u0BBE",
        [LocaleCode$1.Tatar]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Telugu]: "\u0C05\u0C2E\u0C46\u0C30\u0C3F\u0C15\u0C4D \u0C38\u0C2E\u0C4B\u0C35\u0C3E",
        [LocaleCode$1.Thai]: "\u0E2A\u0E2B\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E41\u0E2D\u0E1F\u0E23\u0E34\u0E01\u0E32",
        [LocaleCode$1.Tibetan]: "\u0F68\u0F7A\u0F0B\u0F62\u0F72\u0F0B\u0F40\u0F0B\u0F68\u0F7A\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F74\u0F0B\u0F61\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F40",
        [LocaleCode$1.Turkish]: "Amerikan Samoas\u0131",
        [LocaleCode$1.Ukrainian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Urdu]: "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0627",
        [LocaleCode$1.Uzbek]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430",
        [LocaleCode$1.Vietnamese]: "Amerikaans Samoa",
        [LocaleCode$1.Welsh]: "Amerikaans Samoa",
        [LocaleCode$1.Xhosa]: "Amerikaans Samoa",
        [LocaleCode$1.Yiddish]: "Amerikaans Samoa",
        [LocaleCode$1.Yoruba]: "Amerikaans Samoa",
        [LocaleCode$1.Zulu]: "Amerikaans Samoa"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Pago Pago",
          total: 558e3
        }
      },
      geography: {
        area: 199,
        region: Region$1.Oceania,
        sub_region: SubRegion$1.Polynesia
      },
      government: {
        capital: "Pago Pago",
        type: "Nonmetropolitan Territory of the US"
      }
    }
  },
  Andorra: {
    i18n: {
      calling_codes: [376],
      currencies: [CurrencyCode$1.Euro],
      languages: [LocaleCode$1.Catalan, LocaleCode$1.Spanish],
      tz: {
        offsets: [TimezoneOffset$1.UTC_PLUS_1, TimezoneOffset$1.UTC_PLUS_2],
        regions: [TimezoneRegions$1.EuropeAndorra],
        timezones: [Timezones$1.CentralEuropeanTime]
      }
    },
    id: CountryCode$1.Andorra,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F4}",
        emoji_unicode: "U+1F1E6 U+1F1F4",
        svg: "https://www.countryflags.io/ad/flat/64.svg"
      },
      tld: [".ad"]
    },
    iso: {
      alpha2: CountryCode$1.Andorra,
      alpha3: "AND",
      numeric: "020"
    },
    name: {
      alt_spellings: ["AD", "Principality of Andorra", "Principat d'Andorra"],
      demonym: "Andorran",
      native: {
        endonym: "Andorra"
      },
      official: "Principality of Andorra",
      short: "Andorra",
      translations: {
        [LocaleCode$1.Afrikaans]: "Andorra",
        [LocaleCode$1.Albanian]: "Andorra",
        [LocaleCode$1.Amharic]: "\u12A0\u1295\u12F6\u122B",
        [LocaleCode$1.Arabic]: "\u0623\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode$1.Armenian]: "\u0540\u0561\u0576\u0564\u0561\u0580\u0561\u057E\u0561\u0575\u0584",
        [LocaleCode$1.Azerbaijani]: "Andorra",
        [LocaleCode$1.Bashkir]: "\u0410\u043D\u0434\u043E\u0440\u0430",
        [LocaleCode$1.Basque]: "Andorra",
        [LocaleCode$1.Belarusian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode$1.Bengali]: "\u0985\u09A8\u09CD\u09A1\u09CB\u09B0\u09BE",
        [LocaleCode$1.Berber]: "\u0623\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode$1.Bhutani]: "\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B",
        [LocaleCode$1.Bosnian]: "Andora",
        [LocaleCode$1.Breton]: "Andorra",
        [LocaleCode$1.Bulgarian]: "\u0410\u043D\u0434\u043E\u0440\u0430",
        [LocaleCode$1.Burmese]: "\u1021\u1014\u1039\u1010\u102C\u101B\u102D\u102F\u1038",
        [LocaleCode$1.Catalan]: "Andorra",
        [LocaleCode$1.Chinese]: "\u5B89\u9053\u5C14",
        [LocaleCode$1.Croatian]: "Andora",
        [LocaleCode$1.Czech]: "Andorra",
        [LocaleCode$1.Danish]: "Andorra",
        [LocaleCode$1.Dutch]: "Andorra",
        [LocaleCode$1.English]: "Andorra",
        [LocaleCode$1.Esperanto]: "Andora",
        [LocaleCode$1.Estonian]: "Andorra",
        [LocaleCode$1.Finnish]: "Andorra",
        [LocaleCode$1.French]: "Andorra",
        [LocaleCode$1.Frisian]: "Andorra",
        [LocaleCode$1.Galician]: "Andorra",
        [LocaleCode$1.Georgian]: "\u12A0\u1295\u12F6\u122B",
        [LocaleCode$1.German]: "Andorra",
        [LocaleCode$1.Greek]: "\u0391\u03BD\u03B4\u03CC\u03C1\u03B1",
        [LocaleCode$1.Hebrew]: "\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4",
        [LocaleCode$1.Hindi]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode$1.Hungarian]: "Andorra",
        [LocaleCode$1.Icelandic]: "Andorra",
        [LocaleCode$1.Igbo]: "Andorra",
        [LocaleCode$1.Indonesian]: "Andorra",
        [LocaleCode$1.Irish]: "Andorra",
        [LocaleCode$1.Italian]: "Andorra",
        [LocaleCode$1.Japanese]: "\u30A2\u30F3\u30C9\u30E9",
        [LocaleCode$1.Javanese]: "Andorra",
        [LocaleCode$1.Kannada]: "\u0C85\u0C82\u0CA1\u0CCB\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD",
        [LocaleCode$1.Kazakh]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode$1.Khmer]: "\u17A2\u1784\u17CB\u178A\u17B6\u179A\u17B6",
        [LocaleCode$1.Korean]: "\uC548\uB3C4\uB77C",
        [LocaleCode$1.Kurdish]: "Andorra",
        [LocaleCode$1.Kyrgyz]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode$1.Lao]: "\u0EAD\u0EB1\u0E99\u0EC2\u0E94\u0EA3\u0EB2",
        [LocaleCode$1.Latin]: "Andorra",
        [LocaleCode$1.Latvian]: "Andora",
        [LocaleCode$1.Lithuanian]: "Andora",
        [LocaleCode$1.Luxembourgish]: "Andorra",
        [LocaleCode$1.Macedonian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode$1.Malagasy]: "Andorra",
        [LocaleCode$1.Malay]: "Andorra",
        [LocaleCode$1.Malayalam]: "\u0D05\u0D02\u0D21\u0D4B\u0D30\u0D3F\u0D2F\u0D28\u0D4D",
        [LocaleCode$1.Maltese]: "Andorra",
        [LocaleCode$1.Maori]: "Andorra",
        [LocaleCode$1.Marathi]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode$1.Mongolian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode$1.Nepali]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode$1.Norwegian]: "Andorra",
        [LocaleCode$1.Pashto]: "\u0622\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode$1.Persian]: "\u0622\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode$1.Polish]: "Andora",
        [LocaleCode$1.Portuguese]: "Andorra",
        [LocaleCode$1.Punjabi]: "\u0A05\u0A70\u0A21\u0A4B\u0A30\u0A3E",
        [LocaleCode$1.Romanian]: "Andorra",
        [LocaleCode$1.Russian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode$1.Samoan]: "Andorra",
        [LocaleCode$1.Sanskrit]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode$1.Scots]: "Andorra",
        [LocaleCode$1.Serbian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode$1.Sesotho]: "Andorra",
        [LocaleCode$1.Shona]: "Andorra",
        [LocaleCode$1.Sindhi]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode$1.Sinhala]: "\u0D86\u0DB1\u0DCA\u0DAF\u0DDA",
        [LocaleCode$1.Slovak]: "Andorra",
        [LocaleCode$1.Slovenian]: "Andora",
        [LocaleCode$1.Somali]: "Andorra",
        [LocaleCode$1.Spanish]: "Andorra",
        [LocaleCode$1.Sudanese]: "Andorra",
        [LocaleCode$1.Swahili]: "Andorra",
        [LocaleCode$1.Swedish]: "Andorra",
        [LocaleCode$1.Tagalog]: "Andorra",
        [LocaleCode$1.Tajik]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode$1.Tamil]: "\u0B85\u0BA9\u0BCB\u0BB0\u0BCD\u0B9F\u0BBE",
        [LocaleCode$1.Tatar]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode$1.Telugu]: "\u0C05\u0C02\u0C21\u0C4B\u0C30\u0C4D\u0C30\u0C3E",
        [LocaleCode$1.Thai]: "\u0E2D\u0E31\u0E19\u0E14\u0E2D\u0E23\u0E4C\u0E23\u0E32",
        [LocaleCode$1.Tibetan]: "\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B",
        [LocaleCode$1.Turkish]: "Andora",
        [LocaleCode$1.Ukrainian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode$1.Urdu]: "\u0622\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode$1.Uzbek]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode$1.Vietnamese]: "Andorra",
        [LocaleCode$1.Welsh]: "Andorra",
        [LocaleCode$1.Xhosa]: "Andorra",
        [LocaleCode$1.Yiddish]: "\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4",
        [LocaleCode$1.Yoruba]: "Andorra",
        [LocaleCode$1.Zulu]: "Andorra"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Andorra la Vella",
          total: 78e3
        }
      },
      geography: {
        area: 468,
        region: Region$1.Europe,
        sub_region: SubRegion$1.SouthernEurope
      },
      government: {
        capital: "Andorra la Vella",
        type: "Constitutional Monarchy"
      }
    }
  },
  Angola: {
    i18n: {
      calling_codes: [244],
      currencies: [CurrencyCode$1.AngolaKwanza],
      languages: [
        LocaleCode$1.Portuguese,
        LocaleCode$1.Spanish,
        LocaleCode$1.French,
        LocaleCode$1.Italian,
        LocaleCode$1.German,
        LocaleCode$1.English
      ],
      tz: {
        offsets: [
          TimezoneOffset$1.UTC_0,
          TimezoneOffset$1.UTC_PLUS_1,
          TimezoneOffset$1.UTC_PLUS_2
        ],
        regions: [TimezoneRegions$1.AfricaLuanda],
        timezones: [Timezones$1.WestAfricaTime]
      }
    },
    id: CountryCode$1.Angola,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1EC}",
        emoji_unicode: "U+1F1E6 U+1F1EC",
        svg: "https://www.countryflags.io/ao/flat/64.svg"
      },
      tld: [".ao"]
    },
    iso: {
      alpha2: CountryCode$1.Angola,
      alpha3: "AGO",
      numeric: "024"
    },
    name: {
      alt_spellings: ["AO", "Rep\xFAblica de Angola", "\u0281\u025Bpublika de an"],
      demonym: "Angolan",
      native: {
        endonym: "Angola"
      },
      official: "Republic of Angola",
      short: "Angola",
      translations: {
        [LocaleCode$1.Afrikaans]: "Angola",
        [LocaleCode$1.Albanian]: "Ang\xF2la",
        [LocaleCode$1.Amharic]: "\u12A0\u1295\u130E\u120A\u12EB",
        [LocaleCode$1.Arabic]: "\u0623\u0646\u063A\u0648\u0644\u0627",
        [LocaleCode$1.Armenian]: "\u0540\u0561\u0576\u0563\u0561\u056C\u0561\u056F\u0561",
        [LocaleCode$1.Azerbaijani]: "Ang\u0259l",
        [LocaleCode$1.Bashkir]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode$1.Basque]: "Angola",
        [LocaleCode$1.Belarusian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode$1.Bengali]: "\u0985\u0999\u09CD\u0997\u09B2\u09BE",
        [LocaleCode$1.Berber]: "Angola",
        [LocaleCode$1.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42",
        [LocaleCode$1.Bosnian]: "Angola",
        [LocaleCode$1.Breton]: "Angola",
        [LocaleCode$1.Bulgarian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode$1.Burmese]: "\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A",
        [LocaleCode$1.Catalan]: "Angola",
        [LocaleCode$1.Chinese]: "\u5B89\u54E5\u62C9",
        [LocaleCode$1.Croatian]: "Angola",
        [LocaleCode$1.Czech]: "Angola",
        [LocaleCode$1.Danish]: "Angola",
        [LocaleCode$1.Dutch]: "Angola",
        [LocaleCode$1.English]: "Angola",
        [LocaleCode$1.Esperanto]: "Angolo",
        [LocaleCode$1.Estonian]: "Angola",
        [LocaleCode$1.Finnish]: "Angola",
        [LocaleCode$1.French]: "Angola",
        [LocaleCode$1.Frisian]: "Angola",
        [LocaleCode$1.Galician]: "Angola",
        [LocaleCode$1.Georgian]: "\u10D0\u10DC\u10D2\u10DD\u10DA\u10D0",
        [LocaleCode$1.German]: "Angola",
        [LocaleCode$1.Greenlandic]: "Angola",
        [LocaleCode$1.Greek]: "\u0391\u03B3\u03BA\u03CC\u03BB\u03B1",
        [LocaleCode$1.Gujarati]: "\u0A85\u0A82\u0A97\u0ACB\u0AB2\u0ABE",
        [LocaleCode$1.Haitian]: "Angola",
        [LocaleCode$1.Hausa]: "Angola",
        [LocaleCode$1.Hebrew]: "\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4",
        [LocaleCode$1.Hindi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode$1.Hungarian]: "Angola",
        [LocaleCode$1.Icelandic]: "Angola",
        [LocaleCode$1.Igbo]: "Angola",
        [LocaleCode$1.Indonesian]: "Angola",
        [LocaleCode$1.Irish]: "Angola",
        [LocaleCode$1.Italian]: "Angola",
        [LocaleCode$1.Japanese]: "\u30A2\u30F3\u30B4\u30E9",
        [LocaleCode$1.Javanese]: "Anggol",
        [LocaleCode$1.Kannada]: "\u0C85\u0C82\u0C97\u0CCB\u0CB2\u0CBE",
        [LocaleCode$1.Kazakh]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode$1.Khmer]: "\u17A2\u1784\u17CB\u1780\u17B6\u179B\u17A2\u1784\u17CB\u1782\u17D2\u179B\u17C1\u179F",
        [LocaleCode$1.Korean]: "\uC559\uACE8\uB77C",
        [LocaleCode$1.Kurdish]: "Angola",
        [LocaleCode$1.Kyrgyz]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode$1.Lao]: "\u0EAD\u0EB0\u0E99\u0EB2\u0E94\u0EB2",
        [LocaleCode$1.Latin]: "Angola",
        [LocaleCode$1.Latvian]: "Angola",
        [LocaleCode$1.Lithuanian]: "Angola",
        [LocaleCode$1.Luxembourgish]: "Angola",
        [LocaleCode$1.Macedonian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode$1.Malagasy]: "Angola",
        [LocaleCode$1.Malay]: "Angola",
        [LocaleCode$1.Malayalam]: "\u0D05\u0D02\u0D17\u0D4B\u0D33\u0D3E",
        [LocaleCode$1.Maltese]: "Angola",
        [LocaleCode$1.Maori]: "Angola",
        [LocaleCode$1.Marathi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode$1.Mongolian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode$1.Nepali]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode$1.Norwegian]: "Angola",
        [LocaleCode$1.Pashto]: "\u0627\u0646\u06AB\u0648\u0644\u0627",
        [LocaleCode$1.Persian]: "\u0622\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode$1.Polish]: "Angola",
        [LocaleCode$1.Portuguese]: "Angola",
        [LocaleCode$1.Punjabi]: "\u0A05\u0A19\u0A4D\u0A17\u0A4B\u0A32\u0A3E",
        [LocaleCode$1.Romanian]: "Angole",
        [LocaleCode$1.Russian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode$1.Samoan]: "Angola",
        [LocaleCode$1.Sanskrit]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode$1.Scots]: "Angola",
        [LocaleCode$1.Serbian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode$1.Sesotho]: "Angola",
        [LocaleCode$1.Shona]: "Angola",
        [LocaleCode$1.Sindhi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode$1.Sinhala]: "\u0D86\u0D9C\u0DBD\u0DD2\u0DBA\u0DCF\u0DC0",
        [LocaleCode$1.Slovak]: "Angola",
        [LocaleCode$1.Slovenian]: "Angola",
        [LocaleCode$1.Somali]: "Angola",
        [LocaleCode$1.Spanish]: "Angola",
        [LocaleCode$1.Sudanese]: "Angola",
        [LocaleCode$1.Swahili]: "Angola",
        [LocaleCode$1.Swedish]: "Angola",
        [LocaleCode$1.Tagalog]: "Angola",
        [LocaleCode$1.Tajik]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode$1.Tamil]: "\u0B85\u0B99\u0BCD\u0B95\u0BCB\u0BB2\u0BBE",
        [LocaleCode$1.Tatar]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode$1.Telugu]: "\u0C05\u0C02\u0C17\u0C4B\u0C32\u0C3E",
        [LocaleCode$1.Thai]: "\u0E2D\u0E07\u0E04\u0E4C\u0E01\u0E32\u0E23\u0E2D\u0E32\u0E19\u0E32\u0E21\u0E34\u0E2A\u0E16\u0E32\u0E19",
        [LocaleCode$1.Tibetan]: "\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B",
        [LocaleCode$1.Turkish]: "Angola",
        [LocaleCode$1.Ukrainian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode$1.Urdu]: "\u0627\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode$1.Uzbek]: "Angola",
        [LocaleCode$1.Vietnamese]: "Angola",
        [LocaleCode$1.Xhosa]: "Angola",
        [LocaleCode$1.Welsh]: "Angola",
        [LocaleCode$1.Yiddish]: "\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4",
        [LocaleCode$1.Yoruba]: "Angola",
        [LocaleCode$1.Zulu]: "Angola"
      }
    }
  },
  Anguilla: {
    i18n: {
      calling_codes: [1264],
      currencies: [
        CurrencyCode$1.DominicaDollar,
        CurrencyCode$1.EastCaribbeanDollar,
        CurrencyCode$1.Euro,
        CurrencyCode$1.UnitedStatesDollar,
        CurrencyCode$1.BritishPound
      ],
      languages: [LocaleCode$1.English, LocaleCode$1.Spanish],
      tz: {
        offsets: [TimezoneOffset$1.UTC_MINUS_4],
        regions: [TimezoneRegions$1.AmericaAnguilla],
        timezones: [Timezones$1.AtlanticStandardTime]
      }
    },
    id: CountryCode$1.Anguilla,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1EC}",
        emoji_unicode: "U+1F1E6 U+1F1EC",
        svg: "https://www.countryflags.io/ai/flat/64.svg"
      },
      tld: [".ai"]
    },
    iso: {
      alpha2: CountryCode$1.Anguilla,
      alpha3: "AIA",
      numeric: "660"
    },
    name: {
      alt_spellings: ["AI"],
      demonym: "Anguillian",
      native: {
        endonym: "Anguilla"
      },
      official: "Anguilla",
      short: "Anguilla",
      translations: {
        [LocaleCode$1.Afrikaans]: "Anguilla",
        [LocaleCode$1.Albanian]: "Anguilla",
        [LocaleCode$1.Amharic]: "\u12A0\u1295\u1309\u120B",
        [LocaleCode$1.Arabic]: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627",
        [LocaleCode$1.Armenian]: "\u0531\u0576\u0563\u056B\u056C\u0561",
        [LocaleCode$1.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode$1.Bashkir]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Basque]: "Angila",
        [LocaleCode$1.Belarusian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Bengali]: "\u0985\u0999\u09CD\u0997\u09C0\u09B2\u09BE",
        [LocaleCode$1.Berber]: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627",
        [LocaleCode$1.Bhutani]: "\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B",
        [LocaleCode$1.Bosnian]: "Angila",
        [LocaleCode$1.Breton]: "Angila",
        [LocaleCode$1.Bulgarian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Burmese]: "\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A",
        [LocaleCode$1.Catalan]: "Angilla",
        [LocaleCode$1.Chinese]: "\u5B89\u572D\u62C9",
        [LocaleCode$1.Croatian]: "Angila",
        [LocaleCode$1.Czech]: "Anguilla",
        [LocaleCode$1.Danish]: "Anguilla",
        [LocaleCode$1.Dutch]: "Anguilla",
        [LocaleCode$1.English]: "Anguilla",
        [LocaleCode$1.Esperanto]: "Angila",
        [LocaleCode$1.Estonian]: "Anguilla",
        [LocaleCode$1.Finnish]: "Anguilla",
        [LocaleCode$1.French]: "Anguilla",
        [LocaleCode$1.Frisian]: "Angila",
        [LocaleCode$1.Galician]: "Anguilla",
        [LocaleCode$1.Georgian]: "\u10D0\u10DC\u10D2\u10D8\u10DA\u10D0",
        [LocaleCode$1.German]: "Anguilla",
        [LocaleCode$1.Greenlandic]: "Anguilla",
        [LocaleCode$1.Greek]: "\u0391\u03BD\u03B3\u03BA\u03C5\u03BB\u03AC",
        [LocaleCode$1.Gujarati]: "\u0A85\u0A82\u0A97\u0ACD\u0AAF\u0ABE\u0AB2\u0ABE",
        [LocaleCode$1.Haitian]: "Anguilla",
        [LocaleCode$1.Hausa]: "Anguilla",
        [LocaleCode$1.Hebrew]: "\u05D0\u05E0\u05D2\u05D5\u05D9\u05D0\u05DC\u05D4",
        [LocaleCode$1.Hindi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode$1.Hungarian]: "Anguilla",
        [LocaleCode$1.Icelandic]: "Anguilla",
        [LocaleCode$1.Igbo]: "Anguilla",
        [LocaleCode$1.Indonesian]: "Anguilla",
        [LocaleCode$1.Irish]: "Anguilla",
        [LocaleCode$1.Italian]: "Anguilla",
        [LocaleCode$1.Japanese]: "\u30A2\u30F3\u30AE\u30E9",
        [LocaleCode$1.Javanese]: "Anguilla",
        [LocaleCode$1.Kannada]: "\u0C85\u0C82\u0C97\u0CCD\u0CB5\u0CC7\u0CB2\u0CBE",
        [LocaleCode$1.Kazakh]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Khmer]: "\u17A2\u1784\u17CB\u1780\u17B6\u179A\u17A0\u17D2\u1782\u17B8\u1798",
        [LocaleCode$1.Korean]: "\uC575\uADC8\uB77C",
        [LocaleCode$1.Kurdish]: "Anguilla",
        [LocaleCode$1.Kyrgyz]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Lao]: "\u0EAD\u0EB0\u0E99\u0EB0\u0E88\u0EB3",
        [LocaleCode$1.Latin]: "Anguilla",
        [LocaleCode$1.Latvian]: "Anguilla",
        [LocaleCode$1.Lithuanian]: "Anguilla",
        [LocaleCode$1.Luxembourgish]: "Angilla",
        [LocaleCode$1.Macedonian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Malagasy]: "Angila",
        [LocaleCode$1.Malay]: "Anguilla",
        [LocaleCode$1.Malayalam]: "\u0D05\u0D02\u0D17\u0D4D\u0D35\u0D47\u0D32\u0D3E",
        [LocaleCode$1.Maltese]: "Anguilla",
        [LocaleCode$1.Maori]: "Anguilla",
        [LocaleCode$1.Marathi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode$1.Mongolian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Nepali]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode$1.Norwegian]: "Anguilla",
        [LocaleCode$1.Pashto]: "\u0622\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode$1.Persian]: "\u0622\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode$1.Polish]: "Anguilla",
        [LocaleCode$1.Portuguese]: "Anguilla",
        [LocaleCode$1.Punjabi]: "\u0A05\u0A02\u0A17\u0A40\u0A32\u0A3E",
        [LocaleCode$1.Romanian]: "Anguilla",
        [LocaleCode$1.Russian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Samoan]: "Anguilla",
        [LocaleCode$1.Sanskrit]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode$1.Scots]: "Anguilla",
        [LocaleCode$1.Serbian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Sesotho]: "Anguilla",
        [LocaleCode$1.Shona]: "Anguilla",
        [LocaleCode$1.Sindhi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode$1.Sinhala]: "\u0D86\u0D82\u0D9C\u0DD2\u0DBD\u0DCF\u0DC0",
        [LocaleCode$1.Slovak]: "Anguilla",
        [LocaleCode$1.Slovenian]: "Anguilla",
        [LocaleCode$1.Somali]: "Anguilla",
        [LocaleCode$1.Spanish]: "Anguilla",
        [LocaleCode$1.Sudanese]: "Anguilla",
        [LocaleCode$1.Swahili]: "Anguilla",
        [LocaleCode$1.Swedish]: "Anguilla",
        [LocaleCode$1.Tagalog]: "Anguilla",
        [LocaleCode$1.Tajik]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Tamil]: "\u0B85\u0B99\u0BCD\u0B95\u0BC8\u0BB2\u0BBE",
        [LocaleCode$1.Tatar]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Telugu]: "\u0C05\u0C02\u0C17\u0C4D\u0C35\u0C47\u0C32\u0C3E",
        [LocaleCode$1.Thai]: "\u0E2D\u0E31\u0E07\u0E01\u0E32\u0E25\u0E32",
        [LocaleCode$1.Tibetan]: "\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B",
        [LocaleCode$1.Turkish]: "Anguilla",
        [LocaleCode$1.Ukrainian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Urdu]: "\u0622\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode$1.Uzbek]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode$1.Vietnamese]: "Anguilla",
        [LocaleCode$1.Welsh]: "Anguilla",
        [LocaleCode$1.Xhosa]: "Anguilla",
        [LocaleCode$1.Yiddish]: "Anguilla",
        [LocaleCode$1.Yoruba]: "Anguilla",
        [LocaleCode$1.Zulu]: "Anguilla"
      }
    }
  },
  Antarctica: {
    i18n: {
      calling_codes: [672],
      currencies: [CurrencyCode$1.UnitedStatesDollar, CurrencyCode$1.Euro],
      languages: [
        LocaleCode$1.English,
        LocaleCode$1.Spanish,
        LocaleCode$1.French,
        LocaleCode$1.Portuguese,
        LocaleCode$1.Italian,
        LocaleCode$1.Dutch,
        LocaleCode$1.German,
        LocaleCode$1.Swedish,
        LocaleCode$1.Norwegian,
        LocaleCode$1.Danish,
        LocaleCode$1.Finnish
      ],
      tz: {
        offsets: [TimezoneOffset$1.UTC_PLUS_1, TimezoneOffset$1.UTC_PLUS_2],
        regions: [
          TimezoneRegions$1.AntarcticaCasey,
          TimezoneRegions$1.AntarcticaDavis,
          TimezoneRegions$1.AntarcticaMcMurdo,
          TimezoneRegions$1.AntarcticaPalmer,
          TimezoneRegions$1.AntarcticaRothera
        ],
        timezones: [
          Timezones$1.AtlanticStandardTime,
          Timezones$1.CentralTime,
          Timezones$1.EasternTime,
          Timezones$1.AtlanticStandardTime,
          Timezones$1.AzoresStandardTime,
          Timezones$1.NewfoundlandStandardTime
        ]
      }
    },
    id: CountryCode$1.Antarctica,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F6}",
        emoji_unicode: "U+1F1E6 U+1F1F6",
        svg: "https://www.countryflags.io/aq/flat/64.svg"
      },
      tld: [".aq"]
    },
    iso: {
      alpha2: CountryCode$1.Antarctica,
      alpha3: "ATA",
      numeric: "010"
    },
    name: {
      alt_spellings: ["AQ"],
      demonym: "Antarctican",
      native: {
        endonym: "Antarctica"
      },
      official: "Antarctica",
      short: "Antarctica",
      translations: {
        [LocaleCode$1.Afrikaans]: "Antarctica",
        [LocaleCode$1.Albanian]: "Antarktika",
        [LocaleCode$1.Amharic]: "\u12A0\u1295\u1272\u120D\u12AB\u1293",
        [LocaleCode$1.Arabic]: "\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627",
        [LocaleCode$1.Armenian]: "\u0540\u0561\u0576\u0561\u0580\u0561\u057F\u056F\u0578",
        [LocaleCode$1.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode$1.Bashkir]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Basque]: "Antarktika",
        [LocaleCode$1.Belarusian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Bengali]: "\u0985\u09A8\u09CD\u09A4\u09B0\u09BE\u09B6\u09CD\u09AC\u09C0",
        [LocaleCode$1.Berber]: "\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627",
        [LocaleCode$1.Bhutani]: "\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B",
        [LocaleCode$1.Bosnian]: "Antarktika",
        [LocaleCode$1.Breton]: "Antarktika",
        [LocaleCode$1.Bulgarian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Burmese]: "\u1021\u1014\u1039\u1010\u102C\u101B\u102E\u1038\u101A\u102C\u1038",
        [LocaleCode$1.Catalan]: "Ant\xE0rtida",
        [LocaleCode$1.Chinese]: "\u5357\u6781\u6D32",
        [LocaleCode$1.Croatian]: "Antarktika",
        [LocaleCode$1.Czech]: "Antarktida",
        [LocaleCode$1.Danish]: "Antarktis",
        [LocaleCode$1.Dutch]: "Antarctica",
        [LocaleCode$1.English]: "Antarctica",
        [LocaleCode$1.Esperanto]: "Antarktika",
        [LocaleCode$1.Estonian]: "Antarktika",
        [LocaleCode$1.Finnish]: "Antarktis",
        [LocaleCode$1.French]: "Antarctica",
        [LocaleCode$1.Frisian]: "Antarktis",
        [LocaleCode$1.Galician]: "Ant\xE1rtida",
        [LocaleCode$1.Georgian]: "\u10D0\u10DC\u10E2\u10D0\u10E0\u10E5\u10E2\u10D8\u10D9\u10D0",
        [LocaleCode$1.German]: "Antarktis",
        [LocaleCode$1.Greenlandic]: "Antarktis",
        [LocaleCode$1.Greek]: "\u0391\u03BD\u03C4\u03B1\u03C1\u03BA\u03C4\u03B9\u03BA\u03AE",
        [LocaleCode$1.Gujarati]: "\u0A85\u0AA8\u0ACD\u0AA4\u0AB0\u0ABE\u0AB6\u0ACD\u0AB5\u0AC0",
        [LocaleCode$1.Haitian]: "Antarctica",
        [LocaleCode$1.Hausa]: "Antarktika",
        [LocaleCode$1.Hebrew]: "\u05D0\u05E0\u05D8\u05E8\u05E7\u05D8\u05D9\u05E7\u05D4",
        [LocaleCode$1.Hindi]: "\u0905\u0928\u094D\u0924\u0930\u0915\u094D\u0937\u0947\u0924\u094D\u0930",
        [LocaleCode$1.Hungarian]: "Antarktika",
        [LocaleCode$1.Icelandic]: "Antarktis",
        [LocaleCode$1.Igbo]: "Antarktika",
        [LocaleCode$1.Indonesian]: "Antarktika",
        [LocaleCode$1.Irish]: "Antarktika",
        [LocaleCode$1.Italian]: "Antartide",
        [LocaleCode$1.Japanese]: "\u5357\u6975",
        [LocaleCode$1.Javanese]: "Antarktika",
        [LocaleCode$1.Kannada]: "\u0C85\u0CA8\u0CCD\u0CA4\u0CB0\u0CBE\u0CB6\u0CCD\u0CB5\u0CBF",
        [LocaleCode$1.Kazakh]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Khmer]: "\u17A2\u1784\u17CB\u179F\u17D2\u1780\u179A\u17A2\u17B6\u1798\u17C9\u17BB\u1799",
        [LocaleCode$1.Korean]: "\uC564\uD2F0\uCE74\uD1A0\uB2C9",
        [LocaleCode$1.Kurdish]: "Antarktika",
        [LocaleCode$1.Kyrgyz]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Lao]: "\u0EAD\u0EB0\u0E99\u0EAD\u0EA5\u0EB2\u0E81\u0EB4\u0EAA\u0EB0",
        [LocaleCode$1.Latin]: "Antarctica",
        [LocaleCode$1.Latvian]: "Antarktika",
        [LocaleCode$1.Lithuanian]: "Antarktis",
        [LocaleCode$1.Luxembourgish]: "Antarktis",
        [LocaleCode$1.Macedonian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Malagasy]: "Antarctica",
        [LocaleCode$1.Malay]: "Antarktika",
        [LocaleCode$1.Malayalam]: "\u0D05\u0D28\u0D4D\u0D24\u0D30\u0D3E\u0D36\u0D4D\u0D35\u0D3F",
        [LocaleCode$1.Maltese]: "Antarktika",
        [LocaleCode$1.Maori]: "Antarktika",
        [LocaleCode$1.Marathi]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E",
        [LocaleCode$1.Mongolian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Nepali]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E",
        [LocaleCode$1.Norwegian]: "Antarktis",
        [LocaleCode$1.Pashto]: "\u0627\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627",
        [LocaleCode$1.Persian]: "\u0622\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627",
        [LocaleCode$1.Polish]: "Antarktyka",
        [LocaleCode$1.Portuguese]: "Ant\xE1rtida",
        [LocaleCode$1.Punjabi]: "\u0A05\u0A28\u0A4D\u0A24\u0A30\u0A3E\u0A36\u0A3F\u0A15\u0A3E",
        [LocaleCode$1.Romanian]: "Antarctica",
        [LocaleCode$1.Russian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Samoan]: "Antarktika",
        [LocaleCode$1.Sanskrit]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E",
        [LocaleCode$1.Scots]: "Antarktika",
        [LocaleCode$1.Serbian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Sesotho]: "Antarktika",
        [LocaleCode$1.Shona]: "Antarktika",
        [LocaleCode$1.Sindhi]: "Antarktika",
        [LocaleCode$1.Sinhala]: "\u0D86\u0DB1\u0DCA\u0DA7\u0DCA\u0DA7\u0DD2\u0D9A\u0DCF\u0DC0",
        [LocaleCode$1.Slovak]: "Antarktika",
        [LocaleCode$1.Slovenian]: "Antarktika",
        [LocaleCode$1.Somali]: "Antarktika",
        [LocaleCode$1.Spanish]: "Ant\xE1rtida",
        [LocaleCode$1.Sudanese]: "Antarktika",
        [LocaleCode$1.Swahili]: "Antarktika",
        [LocaleCode$1.Swedish]: "Antarktis",
        [LocaleCode$1.Tagalog]: "Antarktika",
        [LocaleCode$1.Tajik]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Tamil]: "\u0B85\u0BA9\u0BCD\u0BA4\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BBF\u0B95\u0BCD",
        [LocaleCode$1.Tatar]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Telugu]: "\u0C05\u0C28\u0C4D\u0C24\u0C30\u0C3E\u0C36\u0C4D\u0C35\u0C3F\u0C15\u0C3E",
        [LocaleCode$1.Thai]: "\u0E20\u0E39\u0E21\u0E34\u0E20\u0E32\u0E04\u0E2D\u0E32\u0E19\u0E31\u0E19\u0E15\u0E34\u0E01\u0E32",
        [LocaleCode$1.Tibetan]: "\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72\u0F0B\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72",
        [LocaleCode$1.Turkish]: "Antarktika",
        [LocaleCode$1.Ukrainian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Urdu]: "\u0627\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627",
        [LocaleCode$1.Uzbek]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode$1.Vietnamese]: "\u0110\u1EA5t Antarktik",
        [LocaleCode$1.Welsh]: "Antarktika",
        [LocaleCode$1.Xhosa]: "Antarktika",
        [LocaleCode$1.Yiddish]: "Antarktika",
        [LocaleCode$1.Yoruba]: "Antarktika",
        [LocaleCode$1.Zulu]: "Antarktika"
      }
    }
  },
  Armenia: {
    i18n: {
      calling_codes: [374],
      currencies: [CurrencyCode$1.ArmeniaDram],
      languages: [LocaleCode$1.Armenian],
      tz: {
        offsets: [TimezoneOffset$1.UTC_PLUS_4],
        regions: [TimezoneRegions$1.AsiaJakarta],
        timezones: [Timezones$1.ArmeniaTime]
      }
    },
    id: CountryCode$1.Armenia,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F2}",
        emoji_unicode: "U+1F1E6 U+1F1F2",
        svg: "https://www.countryflags.io/am/flat/64.svg"
      },
      tld: [".am"]
    },
    iso: {
      alpha2: CountryCode$1.Armenia,
      alpha3: "ARM",
      numeric: "051"
    },
    name: {
      alt_spellings: ["AM", "Hayastan", "Republic of Armenia", "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576"],
      demonym: "Armenian",
      native: {
        endonym: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576"
      },
      official: "Republic of Armenia",
      short: "Armenia",
      translations: {
        [LocaleCode$1.Afrikaans]: "Armeni\xEB",
        [LocaleCode$1.Albanian]: "Armenia",
        [LocaleCode$1.Amharic]: "\u12A0\u121B\u122D\u129B",
        [LocaleCode$1.Arabic]: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627",
        [LocaleCode$1.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576",
        [LocaleCode$1.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode$1.Bashkir]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode$1.Basque]: "Arm\xE9nia",
        [LocaleCode$1.Belarusian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode$1.Bengali]: "\u0986\u09B0\u09CD\u09AE\u09C7\u09A8\u09BF",
        [LocaleCode$1.Berber]: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627",
        [LocaleCode$1.Bhutani]: "\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42",
        [LocaleCode$1.Bosnian]: "Armenija",
        [LocaleCode$1.Breton]: "Armeni\xEB",
        [LocaleCode$1.Bulgarian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode$1.Burmese]: "\u1021\u102C\u1019\u1010\u102D\u1010\u1039",
        [LocaleCode$1.Catalan]: "Arm\xE8nia",
        [LocaleCode$1.Chinese]: "\u4E9A\u7F8E\u5C3C\u4E9A",
        [LocaleCode$1.Croatian]: "Armenija",
        [LocaleCode$1.Czech]: "Arm\xE9nie",
        [LocaleCode$1.Danish]: "Armenien",
        [LocaleCode$1.Dutch]: "Armeni\xEB",
        [LocaleCode$1.English]: "Armenia",
        [LocaleCode$1.Esperanto]: "Armenia",
        [LocaleCode$1.Estonian]: "Armeenia",
        [LocaleCode$1.Finnish]: "Armenia",
        [LocaleCode$1.French]: "Armenia",
        [LocaleCode$1.Frisian]: "Armeenia",
        [LocaleCode$1.Galician]: "Arm\xE9nia",
        [LocaleCode$1.Georgian]: "\u10D0\u10E0\u10DB\u10DD\u10DC\u10D8",
        [LocaleCode$1.German]: "Armenien",
        [LocaleCode$1.Greenlandic]: "Armenia",
        [LocaleCode$1.Greek]: "\u0391\u03C1\u03BC\u03B5\u03BD\u03AF\u03B1",
        [LocaleCode$1.Gujarati]: "\u0A85\u0AB0\u0ACD\u0AAE\u0AC7\u0AA8\u0ABF",
        [LocaleCode$1.Haitian]: "Armenia",
        [LocaleCode$1.Hausa]: "Armenia",
        [LocaleCode$1.Hebrew]: "\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4",
        [LocaleCode$1.Hindi]: "\u0905\u05E8\u05DE\u05E0\u093F\u092F\u093E",
        [LocaleCode$1.Hungarian]: "\xD6rm\xE9nyorsz\xE1g",
        [LocaleCode$1.Icelandic]: "Armenia",
        [LocaleCode$1.Igbo]: "Armenia",
        [LocaleCode$1.Indonesian]: "Armenia",
        [LocaleCode$1.Irish]: "Armenia",
        [LocaleCode$1.Italian]: "Armenia",
        [LocaleCode$1.Japanese]: "\u30A2\u30EB\u30E1\u30CB\u30A2",
        [LocaleCode$1.Javanese]: "Armenia",
        [LocaleCode$1.Kannada]: "\u0C85\u0CB0\u0CCD\u0CAE\u0CC7\u0CA8\u0CBF",
        [LocaleCode$1.Kazakh]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode$1.Khmer]: "\u17A2\u17B6\u1798\u17C9\u17C1\u179A\u17B8",
        [LocaleCode$1.Korean]: "\uC544\uB974\uBA54\uB2C8\uC544",
        [LocaleCode$1.Kurdish]: "Armenia",
        [LocaleCode$1.Kyrgyz]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode$1.Lao]: "\u0EAD\u0EB2\u0EAB\u0EBC\u0E99\u0EB2",
        [LocaleCode$1.Latin]: "Armenia",
        [LocaleCode$1.Latvian]: "Armeenia",
        [LocaleCode$1.Lithuanian]: "Arm\u0117nija",
        [LocaleCode$1.Luxembourgish]: "Armenien",
        [LocaleCode$1.Macedonian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430",
        [LocaleCode$1.Malagasy]: "Armenia",
        [LocaleCode$1.Malay]: "Armenia",
        [LocaleCode$1.Malayalam]: "\u0D05\u0D30\u0D4D\u200D\u0D2E\u0D47\u0D28\u0D3F",
        [LocaleCode$1.Maltese]: "Armenia",
        [LocaleCode$1.Maori]: "Armenia",
        [LocaleCode$1.Marathi]: "\u0905\u0930\u094D\u092E\u0947\u0928\u093F",
        [LocaleCode$1.Mongolian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode$1.Nepali]: "\u0905\u0930\u094D\u092E\u0947\u0928\u093F",
        [LocaleCode$1.Norwegian]: "Armenia",
        [LocaleCode$1.Pashto]: "\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627",
        [LocaleCode$1.Persian]: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode$1.Polish]: "Armenia",
        [LocaleCode$1.Portuguese]: "Armenia",
        [LocaleCode$1.Punjabi]: "\u0A05\u0A30\u0A2E\u0A40\u0A28\u0A40",
        [LocaleCode$1.Romanian]: "Armenia",
        [LocaleCode$1.Russian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode$1.Samoan]: "Armenia",
        [LocaleCode$1.Sanskrit]: "Armenia",
        [LocaleCode$1.Scots]: "Armenia",
        [LocaleCode$1.Serbian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430",
        [LocaleCode$1.Sesotho]: "Armenia",
        [LocaleCode$1.Shona]: "Armenia",
        [LocaleCode$1.Sindhi]: "Armenia",
        [LocaleCode$1.Sinhala]: "\u0D86\u0DBB\u0DCA\u0DB8\u0DD3\u0DB1\u0DD2",
        [LocaleCode$1.Slovak]: "Armenia",
        [LocaleCode$1.Slovenian]: "Armenija",
        [LocaleCode$1.Somali]: "Armenia",
        [LocaleCode$1.Spanish]: "Armenia",
        [LocaleCode$1.Sudanese]: "Armenia",
        [LocaleCode$1.Swahili]: "Armenia",
        [LocaleCode$1.Swedish]: "Armenien",
        [LocaleCode$1.Tagalog]: "Armenia",
        [LocaleCode$1.Tajik]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode$1.Tamil]: "\u0B85\u0BB0\u0BCD\u0BAE\u0BC7\u0BA9\u0BBF\u0BAF\u0BA9\u0BCD",
        [LocaleCode$1.Tatar]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode$1.Telugu]: "\u0C05\u0C30\u0C4D\u0C2E\u0C47\u0C28\u0C3F",
        [LocaleCode$1.Thai]: "\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E21\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19",
        [LocaleCode$1.Tibetan]: "\u0F68\u0F62\u0F0B\u0F58\u0F7A\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F74\u0F0D",
        [LocaleCode$1.Turkish]: "Ermenistan",
        [LocaleCode$1.Ukrainian]: "\u0410\u0440\u043C\u0435\u043D\u0456\u044F",
        [LocaleCode$1.Urdu]: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode$1.Uzbek]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode$1.Vietnamese]: "Armenia",
        [LocaleCode$1.Welsh]: "Armenia",
        [LocaleCode$1.Xhosa]: "Armenia",
        [LocaleCode$1.Yiddish]: "\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4",
        [LocaleCode$1.Yoruba]: "Armenia",
        [LocaleCode$1.Zulu]: "Armenia"
      }
    }
  },
  SomeCountry: {
    i18n: {
      calling_codes: [],
      currencies: [],
      languages: [],
      tz: {
        offsets: [],
        regions: [],
        timezones: []
      }
    },
    id: CountryCode$1.AmericanSamoa,
    info: {
      flag: {
        emoji: "",
        emoji_unicode: "",
        svg: ""
      },
      tld: []
    },
    iso: {
      alpha2: CountryCode$1.AmericanSamoa,
      alpha3: "",
      numeric: ""
    },
    name: {
      alt_spellings: [],
      demonym: "",
      native: {
        endonym: ""
      },
      official: "",
      short: "",
      translations: {
        [LocaleCode$1.Afrikaans]: "",
        [LocaleCode$1.Albanian]: "",
        [LocaleCode$1.Amharic]: "",
        [LocaleCode$1.Arabic]: "",
        [LocaleCode$1.Armenian]: "",
        [LocaleCode$1.Azerbaijani]: "",
        [LocaleCode$1.Bashkir]: "",
        [LocaleCode$1.Basque]: "",
        [LocaleCode$1.Belarusian]: "",
        [LocaleCode$1.Bengali]: "",
        [LocaleCode$1.Berber]: "",
        [LocaleCode$1.Bhutani]: "",
        [LocaleCode$1.Bosnian]: "",
        [LocaleCode$1.Breton]: "",
        [LocaleCode$1.Bulgarian]: "",
        [LocaleCode$1.Burmese]: "",
        [LocaleCode$1.Catalan]: "",
        [LocaleCode$1.Chinese]: "",
        [LocaleCode$1.Croatian]: "",
        [LocaleCode$1.Czech]: "",
        [LocaleCode$1.Danish]: "",
        [LocaleCode$1.Dutch]: "",
        [LocaleCode$1.English]: "",
        [LocaleCode$1.Esperanto]: "",
        [LocaleCode$1.Estonian]: "",
        [LocaleCode$1.Finnish]: "",
        [LocaleCode$1.French]: "",
        [LocaleCode$1.Frisian]: "",
        [LocaleCode$1.Galician]: "",
        [LocaleCode$1.Georgian]: "",
        [LocaleCode$1.German]: "",
        [LocaleCode$1.Greenlandic]: "",
        [LocaleCode$1.Greek]: "",
        [LocaleCode$1.Gujarati]: "",
        [LocaleCode$1.Haitian]: "",
        [LocaleCode$1.Hausa]: "",
        [LocaleCode$1.Hebrew]: "",
        [LocaleCode$1.Hindi]: "",
        [LocaleCode$1.Hungarian]: "",
        [LocaleCode$1.Icelandic]: "",
        [LocaleCode$1.Igbo]: "",
        [LocaleCode$1.Indonesian]: "",
        [LocaleCode$1.Irish]: "",
        [LocaleCode$1.Italian]: "",
        [LocaleCode$1.Japanese]: "",
        [LocaleCode$1.Javanese]: "",
        [LocaleCode$1.Kannada]: "",
        [LocaleCode$1.Kazakh]: "",
        [LocaleCode$1.Khmer]: "",
        [LocaleCode$1.Korean]: "",
        [LocaleCode$1.Kurdish]: "",
        [LocaleCode$1.Kyrgyz]: "",
        [LocaleCode$1.Lao]: "",
        [LocaleCode$1.Latin]: "",
        [LocaleCode$1.Latvian]: "",
        [LocaleCode$1.Lithuanian]: "",
        [LocaleCode$1.Luxembourgish]: "",
        [LocaleCode$1.Macedonian]: "",
        [LocaleCode$1.Malagasy]: "",
        [LocaleCode$1.Malay]: "",
        [LocaleCode$1.Malayalam]: "",
        [LocaleCode$1.Maltese]: "",
        [LocaleCode$1.Maori]: "",
        [LocaleCode$1.Marathi]: "",
        [LocaleCode$1.Mongolian]: "",
        [LocaleCode$1.Nepali]: "",
        [LocaleCode$1.Norwegian]: "",
        [LocaleCode$1.Pashto]: "",
        [LocaleCode$1.Persian]: "",
        [LocaleCode$1.Polish]: "",
        [LocaleCode$1.Portuguese]: "",
        [LocaleCode$1.Punjabi]: "",
        [LocaleCode$1.Romanian]: "",
        [LocaleCode$1.Russian]: "",
        [LocaleCode$1.Samoan]: "",
        [LocaleCode$1.Sanskrit]: "",
        [LocaleCode$1.Scots]: "",
        [LocaleCode$1.Serbian]: "",
        [LocaleCode$1.Sesotho]: "",
        [LocaleCode$1.Shona]: "",
        [LocaleCode$1.Sindhi]: "",
        [LocaleCode$1.Sinhala]: "",
        [LocaleCode$1.Slovak]: "",
        [LocaleCode$1.Slovenian]: "",
        [LocaleCode$1.Somali]: "",
        [LocaleCode$1.Spanish]: "",
        [LocaleCode$1.Sudanese]: "",
        [LocaleCode$1.Swahili]: "",
        [LocaleCode$1.Swedish]: "",
        [LocaleCode$1.Tagalog]: "",
        [LocaleCode$1.Tajik]: "",
        [LocaleCode$1.Tamil]: "",
        [LocaleCode$1.Tatar]: "",
        [LocaleCode$1.Telugu]: "",
        [LocaleCode$1.Thai]: "",
        [LocaleCode$1.Tibetan]: "",
        [LocaleCode$1.Turkish]: "",
        [LocaleCode$1.Ukrainian]: "",
        [LocaleCode$1.Urdu]: "",
        [LocaleCode$1.Uzbek]: "",
        [LocaleCode$1.Vietnamese]: "",
        [LocaleCode$1.Welsh]: "",
        [LocaleCode$1.Xhosa]: "",
        [LocaleCode$1.Yiddish]: "",
        [LocaleCode$1.Yoruba]: "",
        [LocaleCode$1.Zulu]: ""
      }
    }
  }
});
({
  id: LocaleCode$1.Afrikaans,
  language: {
    code: LanguageCode$1.Afrikaans,
    name: "Afrikaans",
    native: "Afrikaans"
  },
  name: "Afrikaans",
  native_name: "Afrikaans",
  rtl: false
});
({
  country: {
    code: CountryCode$1.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode$1.AfrikaansSouthAfrica,
  language: {
    code: LanguageCode$1.Afrikaans,
    name: "Afrikaans",
    native: "Afrikaans"
  },
  name: "Afrikaans (South Africa)",
  native_name: "Afrikaans (Suid-Afrika)",
  rtl: false
});
({
  id: LocaleCode$1.Albanian,
  language: {
    code: LanguageCode$1.Albanian,
    name: "Albanian",
    native: "Shqip"
  },
  name: "Albanian",
  native_name: "Shqip",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Albania,
    name: "Albania",
    native: "Shqip\xEBria"
  },
  id: LocaleCode$1.AlbanianAlbania,
  language: {
    code: LanguageCode$1.Albanian,
    name: "Albanian",
    native: "Shqip"
  },
  name: "Albanian (Albania)",
  native_name: "Shqip (Shqip\xEBria)",
  rtl: false
});
({
  id: LocaleCode$1.Amharic,
  language: {
    code: LanguageCode$1.Amharic,
    name: "Amharic",
    native: "\u12A0\u121B\u122D\u129B"
  },
  name: "Amharic",
  native_name: "\u12A0\u121B\u122D\u129B",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Ethiopia,
    name: "Ethiopia",
    native: "\u12A2\u1275\u12EE\u1335\u12EB"
  },
  id: LocaleCode$1.AmharicEthiopia,
  language: {
    code: LanguageCode$1.Amharic,
    name: "Amharic",
    native: "\u12A0\u121B\u122D\u129B"
  },
  name: "Amharic (Ethiopia)",
  native_name: "\u12A0\u121B\u122D\u129B (\u12A2\u1275\u12EE\u1335\u12EB)",
  rtl: false
});
({
  id: LocaleCode$1.Arabic,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Algeria,
    name: "Algeria",
    native: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631"
  },
  id: LocaleCode$1.ArabicAlgeria,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Algeria)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u062C\u0632\u0627\u0626\u0631)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Bahrain,
    name: "Bahrain",
    native: "\u0627\u0644\u0628\u062D\u0631\u064A\u0646"
  },
  id: LocaleCode$1.ArabicBahrain,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Bahrain)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0628\u062D\u0631\u064A\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Egypt,
    name: "Egypt",
    native: "\u0645\u0635\u0631"
  },
  id: LocaleCode$1.ArabicEgypt,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Egypt)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0645\u0635\u0631)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Iraq,
    name: "Iraq",
    native: "\u0627\u0644\u0639\u0631\u0627\u0642"
  },
  id: LocaleCode$1.ArabicIraq,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Iraq)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0639\u0631\u0627\u0642)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Jordan,
    name: "Jordan",
    native: "\u0627\u0644\u0623\u0631\u062F\u0646"
  },
  id: LocaleCode$1.ArabicJordan,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Jordan)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0623\u0631\u062F\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Kuwait,
    name: "Kuwait",
    native: "\u0627\u0644\u0643\u0648\u064A\u062A"
  },
  id: LocaleCode$1.ArabicKuwait,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Kuwait)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0643\u0648\u064A\u062A)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Lebanon,
    name: "Lebanon",
    native: "\u0644\u0628\u0646\u0627\u0646"
  },
  id: LocaleCode$1.ArabicLebanon,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Lebanon)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u0628\u0646\u0627\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Libya,
    name: "Libya",
    native: "\u0644\u064A\u0628\u064A\u0627"
  },
  id: LocaleCode$1.ArabicLibya,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Libya)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u064A\u0628\u064A\u0627)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Morocco,
    name: "Morocco",
    native: "\u0627\u0644\u0645\u063A\u0631\u0628"
  },
  id: LocaleCode$1.ArabicMorocco,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Morocco)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u063A\u0631\u0628)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Oman,
    name: "Oman",
    native: "\u0639\u0645\u0627\u0646"
  },
  id: LocaleCode$1.ArabicOman,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Oman)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0639\u0645\u0627\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Qatar,
    name: "Qatar",
    native: "\u0642\u0637\u0631"
  },
  id: LocaleCode$1.ArabicQatar,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Qatar)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0642\u0637\u0631)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.SaudiArabia,
    name: "Saudi Arabia",
    native: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629"
  },
  id: LocaleCode$1.ArabicSaudiArabia,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Saudi Arabia)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Tunisia,
    name: "Tunisia",
    native: "\u062A\u0648\u0646\u0633"
  },
  id: LocaleCode$1.ArabicTunisia,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Tunisia)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u062A\u0648\u0646\u0633)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.UnitedArabEmirates,
    name: "United Arab Emirates",
    native: "\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629"
  },
  id: LocaleCode$1.ArabicUnitedArabEmirates,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (United Arab Emirates)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Yemen,
    name: "Yemen",
    native: "\u0627\u0644\u064A\u0645\u0646"
  },
  id: LocaleCode$1.ArabicYemen,
  language: {
    code: LanguageCode$1.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Yemen)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u064A\u0645\u0646)",
  rtl: true
});
({
  id: LocaleCode$1.Armenian,
  language: {
    code: LanguageCode$1.Armenian,
    name: "Armenian",
    native: "\u0540\u0561\u0575\u0565\u0580\u0565\u0576"
  },
  name: "Armenian",
  native_name: "\u0540\u0561\u0575\u0565\u0580\u0565\u0576",
  rtl: false
});
({
  country: { code: CountryCode$1.Armenia, name: "Armenia", native: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576" },
  id: LocaleCode$1.ArmenianArmenia,
  language: {
    code: LanguageCode$1.Armenian,
    name: "Armenian",
    native: "\u0570\u0561\u0575\u0565\u0580\u0565\u0576"
  },
  name: "Armenian (Armenia)",
  native_name: "\u0570\u0561\u0575\u0565\u0580\u0565\u0576 (\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576)",
  rtl: false
});
({
  id: LocaleCode$1.Azerbaijani,
  language: {
    code: LanguageCode$1.Azerbaijani,
    name: "Azeribaijani",
    native: "Az\u0259rbaycan"
  },
  name: "Azeri",
  native_name: "Az\u0259rbaycan",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Azerbaijan,
    name: "Azerbaijan",
    native: "Az\u0259rbaycan"
  },
  id: LocaleCode$1.AzerbaijaniAzerbaijan,
  language: {
    code: LanguageCode$1.Azerbaijani,
    name: "Azerbaijani",
    native: "Az\u0259rbaycan"
  },
  name: "Azeri (Azerbaijan)",
  native_name: "Az\u0259rbaycan (Az\u0259rbaycan)",
  rtl: false
});
({
  id: LocaleCode$1.Basque,
  language: {
    code: LanguageCode$1.Basque,
    name: "Basque",
    native: "Euskara"
  },
  name: "Basque",
  native_name: "Euskara",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Spain,
    name: "Spain",
    native: "Espa\xF1a"
  },
  id: LocaleCode$1.BasqueSpain,
  language: {
    code: LanguageCode$1.Basque,
    name: "Basque",
    native: "Euskara"
  },
  name: "Basque (Spain)",
  native_name: "Euskara (Espa\xF1a)",
  rtl: false
});
({
  id: LocaleCode$1.Belarusian,
  language: {
    code: LanguageCode$1.Belarusian,
    name: "Belarusian",
    native: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F"
  },
  name: "Belarusian",
  native_name: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Belarus,
    name: "Belarus",
    native: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C"
  },
  id: LocaleCode$1.BelarusianBelarus,
  language: {
    code: LanguageCode$1.Belarusian,
    name: "Belarusian",
    native: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F"
  },
  name: "Belarusian (Belarus)",
  native_name: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F (\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C)",
  rtl: false
});
({
  id: LocaleCode$1.Bengali,
  language: {
    code: LanguageCode$1.Bengali,
    name: "Bengali",
    native: "\u09AC\u09BE\u0982\u09B2\u09BE"
  },
  name: "Bengali",
  native_name: "\u09AC\u09BE\u0982\u09B2\u09BE",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Bangladesh,
    name: "Bangladesh",
    native: "\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6"
  },
  id: LocaleCode$1.BengaliBangladesh,
  language: {
    code: LanguageCode$1.Bengali,
    name: "Bengali",
    native: "\u09AC\u09BE\u0982\u09B2\u09BE"
  },
  name: "Bengali (Bangladesh)",
  native_name: "\u09AC\u09BE\u0982\u09B2\u09BE (\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6)",
  rtl: false
});
({
  id: LocaleCode$1.Bhutani,
  language: {
    code: LanguageCode$1.Bhutani,
    name: "Bhutani",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Bhutani",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Bhutan,
    name: "Bhutan",
    native: "\u0F60\u0F56\u0FB2\u0F74\u0F42"
  },
  id: LocaleCode$1.BhutaniBhutan,
  language: {
    code: LanguageCode$1.Bhutani,
    name: "Bhutani",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Bhutani (Bhutan)",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42)",
  rtl: false
});
({
  id: LocaleCode$1.Bulgarian,
  language: {
    code: LanguageCode$1.Bulgarian,
    name: "Bulgarian",
    native: "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438"
  },
  name: "Bulgarian",
  native_name: "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Bulgaria,
    name: "Bulgaria",
    native: "\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F"
  },
  id: LocaleCode$1.BulgarianBulgaria,
  language: {
    code: LanguageCode$1.Bulgarian,
    name: "Bulgarian",
    native: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438"
  },
  name: "Bulgarian (Bulgaria)",
  native_name: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438 (\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F)",
  rtl: false
});
({
  id: LocaleCode$1.Burmese,
  language: {
    code: LanguageCode$1.Burmese,
    name: "Burmese",
    native: "\u1017\u1019\u102C\u1005\u102C"
  },
  name: "Burmese",
  native_name: "\u1017\u1019\u102C\u1005\u102C",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Myanmar,
    name: "Myanmar",
    native: "\u1019\u103C\u1014\u103A\u1019\u102C"
  },
  id: LocaleCode$1.BurmeseMyanmar,
  language: {
    code: LanguageCode$1.Burmese,
    name: "Burmese",
    native: "\u1017\u1019\u102C\u1005\u102C"
  },
  name: "Burmese (Myanmar)",
  native_name: "\u1017\u1019\u102C\u1005\u102C (\u1019\u103C\u1014\u103A\u1019\u102C)",
  rtl: false
});
({
  id: LocaleCode$1.Cantonese,
  language: {
    code: LanguageCode$1.Cantonese,
    name: "Cantonese",
    native: "\u5EE3\u6771\u8A71"
  },
  name: "Cantonese",
  native_name: "\u5EE3\u6771\u8A71",
  rtl: false
});
({
  country: {
    code: CountryCode$1.HongKong,
    name: "Hong Kong",
    native: "\u9999\u6E2F"
  },
  id: LocaleCode$1.CantoneseHongKong,
  language: {
    code: LanguageCode$1.Cantonese,
    name: "Cantonese",
    native: "\u5EE3\u6771\u8A71"
  },
  name: "Cantonese (Hong Kong)",
  native_name: "\u5EE3\u6771\u8A71 (\u9999\u6E2F)",
  rtl: false
});
({
  id: LocaleCode$1.Catalan,
  language: {
    code: LanguageCode$1.Catalan,
    name: "Catalan",
    native: "Catal\xE0"
  },
  name: "Catalan",
  native_name: "Catal\xE0",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Spain,
    name: "Spain",
    native: "Espa\xF1a"
  },
  id: LocaleCode$1.CatalanSpain,
  language: {
    code: LanguageCode$1.Catalan,
    name: "Catalan",
    native: "Catal\xE0"
  },
  name: "Catalan (Spain)",
  native_name: "Catal\xE0 (Espanya)",
  rtl: false
});
({
  id: LocaleCode$1.ChineseSimplified,
  language: {
    code: LanguageCode$1.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified)",
  native_name: "\u4E2D\u6587",
  rtl: false
});
({
  country: {
    code: CountryCode$1.China,
    name: "China",
    native: "\u4E2D\u56FD"
  },
  id: LocaleCode$1.ChineseSimplifiedChina,
  language: {
    code: LanguageCode$1.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified/China)",
  native_name: "\u4E2D\u6587 (\u4E2D\u56FD)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.HongKong,
    name: "Hong Kong",
    native: "\u9999\u6E2F"
  },
  id: LocaleCode$1.ChineseSimplifiedHongKong,
  language: {
    code: LanguageCode$1.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified/Hong Kong)",
  native_name: "\u4E2D\u6587 (\u9999\u6E2F)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Macau,
    name: "Macau",
    native: "\u6FB3\u9580"
  },
  id: LocaleCode$1.ChineseSimplifiedMacau,
  language: {
    code: LanguageCode$1.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified/Macau)",
  native_name: "\u4E2D\u6587 (\u6FB3\u9580)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Singapore,
    name: "Singapore",
    native: "\u65B0\u52A0\u5761"
  },
  id: LocaleCode$1.ChineseSimplifiedSingapore,
  language: {
    code: LanguageCode$1.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified/Singapore)",
  native_name: "\u4E2D\u6587 (\u65B0\u52A0\u5761)",
  rtl: false
});
({
  id: LocaleCode$1.ChineseTraditional,
  language: {
    code: LanguageCode$1.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Traditional)",
  native_name: "\u4E2D\u6587",
  rtl: false
});
({
  country: {
    code: CountryCode$1.HongKong,
    name: "Hong Kong",
    native: "\u9999\u6E2F"
  },
  id: LocaleCode$1.ChineseTraditionalHongKong,
  language: {
    code: LanguageCode$1.Chinese,
    name: "Chinese (Traditional/Hong Kong)",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Hong Kong)",
  native_name: "\u4E2D\u6587 (\u9999\u6E2F)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Macau,
    name: "Macau",
    native: "\u6FB3\u9580"
  },
  id: LocaleCode$1.ChineseTraditionalMacau,
  language: {
    code: LanguageCode$1.Chinese,
    name: "Chinese (Traditional/Macau)",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Macau)",
  native_name: "\u4E2D\u6587 (\u6FB3\u9580)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Singapore,
    name: "Singapore",
    native: "\u65B0\u52A0\u5761"
  },
  id: LocaleCode$1.ChineseTraditionalSingapore,
  language: {
    code: LanguageCode$1.Chinese,
    name: "Chinese (Traditional/Singapore)",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Singapore)",
  native_name: "\u4E2D\u6587 (\u65B0\u52A0\u5761)",
  rtl: false
});
({
  id: LocaleCode$1.Croatian,
  language: {
    code: LanguageCode$1.Croatian,
    name: "Croatian",
    native: "Hrvatski"
  },
  name: "Croatian",
  native_name: "Hrvatski",
  rtl: false
});
({
  country: {
    code: CountryCode$1.BosniaAndHerzegovina,
    name: "Bosnia and Herzegovina",
    native: "Bosna i Hercegovina"
  },
  id: LocaleCode$1.CroatianBosniaAndHerzegovina,
  language: {
    code: LanguageCode$1.Croatian,
    name: "Croatian",
    native: "Hrvatski"
  },
  name: "Croatian (Bosnia and Herzegovina)",
  native_name: "Hrvatski (Bosna i Hercegovina)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Croatia,
    name: "Croatia",
    native: "Hrvatska"
  },
  id: LocaleCode$1.CroatianCroatia,
  language: {
    code: LanguageCode$1.Croatian,
    name: "Croatian",
    native: "Hrvatski"
  },
  name: "Croatian (Croatia)",
  native_name: "Hrvatski (Hrvatska)",
  rtl: false
});
({
  id: LocaleCode$1.Czech,
  language: {
    code: LanguageCode$1.Czech,
    name: "Czech",
    native: "\u010Ce\u0161tina"
  },
  name: "Czech",
  native_name: "\u010Ce\u0161tina",
  rtl: false
});
({
  country: {
    code: CountryCode$1.CzechRepublic,
    name: "Czech Republic",
    native: "\u010Cesk\xE1 republika"
  },
  id: LocaleCode$1.CzechCzechRepublic,
  language: {
    code: LanguageCode$1.Czech,
    name: "Czech",
    native: "\u010Ce\u0161tina"
  },
  name: "Czech (Czech Republic)",
  native_name: "\u010Ce\u0161tina (\u010Cesk\xE1 republika)",
  rtl: false
});
({
  id: LocaleCode$1.Danish,
  language: {
    code: LanguageCode$1.Danish,
    name: "Danish",
    native: "Dansk"
  },
  name: "Danish",
  native_name: "Dansk",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Denmark,
    name: "Denmark",
    native: "Danmark"
  },
  id: LocaleCode$1.DanishDenmark,
  language: {
    code: LanguageCode$1.Danish,
    name: "Danish",
    native: "Dansk"
  },
  name: "Danish (Denmark)",
  native_name: "Dansk (Danmark)",
  rtl: false
});
({
  id: LocaleCode$1.Divehi,
  language: {
    code: LanguageCode$1.Divehi,
    name: "Divehi",
    native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0"
  },
  name: "Divehi",
  native_name: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Maldives,
    name: "Maldives",
    native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC"
  },
  id: LocaleCode$1.DivehiMaldives,
  language: {
    code: LanguageCode$1.Divehi,
    name: "Divehi",
    native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0"
  },
  name: "Divehi (Maldives)",
  native_name: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0 (\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC)",
  rtl: true
});
({
  id: LocaleCode$1.Dutch,
  language: {
    code: LanguageCode$1.Dutch,
    name: "Dutch",
    native: "Nederlands"
  },
  name: "Dutch",
  native_name: "Nederlands",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Belgium,
    name: "Belgium",
    native: "Belgi\xEB"
  },
  id: LocaleCode$1.DutchBelgium,
  language: {
    code: LanguageCode$1.Dutch,
    name: "Dutch",
    native: "Nederlands"
  },
  name: "Dutch (Belgium)",
  native_name: "Nederlands (Belgi\xEB)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Netherlands,
    name: "Netherlands",
    native: "Nederland"
  },
  id: LocaleCode$1.DutchNetherlands,
  language: {
    code: LanguageCode$1.Dutch,
    name: "Dutch",
    native: "Nederlands"
  },
  name: "Dutch (Netherlands)",
  native_name: "Nederlands (Nederland)",
  rtl: false
});
({
  id: LocaleCode$1.English,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English",
  native_name: "English",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Australia,
    name: "Australia",
    native: "Australia"
  },
  id: LocaleCode$1.EnglishAustralia,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (Australia)",
  native_name: "English (Australia)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Belgium,
    name: "Belgium",
    native: "Belgi\xEB"
  },
  id: LocaleCode$1.EnglishBelgium,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (Belgium)",
  native_name: "English (Belgi\xEB)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Canada,
    name: "Canada",
    native: "Canada"
  },
  id: LocaleCode$1.EnglishCanada,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (Canada)",
  native_name: "English (Canada)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Ireland,
    name: "Ireland",
    native: "\xC9ire"
  },
  id: LocaleCode$1.EnglishIreland,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (Ireland)",
  native_name: "English (\xC9ire)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Jamaica,
    name: "Jamaica",
    native: "Jamaica"
  },
  id: LocaleCode$1.EnglishJamaica,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (Jamaica)",
  native_name: "English (Jamaica)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.NewZealand,
    name: "New Zealand",
    native: "New Zealand"
  },
  id: LocaleCode$1.EnglishNewZealand,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (New Zealand)",
  native_name: "English (New Zealand)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Philippines,
    name: "Philippines",
    native: "Philippines"
  },
  id: LocaleCode$1.EnglishPhilippines,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (Philippines)",
  native_name: "English (Philippines)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Singapore,
    name: "Singapore",
    native: "Singapore"
  },
  id: LocaleCode$1.EnglishSingapore,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (Singapore)",
  native_name: "English (Singapore)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode$1.EnglishSouthAfrica,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (South Africa)",
  native_name: "English (South Africa)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.TrinidadAndTobago,
    name: "Trinidad and Tobago",
    native: "Trinidad and Tobago"
  },
  id: LocaleCode$1.EnglishTrinidadAndTobago,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (Trinidad and Tobago)",
  native_name: "English (Trinidad and Tobago)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.UnitedKingdom,
    name: "United Kingdom",
    native: "United Kingdom"
  },
  id: LocaleCode$1.EnglishUnitedKingdom,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (United Kingdom)",
  native_name: "English (United Kingdom)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.UnitedStates,
    name: "United States",
    native: "United States"
  },
  id: LocaleCode$1.EnglishUnitedStates,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (United States)",
  native_name: "English (United States)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Zimbabwe,
    name: "Zimbabwe",
    native: "Zimbabwe"
  },
  id: LocaleCode$1.EnglishZimbabwe,
  language: {
    code: LanguageCode$1.English,
    name: "English",
    native: "English"
  },
  name: "English (Zimbabwe)",
  native_name: "English (Zimbabwe)",
  rtl: false
});
({
  id: LocaleCode$1.Esperanto,
  language: {
    code: LanguageCode$1.Esperanto,
    name: "Esperanto",
    native: "Esperanto"
  },
  name: "Esperanto",
  native_name: "Esperanto",
  rtl: false
});
({
  id: LocaleCode$1.Estonian,
  language: {
    code: LanguageCode$1.Estonian,
    name: "Estonian",
    native: "Eesti"
  },
  name: "Estonian",
  native_name: "Eesti",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Estonia,
    name: "Estonia",
    native: "Eesti"
  },
  id: LocaleCode$1.EstonianEstonia,
  language: {
    code: LanguageCode$1.Estonian,
    name: "Estonian",
    native: "Eesti"
  },
  name: "Estonian (Estonia)",
  native_name: "Eesti (Eesti)",
  rtl: false
});
({
  id: LocaleCode$1.Faroese,
  language: {
    code: LanguageCode$1.Faroese,
    name: "Faroese",
    native: "F\xF8royskt"
  },
  name: "Faroese",
  native_name: "F\xF8royskt",
  rtl: false
});
({
  country: {
    code: CountryCode$1.FaroeIslands,
    name: "Faroe Islands",
    native: "F\xF8royar"
  },
  id: LocaleCode$1.FaroeseFaroeIslands,
  language: {
    code: LanguageCode$1.Faroese,
    name: "Faroese",
    native: "F\xF8royskt"
  },
  name: "Faroese (Faroe Islands)",
  native_name: "F\xF8royskt (F\xF8royar)",
  rtl: false
});
({
  id: LocaleCode$1.Farsi,
  language: {
    code: LanguageCode$1.Farsi,
    name: "Farsi",
    native: "\u0641\u0627\u0631\u0633\u06CC"
  },
  name: "Farsi",
  native_name: "\u0641\u0627\u0631\u0633\u06CC",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Iran,
    name: "Iran",
    native: "\u0627\u06CC\u0631\u0627\u0646"
  },
  id: LocaleCode$1.FarsiIran,
  language: {
    code: LanguageCode$1.Farsi,
    name: "Farsi",
    native: "\u0641\u0627\u0631\u0633\u06CC"
  },
  name: "Farsi (Iran)",
  native_name: "\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)",
  rtl: true
});
({
  id: LocaleCode$1.Filipino,
  language: {
    code: LanguageCode$1.Filipino,
    name: "Filipino",
    native: "Filipino"
  },
  name: "Filipino",
  native_name: "Filipino",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Philippines,
    name: "Philippines",
    native: "Pilipinas"
  },
  id: LocaleCode$1.FilipinoPhilippines,
  language: {
    code: LanguageCode$1.Filipino,
    name: "Filipino",
    native: "Filipino"
  },
  name: "Filipino (Philippines)",
  native_name: "Filipino (Pilipinas)",
  rtl: false
});
({
  id: LocaleCode$1.Finnish,
  language: {
    code: LanguageCode$1.Finnish,
    name: "Finnish",
    native: "Suomi"
  },
  name: "Finnish",
  native_name: "Suomi",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Finland,
    name: "Finland",
    native: "Suomi"
  },
  id: LocaleCode$1.FinnishFinland,
  language: {
    code: LanguageCode$1.Finnish,
    name: "Finnish",
    native: "Suomi"
  },
  name: "Finnish (Finland)",
  native_name: "Suomi (Suomi)",
  rtl: false
});
({
  id: LocaleCode$1.French,
  language: {
    code: LanguageCode$1.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French",
  native_name: "Fran\xE7ais",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Belgium,
    name: "Belgium",
    native: "Belgique"
  },
  id: LocaleCode$1.FrenchBelgium,
  language: {
    code: LanguageCode$1.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Belgium)",
  native_name: "Fran\xE7ais (Belgique)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Canada,
    name: "Canada",
    native: "Canada"
  },
  id: LocaleCode$1.FrenchCanada,
  language: {
    code: LanguageCode$1.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Canada)",
  native_name: "Fran\xE7ais (Canada)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.France,
    name: "France",
    native: "France"
  },
  id: LocaleCode$1.FrenchFrance,
  language: {
    code: LanguageCode$1.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (France)",
  native_name: "Fran\xE7ais (France)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Luxembourg,
    name: "Luxembourg",
    native: "Luxembourg"
  },
  id: LocaleCode$1.FrenchLuxembourg,
  language: {
    code: LanguageCode$1.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Luxembourg)",
  native_name: "Fran\xE7ais (Luxembourg)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Monaco,
    name: "Monaco",
    native: "Monaco"
  },
  id: LocaleCode$1.FrenchMonaco,
  language: {
    code: LanguageCode$1.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Monaco)",
  native_name: "Fran\xE7ais (Monaco)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Reunion,
    name: "Reunion",
    native: "La R\xE9union"
  },
  id: LocaleCode$1.FrenchReunion,
  language: {
    code: LanguageCode$1.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Reunion)",
  native_name: "Fran\xE7ais (La R\xE9union)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Switzerland,
    name: "Switzerland",
    native: "Suisse"
  },
  id: LocaleCode$1.FrenchSwitzerland,
  language: {
    code: LanguageCode$1.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Switzerland)",
  native_name: "Fran\xE7ais (Suisse)",
  rtl: false
});
({
  id: LocaleCode$1.Frisian,
  language: {
    code: LanguageCode$1.Frisian,
    name: "Frisian",
    native: "Frysk"
  },
  name: "Frisian",
  native_name: "Frysk",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Netherlands,
    name: "Netherlands",
    native: "Nederland"
  },
  id: LocaleCode$1.FrisianNetherlands,
  language: {
    code: LanguageCode$1.Frisian,
    name: "Frisian",
    native: "Frysk"
  },
  name: "Frisian (Netherlands)",
  native_name: "Frysk (Nederland)",
  rtl: false
});
({
  id: LocaleCode$1.Galician,
  language: {
    code: LanguageCode$1.Galician,
    name: "Galician",
    native: "Galego"
  },
  name: "Galician",
  native_name: "Galego",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Spain,
    name: "Spain",
    native: "Espa\xF1a"
  },
  id: LocaleCode$1.GalicianSpain,
  language: {
    code: LanguageCode$1.Galician,
    name: "Galician",
    native: "Galego"
  },
  name: "Galician (Spain)",
  native_name: "Galego (Espa\xF1a)",
  rtl: false
});
({
  id: LocaleCode$1.Georgian,
  language: {
    code: LanguageCode$1.Georgian,
    name: "Georgian",
    native: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8"
  },
  name: "Georgian",
  native_name: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Georgia,
    name: "Georgia",
    native: "\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD"
  },
  id: LocaleCode$1.GeorgianGeorgia,
  language: {
    code: LanguageCode$1.Georgian,
    name: "Georgian",
    native: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8"
  },
  name: "Georgian (Georgia)",
  native_name: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8 (\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD)",
  rtl: false
});
({
  id: LocaleCode$1.German,
  language: {
    code: LanguageCode$1.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German",
  native_name: "Deutsch",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Austria,
    name: "Austria",
    native: "\xD6sterreich"
  },
  id: LocaleCode$1.GermanAustria,
  language: {
    code: LanguageCode$1.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Austria)",
  native_name: "Deutsch (\xD6sterreich)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Belgium,
    name: "Belgium",
    native: "Belgi\xEB"
  },
  id: LocaleCode$1.GermanBelgium,
  language: {
    code: LanguageCode$1.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Belgium)",
  native_name: "Deutsch (Belgi\xEB)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Switzerland,
    name: "Switzerland",
    native: "Suisse"
  },
  id: LocaleCode$1.GermanSwitzerland,
  language: {
    code: LanguageCode$1.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Switzerland)",
  native_name: "Deutsch (Suisse)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Liechtenstein,
    name: "Liechtenstein",
    native: "Liechtenstein"
  },
  id: LocaleCode$1.GermanLiechtenstein,
  language: {
    code: LanguageCode$1.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Liechtenstein)",
  native_name: "Deutsch (Liechtenstein)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Luxembourg,
    name: "Luxembourg",
    native: "Luxembourg"
  },
  id: LocaleCode$1.GermanLuxembourg,
  language: {
    code: LanguageCode$1.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Luxembourg)",
  native_name: "Deutsch (Luxembourg)",
  rtl: false
});
({
  id: LocaleCode$1.Greek,
  language: {
    code: LanguageCode$1.Greek,
    name: "Greek",
    native: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC"
  },
  name: "Greek",
  native_name: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Greece,
    name: "Greece",
    native: "\u0395\u03BB\u03BB\u03AC\u03B4\u03B1"
  },
  id: LocaleCode$1.GreekGreece,
  language: {
    code: LanguageCode$1.Greek,
    name: "Greek",
    native: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC"
  },
  name: "Greek (Greece)",
  native_name: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC (\u0395\u03BB\u03BB\u03AC\u03B4\u03B1)",
  rtl: false
});
({
  id: LocaleCode$1.Greenlandic,
  language: {
    code: LanguageCode$1.Greenlandic,
    name: "Greenlandic",
    native: "Kalaallisut"
  },
  name: "Greenlandic",
  native_name: "Kalaallisut",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Greenland,
    name: "Greenland",
    native: "Kalaallit Nunaat"
  },
  id: LocaleCode$1.GreenlandicGreenland,
  language: {
    code: LanguageCode$1.Greenlandic,
    name: "Greenlandic",
    native: "Kalaallisut"
  },
  name: "Greenlandic (Greenland)",
  native_name: "Kalaallisut (Kalaallit Nunaat)",
  rtl: false
});
({
  id: LocaleCode$1.Gujarati,
  language: {
    code: LanguageCode$1.Gujarati,
    name: "Gujarati",
    native: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0"
  },
  name: "Gujarati",
  native_name: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0",
  rtl: false
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode$1.GujaratiIndia,
  language: {
    code: LanguageCode$1.Gujarati,
    name: "Gujarati",
    native: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0"
  },
  name: "Gujarati (India)",
  native_name: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0 (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode$1.Hausa,
  language: {
    code: LanguageCode$1.Hausa,
    name: "Hausa",
    native: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  name: "Hausa",
  native_name: "\u0647\u064E\u0648\u064F\u0633\u064E",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Ghana,
    name: "Ghana",
    native: "Ghana"
  },
  id: LocaleCode$1.HausaGhana,
  language: {
    code: LanguageCode$1.Hausa,
    name: "Hausa",
    native: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  name: "Hausa (Ghana)",
  native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Ghana)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Niger,
    name: "Niger",
    native: "Niger"
  },
  id: LocaleCode$1.HausaNiger,
  language: {
    code: LanguageCode$1.Hausa,
    name: "Hausa",
    native: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  name: "Hausa (Niger)",
  native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Niger)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Nigeria,
    name: "Nigeria",
    native: "Nigeria"
  },
  id: LocaleCode$1.HausaNigeria,
  language: {
    code: LanguageCode$1.Hausa,
    name: "Hausa",
    native: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  name: "Hausa (Nigeria)",
  native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Nigeria)",
  rtl: false
});
({
  id: LocaleCode$1.Hebrew,
  language: {
    code: LanguageCode$1.Hebrew,
    name: "Hebrew",
    native: "\u05E2\u05D1\u05E8\u05D9\u05EA"
  },
  name: "Hebrew",
  native_name: "\u05E2\u05D1\u05E8\u05D9\u05EA",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Israel,
    name: "Hebrew",
    native: ""
  },
  id: LocaleCode$1.HebrewIsrael,
  language: {
    code: LanguageCode$1.Hebrew,
    name: "Hebrew",
    native: ""
  },
  name: "Hebrew (Israel)",
  native_name: "",
  rtl: true
});
({
  id: LocaleCode$1.Hindi,
  language: {
    code: LanguageCode$1.Hindi,
    name: "Hindi",
    native: "\u0939\u093F\u0928\u094D\u0926\u0940"
  },
  name: "Hindi",
  native_name: "\u0939\u093F\u0928\u094D\u0926\u0940",
  rtl: false
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode$1.HindiIndia,
  language: {
    code: LanguageCode$1.Hindi,
    name: "Hindi",
    native: "\u092D\u093E\u0930\u0924\u0940\u092F"
  },
  name: "Hindi (India)",
  native_name: "\u092D\u093E\u0930\u0924\u0940\u092F",
  rtl: false
});
({
  id: LocaleCode$1.Hungarian,
  language: {
    code: LanguageCode$1.Hungarian,
    name: "Hungarian",
    native: "Magyar"
  },
  name: "Hungarian",
  native_name: "Magyar",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Hungary,
    name: "Hungary",
    native: "Magyarorsz\xE1g"
  },
  id: LocaleCode$1.HungarianHungary,
  language: {
    code: LanguageCode$1.Hungarian,
    name: "Hungarian",
    native: "Magyar"
  },
  name: "Hungarian (Hungary)",
  native_name: "Magyar (Magyarorsz\xE1g)",
  rtl: false
});
({
  id: LocaleCode$1.Icelandic,
  language: {
    code: LanguageCode$1.Icelandic,
    name: "Icelandic",
    native: "\xCDslenska"
  },
  name: "Icelandic",
  native_name: "\xCDslenska",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Iceland,
    name: "Iceland",
    native: "\xCDsland"
  },
  id: LocaleCode$1.IcelandicIceland,
  language: {
    code: LanguageCode$1.Icelandic,
    name: "Icelandic",
    native: "\xCDslenska"
  },
  name: "Icelandic (Iceland)",
  native_name: "\xCDslenska (\xCDsland)",
  rtl: false
});
({
  id: LocaleCode$1.Igbo,
  language: {
    code: LanguageCode$1.Igbo,
    name: "Igbo",
    native: "Igbo"
  },
  name: "Igbo",
  native_name: "Igbo",
  rtl: false
});
({
  id: LocaleCode$1.Indonesian,
  language: {
    code: LanguageCode$1.Indonesian,
    name: "Indonesian",
    native: "Bahasa Indonesia"
  },
  name: "Indonesian",
  native_name: "Bahasa Indonesia",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Indonesia,
    name: "Indonesia",
    native: "Indonesia"
  },
  id: LocaleCode$1.IndonesianIndonesia,
  language: {
    code: LanguageCode$1.Indonesian,
    name: "Indonesian",
    native: "Bahasa Indonesia"
  },
  name: "Indonesian (Indonesia)",
  native_name: "Bahasa Indonesia (Indonesia)",
  rtl: false
});
({
  id: LocaleCode$1.Irish,
  language: {
    code: LanguageCode$1.Irish,
    name: "Irish",
    native: "Gaeilge"
  },
  name: "Irish",
  native_name: "Gaeilge",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Ireland,
    name: "Ireland",
    native: "\xC9ire"
  },
  id: LocaleCode$1.IrishIreland,
  language: {
    code: LanguageCode$1.Irish,
    name: "Irish",
    native: "Gaeilge"
  },
  name: "Irish (Ireland)",
  native_name: "Gaeilge (\xC9ire)",
  rtl: false
});
({
  id: LocaleCode$1.Italian,
  language: {
    code: LanguageCode$1.Italian,
    name: "Italian",
    native: "Italiano"
  },
  name: "Italian",
  native_name: "Italiano",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Italy,
    name: "Italy",
    native: "Italia"
  },
  id: LocaleCode$1.ItalianItaly,
  language: {
    code: LanguageCode$1.Italian,
    name: "Italian",
    native: "Italiano"
  },
  name: "Italian (Italy)",
  native_name: "Italiano (Italia)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Switzerland,
    name: "Switzerland",
    native: "Schweiz"
  },
  id: LocaleCode$1.ItalianSwitzerland,
  language: {
    code: LanguageCode$1.Italian,
    name: "Italian",
    native: "Italiano"
  },
  name: "Italian (Switzerland)",
  native_name: "Italiano (Svizzera)",
  rtl: false
});
({
  id: LocaleCode$1.Japanese,
  language: {
    code: LanguageCode$1.Japanese,
    name: "Japanese",
    native: "\u65E5\u672C\u8A9E"
  },
  name: "Japanese",
  native_name: "\u65E5\u672C\u8A9E",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Japan,
    name: "Japan",
    native: "\u65E5\u672C"
  },
  id: LocaleCode$1.JapaneseJapan,
  language: {
    code: LanguageCode$1.Japanese,
    name: "Japanese",
    native: "\u65E5\u672C\u8A9E"
  },
  name: "Japanese (Japan)",
  native_name: "\u65E5\u672C\u8A9E (\u65E5\u672C)",
  rtl: false
});
({
  id: LocaleCode$1.Kannada,
  language: {
    code: LanguageCode$1.Kannada,
    name: "Kannada",
    native: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1"
  },
  name: "Kannada",
  native_name: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1",
  rtl: false
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u0CAD\u0CBE\u0CB0\u0CA4"
  },
  id: LocaleCode$1.KannadaIndia,
  language: {
    code: LanguageCode$1.Kannada,
    name: "Kannada",
    native: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1"
  },
  name: "Kannada (India)",
  native_name: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1 (\u0CAD\u0CBE\u0CB0\u0CA4)",
  rtl: false
});
({
  id: LocaleCode$1.Kazakh,
  language: {
    code: LanguageCode$1.Kazakh,
    name: "Kazakh",
    native: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456"
  },
  name: "Kazakh",
  native_name: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Kazakhstan,
    name: "Kazakhstan",
    native: "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D"
  },
  id: LocaleCode$1.KazakhKazakhstan,
  language: {
    code: LanguageCode$1.Kazakh,
    name: "Kazakh",
    native: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456"
  },
  name: "Kazakh (Kazakhstan)",
  native_name: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)",
  rtl: false
});
({
  id: LocaleCode$1.Khmer,
  language: {
    code: LanguageCode$1.Khmer,
    name: "Khmer",
    native: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A"
  },
  name: "Khmer",
  native_name: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Cambodia,
    name: "Cambodia",
    native: "\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6"
  },
  id: LocaleCode$1.KhmerCambodia,
  language: {
    code: LanguageCode$1.Khmer,
    name: "Khmer",
    native: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A"
  },
  name: "Khmer (Cambodia)",
  native_name: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A (\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6)",
  rtl: false
});
({
  id: LocaleCode$1.Konkani,
  language: {
    code: LanguageCode$1.Konkani,
    name: "Konkani",
    native: "\u0915\u094B\u0902\u0915\u0923\u0940"
  },
  name: "Konkani",
  native_name: "\u0915\u094B\u0902\u0915\u0923\u0940",
  rtl: false
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode$1.KonkaniIndia,
  language: {
    code: LanguageCode$1.Konkani,
    name: "Konkani",
    native: "\u0915\u094B\u0902\u0915\u0923\u0940"
  },
  name: "Konkani (India)",
  native_name: "\u0915\u094B\u0902\u0915\u0923\u0940 (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode$1.Korean,
  language: {
    code: LanguageCode$1.Korean,
    name: "Korean",
    native: "\uD55C\uAD6D\uC5B4"
  },
  name: "Korean",
  native_name: "\uD55C\uAD6D\uC5B4",
  rtl: false
});
({
  country: {
    code: CountryCode$1.SouthKorea,
    name: "South Korea",
    native: "\uB300\uD55C\uBBFC\uAD6D"
  },
  id: LocaleCode$1.KoreanSouthKorea,
  language: {
    code: LanguageCode$1.Korean,
    name: "Korean",
    native: "\uD55C\uAD6D\uC5B4"
  },
  name: "Korean (South Korea)",
  native_name: "\uD55C\uAD6D\uC5B4 (\uB300\uD55C\uBBFC\uAD6D)",
  rtl: false
});
({
  id: LocaleCode$1.Kurdish,
  language: {
    code: LanguageCode$1.Kurdish,
    name: "Kurdish",
    native: "Kurd\xEE"
  },
  name: "Kurdish",
  native_name: "Kurd\xEE",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Iraq,
    name: "Iraq",
    native: "\u0627\u0644\u0639\u0631\u0627\u0642"
  },
  id: LocaleCode$1.KurdishIraq,
  language: {
    code: LanguageCode$1.Kurdish,
    name: "Kurdish",
    native: "Kurd\xEE"
  },
  name: "Kurdish (Iraq)",
  native_name: "Kurd\xEE (\u0627\u0644\u0639\u0631\u0627\u0642)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Turkey,
    name: "Turkey",
    native: "T\xFCrkiye"
  },
  id: LocaleCode$1.KurdishTurkey,
  language: {
    code: LanguageCode$1.Kurdish,
    name: "Kurdish",
    native: "Kurd\xEE"
  },
  name: "Kurdish (Turkey)",
  native_name: "Kurd\xEE (T\xFCrkiye)",
  rtl: false
});
({
  id: LocaleCode$1.Kyrgyz,
  language: {
    code: LanguageCode$1.Kyrgyz,
    name: "Kyrgyz",
    native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430"
  },
  name: "Kyrgyz",
  native_name: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Kyrgyzstan,
    name: "Kyrgyzstan",
    native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D"
  },
  id: LocaleCode$1.KyrgyzKyrgyzstan,
  language: {
    code: LanguageCode$1.Kyrgyz,
    name: "Kyrgyz",
    native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430"
  },
  name: "Kyrgyz (Kyrgyzstan)",
  native_name: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430 (\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D)",
  rtl: false
});
({
  id: LocaleCode$1.Lao,
  language: {
    code: LanguageCode$1.Lao,
    name: "Lao",
    native: "\u0EA5\u0EB2\u0EA7"
  },
  name: "Lao",
  native_name: "\u0EA5\u0EB2\u0EA7",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Laos,
    name: "Laos",
    native: "\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95"
  },
  id: LocaleCode$1.LaoLaos,
  language: {
    code: LanguageCode$1.Lao,
    name: "Lao",
    native: "\u0EA5\u0EB2\u0EA7"
  },
  name: "Lao (Laos)",
  native_name: "\u0EA5\u0EB2\u0EA7 (\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95)",
  rtl: false
});
({
  id: LocaleCode$1.Latvian,
  language: {
    code: LanguageCode$1.Latvian,
    name: "Latvian",
    native: "Latvie\u0161u"
  },
  name: "Latvian",
  native_name: "Latvie\u0161u",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Latvia,
    name: "Latvia",
    native: "Latvija"
  },
  id: LocaleCode$1.LatvianLatvia,
  language: {
    code: LanguageCode$1.Latvian,
    name: "Latvian",
    native: "Latvie\u0161u"
  },
  name: "Latvian (Latvia)",
  native_name: "Latvie\u0161u (Latvija)",
  rtl: false
});
({
  id: LocaleCode$1.Lithuanian,
  language: {
    code: LanguageCode$1.Lithuanian,
    name: "Lithuanian",
    native: "Lietuvi\u0173"
  },
  name: "Lithuanian",
  native_name: "Lietuvi\u0173",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Lithuania,
    name: "Lithuania",
    native: "Lietuva"
  },
  id: LocaleCode$1.LithuanianLithuania,
  language: {
    code: LanguageCode$1.Lithuanian,
    name: "Lithuanian",
    native: "Lietuvi\u0173"
  },
  name: "Lithuanian (Lithuania)",
  native_name: "Lietuvi\u0173 (Lietuva)",
  rtl: false
});
({
  id: LocaleCode$1.Luxembourgish,
  language: {
    code: LanguageCode$1.Luxembourgish,
    name: "Luxembourgish",
    native: "L\xEBtzebuergesch"
  },
  name: "Luxembourgish",
  native_name: "L\xEBtzebuergesch",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Belgium,
    name: "Belgium",
    native: "Belgi\xEB"
  },
  id: LocaleCode$1.LuxembourgishBelgium,
  language: {
    code: LanguageCode$1.Luxembourgish,
    name: "Luxembourgish",
    native: "L\xEBtzebuergesch"
  },
  name: "Luxembourgish (Belgium)",
  native_name: "L\xEBtzebuergesch (Belgi\xEB)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Luxembourg,
    name: "Luxembourg",
    native: "Luxembourg"
  },
  id: LocaleCode$1.LuxembourgishLuxembourg,
  language: {
    code: LanguageCode$1.Luxembourgish,
    name: "Luxembourgish",
    native: "L\xEBtzebuergesch"
  },
  name: "Luxembourgish (Luxembourg)",
  native_name: "L\xEBtzebuergesch (Luxembourg)",
  rtl: false
});
({
  id: LocaleCode$1.Macedonian,
  language: {
    code: LanguageCode$1.Macedonian,
    name: "Macedonian",
    native: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438"
  },
  name: "Macedonian",
  native_name: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438",
  rtl: false
});
({
  country: {
    code: CountryCode$1.NorthMacedonia,
    name: "Macedonia",
    native: "\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430"
  },
  id: LocaleCode$1.MacedonianNorthMacedonia,
  language: {
    code: LanguageCode$1.Macedonian,
    name: "Macedonian",
    native: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438"
  },
  name: "Macedonian (North Macedonia)",
  native_name: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 (\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430)",
  rtl: false
});
({
  id: LocaleCode$1.Malay,
  language: {
    code: LanguageCode$1.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay",
  native_name: "Bahasa Melayu",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Brunei,
    name: "Brunei",
    native: "Negara Brunei Darussalam"
  },
  id: LocaleCode$1.MalayBrunei,
  language: {
    code: LanguageCode$1.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay (Brunei)",
  native_name: "Bahasa Melayu (Negara Brunei Darussalam)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Malaysia,
    name: "Malaysia",
    native: "Malaysia"
  },
  id: LocaleCode$1.MalayMalaysia,
  language: {
    code: LanguageCode$1.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay (Malaysia)",
  native_name: "Bahasa Melayu (Malaysia)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Singapore,
    name: "Singapore",
    native: "Singapore"
  },
  id: LocaleCode$1.MalaySingapore,
  language: {
    code: LanguageCode$1.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay (Singapore)",
  native_name: "Bahasa Melayu (Singapore)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode$1.MalayIndia,
  language: {
    code: LanguageCode$1.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay (India)",
  native_name: "Bahasa Melayu (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode$1.Maltese,
  language: {
    code: LanguageCode$1.Maltese,
    name: "Maltese",
    native: "Malti"
  },
  name: "Maltese",
  native_name: "Malti",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Malta,
    name: "Malta",
    native: "Malta"
  },
  id: LocaleCode$1.MalteseMalta,
  language: {
    code: LanguageCode$1.Maltese,
    name: "Maltese",
    native: "Malti"
  },
  name: "Maltese (Malta)",
  native_name: "Malti (Malta)",
  rtl: false
});
({
  id: LocaleCode$1.Maori,
  language: {
    code: LanguageCode$1.Maori,
    name: "Maori",
    native: "M\u0101ori"
  },
  name: "Maori",
  native_name: "M\u0101ori",
  rtl: false
});
({
  country: {
    code: CountryCode$1.NewZealand,
    name: "New Zealand",
    native: "New Zealand"
  },
  id: LocaleCode$1.MaoriNewZealand,
  language: {
    code: LanguageCode$1.Maori,
    name: "Maori",
    native: "M\u0101ori"
  },
  name: "Maori (New Zealand)",
  native_name: "M\u0101ori (New Zealand)",
  rtl: false
});
({
  id: LocaleCode$1.Marathi,
  language: {
    code: LanguageCode$1.Marathi,
    name: "Marathi",
    native: "\u092E\u0930\u093E\u0920\u0940"
  },
  name: "Marathi",
  native_name: "\u092E\u0930\u093E\u0920\u0940",
  rtl: false
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode$1.MarathiIndia,
  language: {
    code: LanguageCode$1.Marathi,
    name: "Marathi",
    native: "\u092E\u0930\u093E\u0920\u0940"
  },
  name: "Marathi (India)",
  native_name: "\u092E\u0930\u093E\u0920\u0940 (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode$1.Mongolian,
  language: {
    code: LanguageCode$1.Mongolian,
    name: "Mongolian",
    native: "\u041C\u043E\u043D\u0433\u043E\u043B"
  },
  name: "Mongolian",
  native_name: "\u041C\u043E\u043D\u0433\u043E\u043B",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Mongolia,
    name: "Mongolia",
    native: "\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441"
  },
  id: LocaleCode$1.MongolianMongolia,
  language: {
    code: LanguageCode$1.Mongolian,
    name: "Mongolian",
    native: "\u041C\u043E\u043D\u0433\u043E\u043B"
  },
  name: "Mongolian (Mongolia)",
  native_name: "\u041C\u043E\u043D\u0433\u043E\u043B (\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441)",
  rtl: false
});
({
  id: LocaleCode$1.Montenegrin,
  language: {
    code: LanguageCode$1.Montenegrin,
    name: "Montenegrin",
    native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A"
  },
  name: "Montenegrin",
  native_name: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Montenegro,
    name: "Montenegro",
    native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A"
  },
  id: LocaleCode$1.MontenegrinMontenegro,
  language: {
    code: LanguageCode$1.Montenegrin,
    name: "Montenegrin",
    native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A"
  },
  name: "Montenegrin (Montenegro)",
  native_name: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A (\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A)",
  rtl: false
});
({
  id: LocaleCode$1.Nepali,
  language: {
    code: LanguageCode$1.Nepali,
    name: "Nepali",
    native: "\u0928\u0947\u092A\u093E\u0932\u0940"
  },
  name: "Nepali",
  native_name: "\u0928\u0947\u092A\u093E\u0932\u0940",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Nepal,
    name: "Nepal",
    native: "\u0928\u0947\u092A\u093E\u0932"
  },
  id: LocaleCode$1.NepaliNepal,
  language: {
    code: LanguageCode$1.Nepali,
    name: "Nepali",
    native: "\u0928\u0947\u092A\u093E\u0932\u0940"
  },
  name: "Nepali (Nepal)",
  native_name: "\u0928\u0947\u092A\u093E\u0932\u0940 (\u0928\u0947\u092A\u093E\u0932)",
  rtl: false
});
({
  id: LocaleCode$1.NorthernSotho,
  language: {
    code: LanguageCode$1.NorthernSotho,
    name: "Northern Sotho",
    native: "Sesotho sa Leboa"
  },
  name: "Northern Sotho",
  native_name: "Sesotho sa Leboa",
  rtl: false
});
({
  country: {
    code: CountryCode$1.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode$1.NorthernSothoSouthAfrica,
  language: {
    code: LanguageCode$1.NorthernSotho,
    name: "Northern Sotho",
    native: "Sesotho sa Leboa"
  },
  name: "Northern Sotho (South Africa)",
  native_name: "Sesotho sa Leboa (South Africa)",
  rtl: false
});
({
  id: LocaleCode$1.Norwegian,
  language: {
    code: LanguageCode$1.Norwegian,
    name: "Norwegian",
    native: "Norsk"
  },
  name: "Norwegian",
  native_name: "Norsk",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Norway,
    name: "Norway",
    native: "Norge"
  },
  id: LocaleCode$1.NorwegianBokmalNorway,
  language: {
    code: LanguageCode$1.NorwegianBokmal,
    name: "Norwegian",
    native: "Norsk"
  },
  name: "Norwegian (Bokmal)",
  native_name: "Norsk (Bokm\xE5l)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Norway,
    name: "Norway",
    native: "Norge"
  },
  id: LocaleCode$1.NorwegianNynorskNorway,
  language: {
    code: LanguageCode$1.NorwegianNynorsk,
    name: "Norwegian",
    native: "Norsk"
  },
  name: "Norwegian (Nynorsk)",
  native_name: "Norsk (Nynorsk)",
  rtl: false
});
({
  id: LocaleCode$1.Oriya,
  language: {
    code: LanguageCode$1.Oriya,
    name: "Oriya",
    native: "\u0B13\u0B21\u0B3C\u0B3F\u0B06"
  },
  name: "Oriya",
  native_name: "\u0B13\u0B21\u0B3C\u0B3F\u0B06",
  rtl: false
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
  },
  id: LocaleCode$1.OriyaIndia,
  language: {
    code: LanguageCode$1.Oriya,
    name: "Oriya",
    native: "\u0B13\u0B21\u0B3C\u0B3F\u0B06"
  },
  name: "Oriya (India)",
  native_name: "\u0B13\u0B21\u0B3C\u0B3F\u0B06 (\u0B2D\u0B3E\u0B30\u0B24)",
  rtl: false
});
({
  id: LocaleCode$1.Pashto,
  language: {
    code: LanguageCode$1.Pashto,
    name: "Pashto",
    native: "\u067E\u069A\u062A\u0648"
  },
  name: "Pashto",
  native_name: "\u067E\u069A\u062A\u0648",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Afghanistan,
    name: "Afghanistan",
    native: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
  },
  id: LocaleCode$1.PashtoAfghanistan,
  language: {
    code: LanguageCode$1.Pashto,
    name: "Pashto",
    native: "\u067E\u069A\u062A\u0648"
  },
  name: "Pashto (Afghanistan)",
  native_name: "\u067E\u069A\u062A\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)",
  rtl: true
});
({
  id: LocaleCode$1.Persian,
  language: {
    code: LanguageCode$1.Persian,
    name: "Persian",
    native: "\u0641\u0627\u0631\u0633\u06CC"
  },
  name: "Persian",
  native_name: "\u0641\u0627\u0631\u0633\u06CC",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Iran,
    name: "Iran",
    native: "\u0627\u06CC\u0631\u0627\u0646"
  },
  id: LocaleCode$1.PersianIran,
  language: {
    code: LanguageCode$1.Persian,
    name: "Persian",
    native: "\u0641\u0627\u0631\u0633\u06CC"
  },
  name: "Persian (Iran)",
  native_name: "\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)",
  rtl: true
});
({
  id: LocaleCode$1.Polish,
  language: {
    code: LanguageCode$1.Polish,
    name: "Polish",
    native: "Polski"
  },
  name: "Polish",
  native_name: "Polski",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Poland,
    name: "Poland",
    native: "Polska"
  },
  id: LocaleCode$1.PolishPoland,
  language: {
    code: LanguageCode$1.Polish,
    name: "Polish",
    native: "Polski"
  },
  name: "Polish (Poland)",
  native_name: "Polski (Polska)",
  rtl: false
});
({
  id: LocaleCode$1.Portuguese,
  language: {
    code: LanguageCode$1.Portuguese,
    name: "Portuguese",
    native: "Portugu\xEAs"
  },
  name: "Portuguese",
  native_name: "Portugu\xEAs",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Brazil,
    name: "Brazil",
    native: "Brasil"
  },
  id: LocaleCode$1.PortugueseBrazil,
  language: {
    code: LanguageCode$1.Portuguese,
    name: "Portuguese",
    native: "Portugu\xEAs"
  },
  name: "Portuguese (Brazil)",
  native_name: "Portugu\xEAs (Brasil)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Portugal,
    name: "Portugal",
    native: "Portugal"
  },
  id: LocaleCode$1.PortuguesePortugal,
  language: {
    code: LanguageCode$1.Portuguese,
    name: "Portuguese",
    native: "Portugu\xEAs"
  },
  name: "Portuguese (Portugal)",
  native_name: "Portugu\xEAs (Portugal)",
  rtl: false
});
({
  id: LocaleCode$1.Punjabi,
  language: {
    code: LanguageCode$1.Punjabi,
    name: "Punjabi",
    native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40"
  },
  name: "Punjabi",
  native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Pakistan,
    name: "Pakistan",
    native: "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646"
  },
  id: LocaleCode$1.PunjabiPakistan,
  language: {
    code: LanguageCode$1.Punjabi,
    name: "Punjabi",
    native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40"
  },
  name: "Punjabi (Pakistan)",
  native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u0A2D\u0A3E\u0A30\u0A24"
  },
  id: LocaleCode$1.PunjabiIndia,
  language: {
    code: LanguageCode$1.Punjabi,
    name: "Punjabi",
    native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40"
  },
  name: "Punjabi (India)",
  native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u0A2D\u0A3E\u0A30\u0A24)",
  rtl: true
});
({
  id: LocaleCode$1.Quechua,
  language: {
    code: LanguageCode$1.Quechua,
    name: "Quechua",
    native: "Runa Simi"
  },
  name: "Quechua",
  native_name: "Runa Simi",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Bolivia,
    name: "Bolivia",
    native: "Bolivia"
  },
  id: LocaleCode$1.QuechuaBolivia,
  language: {
    code: LanguageCode$1.Quechua,
    name: "Quechua",
    native: "Runa Simi"
  },
  name: "Quechua (Bolivia)",
  native_name: "Runa Simi (Bolivia)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Ecuador,
    name: "Ecuador",
    native: "Ecuador"
  },
  id: LocaleCode$1.QuechuaEcuador,
  language: {
    code: LanguageCode$1.Quechua,
    name: "Quechua",
    native: "Runa Simi"
  },
  name: "Quechua (Ecuador)",
  native_name: "Runa Simi (Ecuador)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Peru,
    name: "Peru",
    native: "Per\xFA"
  },
  id: LocaleCode$1.QuechuaPeru,
  language: {
    code: LanguageCode$1.Quechua,
    name: "Quechua",
    native: "Runa Simi"
  },
  name: "Quechua (Peru)",
  native_name: "Runa Simi (Per\xFA)",
  rtl: false
});
({
  id: LocaleCode$1.Romanian,
  language: {
    code: LanguageCode$1.Romanian,
    name: "Romanian",
    native: "Rom\xE2n\u0103"
  },
  name: "Romanian",
  native_name: "Rom\xE2n\u0103",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Romania,
    name: "Romania",
    native: "Rom\xE2nia"
  },
  id: LocaleCode$1.RomanianRomania,
  language: {
    code: LanguageCode$1.Romanian,
    name: "Romanian",
    native: "Rom\xE2n\u0103"
  },
  name: "Romanian (Romania)",
  native_name: "Rom\xE2n\u0103 (Rom\xE2nia)",
  rtl: false
});
({
  id: LocaleCode$1.Russian,
  language: {
    code: LanguageCode$1.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439",
  rtl: false
});
({
  country: {
    code: CountryCode$1.RussianFederation,
    name: "Russian Federation",
    native: "\u0420\u043E\u0441\u0441\u0438\u044F"
  },
  id: LocaleCode$1.RussianRussia,
  language: {
    code: LanguageCode$1.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian (Russia)",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0420\u043E\u0441\u0441\u0438\u044F)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Ukraine,
    name: "Ukraine",
    native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0430"
  },
  id: LocaleCode$1.RussianUkraine,
  language: {
    code: LanguageCode$1.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian (Ukraine)",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Kazakhstan,
    name: "Kazakhstan",
    native: "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D"
  },
  id: LocaleCode$1.RussianKazakhstan,
  language: {
    code: LanguageCode$1.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian (Kazakhstan)",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Kyrgyzstan,
    name: "Kyrgyzstan",
    native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430"
  },
  id: LocaleCode$1.RussianKyrgyzstan,
  language: {
    code: LanguageCode$1.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian (Kyrgyzstan)",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430)",
  rtl: false
});
({
  id: LocaleCode$1.Sanskrit,
  language: {
    code: LanguageCode$1.Sanskrit,
    name: "Sanskrit",
    native: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D"
  },
  name: "Sanskrit",
  native_name: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D",
  rtl: false
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode$1.SanskritIndia,
  language: {
    code: LanguageCode$1.Sanskrit,
    name: "Sanskrit",
    native: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D"
  },
  name: "Sanskrit (India)",
  native_name: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode$1.Sami,
  language: {
    code: LanguageCode$1.Sami,
    name: "Sami",
    native: "S\xE1megiella"
  },
  name: "Sami",
  native_name: "S\xE1megiella",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Finland,
    name: "Finland",
    native: "Suomi"
  },
  id: LocaleCode$1.SamiFinland,
  language: {
    code: LanguageCode$1.Sami,
    name: "Sami",
    native: "S\xE1megiella"
  },
  name: "Sami (Finland)",
  native_name: "S\xE1megiella (Suomi)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Norway,
    name: "Norway",
    native: "Norge"
  },
  id: LocaleCode$1.SamiNorway,
  language: {
    code: LanguageCode$1.Sami,
    name: "Sami",
    native: "S\xE1megiella"
  },
  name: "Sami (Norway)",
  native_name: "S\xE1megiella (Norge)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Sweden,
    name: "Sweden",
    native: "Sverige"
  },
  id: LocaleCode$1.SamiSweden,
  language: {
    code: LanguageCode$1.Sami,
    name: "Sami",
    native: "S\xE1megiella"
  },
  name: "Sami (Sweden)",
  native_name: "S\xE1megiella (Sverige)",
  rtl: false
});
({
  id: LocaleCode$1.Samoan,
  language: {
    code: LanguageCode$1.Samoan,
    name: "Samoan",
    native: "Gagana fa\u2019a S\u0101moa"
  },
  name: "Samoan",
  native_name: "Gagana fa\u2019a S\u0101moa",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Samoa,
    name: "Samoa",
    native: "Samoa"
  },
  id: LocaleCode$1.SamoanSamoa,
  language: {
    code: LanguageCode$1.Samoan,
    name: "Samoan",
    native: "Gagana fa\u2019a S\u0101moa"
  },
  name: "Samoan (Samoa)",
  native_name: "Gagana fa\u2019a S\u0101moa (Samoa)",
  rtl: false
});
({
  id: LocaleCode$1.Serbian,
  language: {
    code: LanguageCode$1.Serbian,
    name: "Serbian (Latin)",
    native: "Srpski (Latinica)"
  },
  name: "Serbian (Latin)",
  native_name: "Srpski (Latinica)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.BosniaAndHerzegovina,
    name: "Bosnia and Herzegovina",
    native: "Bosna i Hercegovina"
  },
  id: LocaleCode$1.SerbianBosniaAndHerzegovina,
  language: {
    code: LanguageCode$1.Serbian,
    name: "Serbian (Latin)",
    native: "Srpski (Latinica)"
  },
  name: "Serbian (Latin) (Bosnia and Herzegovina)",
  native_name: "Srpski (Latinica) (Bosna i Hercegovina)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.SerbiaAndMontenegro,
    name: "Serbia and Montenegro",
    native: "Srbija i Crna Gora"
  },
  id: LocaleCode$1.SerbianSerbiaAndMontenegro,
  language: {
    code: LanguageCode$1.Serbian,
    name: "Serbian (Latin)",
    native: "Srpski (Latinica)"
  },
  name: "Serbian (Latin) (Serbia and Montenegro)",
  native_name: "Srpski (Latinica) (Srbija i Crna Gora)",
  rtl: false
});
({
  id: LocaleCode$1.SerbianCyrillic,
  language: {
    code: LanguageCode$1.SerbianCyrillic,
    name: "Serbian",
    native: "\u0421\u0440\u043F\u0441\u043A\u0438"
  },
  name: "Serbian (Cyrillic)",
  native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.BosniaAndHerzegovina,
    name: "Bosnia and Herzegovina",
    native: "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430"
  },
  id: LocaleCode$1.SerbianCyrillicBosniaAndHerzegovina,
  language: {
    code: LanguageCode$1.SerbianCyrillic,
    name: "Serbian",
    native: "\u0421\u0440\u043F\u0441\u043A\u0438"
  },
  name: "Serbian (Cyrillic, Bosnia and Herzegovina)",
  native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.SerbiaAndMontenegro,
    name: "Serbia and Montenegro",
    native: "\u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430"
  },
  id: LocaleCode$1.SerbianCyrillicSerbiaAndMontenegro,
  language: {
    code: LanguageCode$1.SerbianCyrillic,
    name: "Serbian",
    native: "\u0421\u0440\u043F\u0441\u043A\u0438"
  },
  name: "Serbian (Cyrillic, Serbia and Montenegro)",
  native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430)",
  rtl: false
});
({
  id: LocaleCode$1.Slovak,
  language: {
    code: LanguageCode$1.Slovak,
    name: "Slovak",
    native: "Sloven\u010Dina"
  },
  name: "Slovak",
  native_name: "Sloven\u010Dina",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Slovakia,
    name: "Slovakia",
    native: "Slovensko"
  },
  id: LocaleCode$1.SlovakSlovakia,
  language: {
    code: LanguageCode$1.Slovak,
    name: "Slovak",
    native: "Sloven\u010Dina"
  },
  name: "Slovak (Slovakia)",
  native_name: "Sloven\u010Dina (Slovensko)",
  rtl: false
});
({
  id: LocaleCode$1.Slovenian,
  language: {
    code: LanguageCode$1.Slovenian,
    name: "Slovenian",
    native: "Sloven\u0161\u010Dina"
  },
  name: "Slovenian",
  native_name: "Sloven\u0161\u010Dina",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Slovenia,
    name: "Slovenia",
    native: "Slovenija"
  },
  id: LocaleCode$1.SlovenianSlovenia,
  language: {
    code: LanguageCode$1.Slovenian,
    name: "Slovenian",
    native: "Sloven\u0161\u010Dina"
  },
  name: "Slovenian (Slovenia)",
  native_name: "Sloven\u0161\u010Dina (Slovenija)",
  rtl: false
});
({
  id: LocaleCode$1.Somali,
  language: {
    code: LanguageCode$1.Somali,
    name: "Somali",
    native: "Soomaaliga"
  },
  name: "Somali",
  native_name: "Soomaaliga",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Somalia,
    name: "Somalia",
    native: "Soomaaliya"
  },
  id: LocaleCode$1.SomaliSomalia,
  language: {
    code: LanguageCode$1.Somali,
    name: "Somali",
    native: "Soomaaliga"
  },
  name: "Somali (Somalia)",
  native_name: "Soomaaliga (Soomaaliya)",
  rtl: true
});
({
  id: LocaleCode$1.Spanish,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish",
  native_name: "Espa\xF1ol",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Argentina,
    name: "Argentina",
    native: "Argentina"
  },
  id: LocaleCode$1.SpanishArgentina,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Argentina)",
  native_name: "Espa\xF1ol (Argentina)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Bolivia,
    name: "Bolivia",
    native: "Bolivia"
  },
  id: LocaleCode$1.SpanishBolivia,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Bolivia)",
  native_name: "Espa\xF1ol (Bolivia)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Chile,
    name: "Chile",
    native: "Chile"
  },
  id: LocaleCode$1.SpanishChile,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Chile)",
  native_name: "Espa\xF1ol (Chile)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Colombia,
    name: "Colombia",
    native: "Colombia"
  },
  id: LocaleCode$1.SpanishColombia,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Colombia)",
  native_name: "Espa\xF1ol (Colombia)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.CostaRica,
    name: "Costa Rica",
    native: "Costa Rica"
  },
  id: LocaleCode$1.SpanishCostaRica,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Costa Rica)",
  native_name: "Espa\xF1ol (Costa Rica)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Cuba,
    name: "Cuba",
    native: "Cuba"
  },
  id: LocaleCode$1.SpanishCuba,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Cuba)",
  native_name: "Espa\xF1ol (Cuba)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.DominicanRepublic,
    name: "Dominican Republic",
    native: "Rep\xFAblica Dominicana"
  },
  id: LocaleCode$1.SpanishDominicanRepublic,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Dominican Republic)",
  native_name: "Espa\xF1ol (Rep\xFAblica Dominicana)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Ecuador,
    name: "Ecuador",
    native: "Ecuador"
  },
  id: LocaleCode$1.SpanishEcuador,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Ecuador)",
  native_name: "Espa\xF1ol (Ecuador)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.ElSalvador,
    name: "El Salvador",
    native: "El Salvador"
  },
  id: LocaleCode$1.SpanishElSalvador,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (El Salvador)",
  native_name: "Espa\xF1ol (El Salvador)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.EquatorialGuinea,
    name: "Equatorial Guinea",
    native: "Guinea Ecuatorial"
  },
  id: LocaleCode$1.SpanishEquatorialGuinea,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Equatorial Guinea)",
  native_name: "Espa\xF1ol (Guinea Ecuatorial)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Guatemala,
    name: "Guatemala",
    native: "Guatemala"
  },
  id: LocaleCode$1.SpanishGuatemala,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Guatemala)",
  native_name: "Espa\xF1ol (Guatemala)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Honduras,
    name: "Honduras",
    native: "Honduras"
  },
  id: LocaleCode$1.SpanishHonduras,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Honduras)",
  native_name: "Espa\xF1ol (Honduras)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Mexico,
    name: "Mexico",
    native: "M\xE9xico"
  },
  id: LocaleCode$1.SpanishMexico,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Mexico)",
  native_name: "Espa\xF1ol (M\xE9xico)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Nicaragua,
    name: "Nicaragua",
    native: "Nicaragua"
  },
  id: LocaleCode$1.SpanishNicaragua,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Nicaragua)",
  native_name: "Espa\xF1ol (Nicaragua)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Panama,
    name: "Panama",
    native: "Panam\xE1"
  },
  id: LocaleCode$1.SpanishPanama,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Panama)",
  native_name: "Espa\xF1ol (Panam\xE1)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Paraguay,
    name: "Paraguay",
    native: "Paraguay"
  },
  id: LocaleCode$1.SpanishParaguay,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Paraguay)",
  native_name: "Espa\xF1ol (Paraguay)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Peru,
    name: "Peru",
    native: "Per\xFA"
  },
  id: LocaleCode$1.SpanishPeru,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Peru)",
  native_name: "Espa\xF1ol (Per\xFA)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.PuertoRico,
    name: "Puerto Rico",
    native: "Puerto Rico"
  },
  id: LocaleCode$1.SpanishPuertoRico,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Puerto Rico)",
  native_name: "Espa\xF1ol (Puerto Rico)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Uruguay,
    name: "Uruguay",
    native: "Uruguay"
  },
  id: LocaleCode$1.SpanishUruguay,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Uruguay)",
  native_name: "Espa\xF1ol (Uruguay)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Venezuela,
    name: "Venezuela",
    native: "Venezuela"
  },
  id: LocaleCode$1.SpanishVenezuela,
  language: {
    code: LanguageCode$1.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Venezuela)",
  native_name: "Espa\xF1ol (Venezuela)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode$1.SutuSouthAfrica,
  language: {
    code: LanguageCode$1.Sutu,
    name: "Sutu",
    native: "Sesotho"
  },
  name: "Sutu (South Africa)",
  native_name: "Sesotho (Afrika Borwa)",
  rtl: false
});
({
  id: LocaleCode$1.Swahili,
  language: {
    code: LanguageCode$1.Swahili,
    name: "Swahili",
    native: "Kiswahili"
  },
  name: "Swahili",
  native_name: "Kiswahili",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Kenya,
    name: "Kenya",
    native: "Kenya"
  },
  id: LocaleCode$1.SwahiliKenya,
  language: {
    code: LanguageCode$1.Swahili,
    name: "Swahili",
    native: "Kiswahili"
  },
  name: "Swahili (Kenya)",
  native_name: "Kiswahili (Kenya)",
  rtl: false
});
({
  id: LocaleCode$1.Swedish,
  language: {
    code: LanguageCode$1.Swedish,
    name: "Swedish",
    native: "Svenska"
  },
  name: "Swedish",
  native_name: "Svenska",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Finland,
    name: "Finland",
    native: "Suomi"
  },
  id: LocaleCode$1.SwedishFinland,
  language: {
    code: LanguageCode$1.Swedish,
    name: "Swedish",
    native: "Svenska"
  },
  name: "Swedish (Finland)",
  native_name: "Svenska (Finland)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Sweden,
    name: "Sweden",
    native: "Sverige"
  },
  id: LocaleCode$1.SwedishSweden,
  language: {
    code: LanguageCode$1.Swedish,
    name: "Swedish",
    native: "Svenska"
  },
  name: "Swedish (Sweden)",
  native_name: "Svenska (Sverige)",
  rtl: false
});
({
  id: LocaleCode$1.Syriac,
  language: {
    code: LanguageCode$1.Syriac,
    name: "Syriac",
    native: "\u0723\u0718\u072A\u071D\u071D\u0710"
  },
  name: "Syriac",
  native_name: "\u0723\u0718\u072A\u071D\u071D\u0710",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Syria,
    name: "Syria",
    native: "\u0633\u0648\u0631\u064A\u0627"
  },
  id: LocaleCode$1.SyriacSyria,
  language: {
    code: LanguageCode$1.Syriac,
    name: "Syriac",
    native: "\u0723\u0718\u072A\u071D\u071D\u0710"
  },
  name: "Syriac (Syria)",
  native_name: "\u0723\u0718\u072A\u071D\u071D\u0710 (\u0633\u0648\u0631\u064A\u0627)",
  rtl: true
});
({
  id: LocaleCode$1.Tajik,
  language: {
    code: LanguageCode$1.Tajik,
    name: "Tajik",
    native: "\u0422\u043E\u04B7\u0438\u043A\u04E3"
  },
  name: "Tajik",
  native_name: "\u0422\u043E\u04B7\u0438\u043A\u04E3",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Tajikistan,
    name: "Tajikistan",
    native: "\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D"
  },
  id: LocaleCode$1.TajikTajikistan,
  language: {
    code: LanguageCode$1.Tajik,
    name: "Tajik",
    native: "\u0422\u043E\u04B7\u0438\u043A\u04E3"
  },
  name: "Tajik (Tajikistan)",
  native_name: "\u0422\u043E\u04B7\u0438\u043A\u04E3 (\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D)",
  rtl: false
});
({
  id: LocaleCode$1.Tagalog,
  language: {
    code: LanguageCode$1.Tagalog,
    name: "Tagalog",
    native: "Tagalog"
  },
  name: "Tagalog",
  native_name: "Tagalog",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Philippines,
    name: "Philippines",
    native: "Pilipinas"
  },
  id: LocaleCode$1.TagalogPhilippines,
  language: {
    code: LanguageCode$1.Tagalog,
    name: "Tagalog",
    native: "Tagalog"
  },
  name: "Tagalog (Philippines)",
  native_name: "Tagalog (Pilipinas)",
  rtl: false
});
({
  id: LocaleCode$1.Tamil,
  language: {
    code: LanguageCode$1.Tamil,
    name: "Tamil",
    native: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD"
  },
  name: "Tamil",
  native_name: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD",
  rtl: false
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
  },
  id: LocaleCode$1.TamilIndia,
  language: {
    code: LanguageCode$1.Tamil,
    name: "Tamil",
    native: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD"
  },
  name: "Tamil (India)",
  native_name: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)",
  rtl: false
});
({
  id: LocaleCode$1.Telugu,
  language: {
    code: LanguageCode$1.Telugu,
    name: "Telugu",
    native: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41"
  },
  name: "Telugu",
  native_name: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41",
  rtl: false
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02"
  },
  id: LocaleCode$1.TeluguIndia,
  language: {
    code: LanguageCode$1.Telugu,
    name: "Telugu",
    native: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41"
  },
  name: "Telugu (India)",
  native_name: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41 (\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02)",
  rtl: false
});
({
  id: LocaleCode$1.Thai,
  language: {
    code: LanguageCode$1.Thai,
    name: "Thai",
    native: "\u0E44\u0E17\u0E22"
  },
  name: "Thai",
  native_name: "\u0E44\u0E17\u0E22",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Thailand,
    name: "Thailand",
    native: "\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22"
  },
  id: LocaleCode$1.ThaiThailand,
  language: {
    code: LanguageCode$1.Thai,
    name: "Thai",
    native: "\u0E44\u0E17\u0E22"
  },
  name: "Thai (Thailand)",
  native_name: "\u0E44\u0E17\u0E22 (\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22)",
  rtl: false
});
({
  id: LocaleCode$1.Tibetan,
  language: {
    code: LanguageCode$1.Tibetan,
    name: "Tibetan",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Tibetan",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42",
  rtl: false
});
({
  country: {
    code: CountryCode$1.China,
    name: "China",
    native: "\u4E2D\u56FD"
  },
  id: LocaleCode$1.TibetanChina,
  language: {
    code: LanguageCode$1.Tibetan,
    name: "Tibetan",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Tibetan (China)",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Bhutan,
    name: "Bhutan",
    native: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D"
  },
  id: LocaleCode$1.TibetanBhutan,
  language: {
    code: LanguageCode$1.Tibetan,
    name: "Tibetan",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Tibetan (Bhutan)",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
  },
  id: LocaleCode$1.TibetanIndia,
  language: {
    code: LanguageCode$1.Tibetan,
    name: "Tibetan",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Tibetan (India)",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)",
  rtl: false
});
({
  id: LocaleCode$1.Tsonga,
  language: {
    code: LanguageCode$1.Tsonga,
    name: "Tsonga",
    native: "Xitsonga"
  },
  name: "Tsonga",
  native_name: "Xitsonga",
  rtl: false
});
({
  id: LocaleCode$1.Tswana,
  language: {
    code: LanguageCode$1.Tswana,
    name: "Tswana",
    native: "Setswana"
  },
  name: "Tswana",
  native_name: "Setswana",
  rtl: false
});
({
  country: {
    code: CountryCode$1.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode$1.TswanaSouthAfrica,
  language: {
    code: LanguageCode$1.Tswana,
    name: "Tswana",
    native: "Setswana"
  },
  name: "Tswana (South Africa)",
  native_name: "Setswana (South Africa)",
  rtl: false
});
({
  id: LocaleCode$1.Turkish,
  language: {
    code: LanguageCode$1.Turkish,
    name: "Turkish",
    native: "T\xFCrk\xE7e"
  },
  name: "Turkish",
  native_name: "T\xFCrk\xE7e",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Turkey,
    name: "Turkey",
    native: "T\xFCrkiye"
  },
  id: LocaleCode$1.TurkishTurkey,
  language: {
    code: LanguageCode$1.Turkish,
    name: "Turkish",
    native: "T\xFCrk\xE7e"
  },
  name: "Turkish (Turkey)",
  native_name: "T\xFCrk\xE7e (T\xFCrkiye)",
  rtl: false
});
({
  id: LocaleCode$1.Ukrainian,
  language: {
    code: LanguageCode$1.Ukrainian,
    name: "Ukrainian",
    native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430"
  },
  name: "Ukrainian",
  native_name: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Ukraine,
    name: "Ukraine",
    native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0430"
  },
  id: LocaleCode$1.UkrainianUkraine,
  language: {
    code: LanguageCode$1.Ukrainian,
    name: "Ukrainian",
    native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430"
  },
  name: "Ukrainian (Ukraine)",
  native_name: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)",
  rtl: false
});
({
  id: LocaleCode$1.Urdu,
  language: {
    code: LanguageCode$1.Urdu,
    name: "Urdu",
    native: "\u0627\u0631\u062F\u0648"
  },
  name: "Urdu",
  native_name: "\u0627\u0631\u062F\u0648",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Afghanistan,
    name: "Afghanistan",
    native: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
  },
  id: LocaleCode$1.UrduAfghanistan,
  language: {
    code: LanguageCode$1.Urdu,
    name: "Urdu",
    native: "\u0627\u0631\u062F\u0648"
  },
  name: "Urdu (Afghanistan)",
  native_name: "\u0627\u0631\u062F\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode$1.UrduIndia,
  language: {
    code: LanguageCode$1.Urdu,
    name: "Urdu",
    native: "\u0627\u0631\u062F\u0648"
  },
  name: "Urdu (India)",
  native_name: "\u0627\u0631\u062F\u0648 (\u092D\u093E\u0930\u0924)",
  rtl: true
});
({
  country: {
    code: CountryCode$1.Pakistan,
    name: "Pakistan",
    native: "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646"
  },
  id: LocaleCode$1.UrduPakistan,
  language: {
    code: LanguageCode$1.Urdu,
    name: "Urdu",
    native: "\u0627\u0631\u062F\u0648"
  },
  name: "Urdu (Pakistan)",
  native_name: "\u0627\u0631\u062F\u0648 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)",
  rtl: true
});
({
  id: LocaleCode$1.Uzbek,
  language: {
    code: LanguageCode$1.Uzbek,
    name: "Uzbek",
    native: "O\u02BBzbekcha"
  },
  name: "Uzbek",
  native_name: "O\u02BBzbekcha",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Uzbekistan,
    name: "Uzbekistan",
    native: "O\u02BBzbekiston"
  },
  id: LocaleCode$1.UzbekUzbekistan,
  language: {
    code: LanguageCode$1.Uzbek,
    name: "Uzbek",
    native: "O\u02BBzbekcha"
  },
  name: "Uzbek (Latin, Uzbekistan)",
  native_name: "O\u02BBzbekcha (O\u02BBzbekiston)",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Uzbekistan,
    name: "Uzbekistan",
    native: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D"
  },
  id: LocaleCode$1.UzbekCyrillic,
  language: {
    code: LanguageCode$1.Uzbek,
    name: "Uzbek",
    native: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D"
  },
  name: "Uzbek (Cyrillic)",
  native_name: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D (\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D)",
  rtl: false
});
({
  id: LocaleCode$1.Vietnamese,
  language: {
    code: LanguageCode$1.Vietnamese,
    name: "Vietnamese",
    native: "Ti\u1EBFng Vi\u1EC7t"
  },
  name: "Vietnamese",
  native_name: "Ti\u1EBFng Vi\u1EC7t",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Vietnam,
    name: "Vietnam",
    native: "Vi\u1EC7t Nam"
  },
  id: LocaleCode$1.VietnameseVietnam,
  language: {
    code: LanguageCode$1.Vietnamese,
    name: "Vietnamese",
    native: "Ti\u1EBFng Vi\u1EC7t"
  },
  name: "Vietnamese (Vietnam)",
  native_name: "Ti\u1EBFng Vi\u1EC7t (Vi\u1EC7t Nam)",
  rtl: false
});
({
  id: LocaleCode$1.Welsh,
  language: {
    code: LanguageCode$1.Welsh,
    name: "Welsh",
    native: "Cymraeg"
  },
  name: "Welsh",
  native_name: "Cymraeg",
  rtl: false
});
({
  country: {
    code: CountryCode$1.UnitedKingdom,
    name: "United Kingdom",
    native: "United Kingdom"
  },
  id: LocaleCode$1.WelshUnitedKingdom,
  language: {
    code: LanguageCode$1.Welsh,
    name: "Welsh",
    native: "Cymraeg"
  },
  name: "Welsh (United Kingdom)",
  native_name: "Cymraeg (United Kingdom)",
  rtl: false
});
({
  id: LocaleCode$1.Xhosa,
  language: {
    code: LanguageCode$1.Xhosa,
    name: "Xhosa",
    native: "isiXhosa"
  },
  name: "Xhosa",
  native_name: "isiXhosa",
  rtl: false
});
({
  country: {
    code: CountryCode$1.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode$1.XhosaSouthAfrica,
  language: {
    code: LanguageCode$1.Xhosa,
    name: "Xhosa",
    native: "isiXhosa"
  },
  name: "Xhosa (South Africa)",
  native_name: "isiXhosa (South Africa)",
  rtl: false
});
({
  id: LocaleCode$1.Yiddish,
  language: {
    code: LanguageCode$1.Yiddish,
    name: "Yiddish",
    native: "\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9"
  },
  name: "Yiddish",
  native_name: "\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9",
  rtl: false
});
({
  id: LocaleCode$1.Yoruba,
  language: {
    code: LanguageCode$1.Yoruba,
    name: "Yoruba",
    native: "Yor\xF9b\xE1"
  },
  name: "Yoruba",
  native_name: "Yor\xF9b\xE1",
  rtl: false
});
({
  country: {
    code: CountryCode$1.Nigeria,
    name: "Nigeria",
    native: "Nigeria"
  },
  id: LocaleCode$1.YorubaNigeria,
  language: {
    code: LanguageCode$1.Yoruba,
    name: "Yoruba",
    native: "Yor\xF9b\xE1"
  },
  name: "Yoruba (Nigeria)",
  native_name: "Yor\xF9b\xE1 (Nigeria)",
  rtl: false
});
({
  id: LocaleCode$1.Zulu,
  language: {
    code: LanguageCode$1.Zulu,
    name: "Zulu",
    native: "isiZulu"
  },
  name: "Zulu",
  native_name: "isiZulu",
  rtl: false
});
({
  country: {
    code: CountryCode$1.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode$1.ZuluSouthAfrica,
  language: {
    code: LanguageCode$1.Zulu,
    name: "Zulu",
    native: "isiZulu"
  },
  name: "Zulu (South Africa)",
  native_name: "isiZulu (South Africa)",
  rtl: false
});
({
  id: TimezoneRegions$1.AfricaAbidjan,
  name: "Africa/Abidjan",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaAccra,
  name: "Africa/Accra",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaAddisAbaba,
  name: "Africa/Addis_Ababa",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EastAfricaTime
});
({
  id: TimezoneRegions$1.AfricaAlgiers,
  name: "Africa/Algiers",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.AfricaAsmara,
  name: "Africa/Asmara",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EastAfricaTime
});
({
  id: TimezoneRegions$1.AfricaBamako,
  name: "Africa/Bamako",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaBangui,
  name: "Africa/Bangui",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AfricaBanjul,
  name: "Africa/Banjul",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaBissau,
  name: "Africa/Bissau",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaBlantyre,
  name: "Africa/Blantyre",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.CentralAfricaTime
});
({
  id: TimezoneRegions$1.AfricaBrazzaville,
  name: "Africa/Brazzaville",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AfricaBujumbura,
  name: "Africa/Bujumbura",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.CentralAfricaTime
});
({
  id: TimezoneRegions$1.AfricaCairo,
  name: "Africa/Cairo",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.AfricaCasablanca,
  name: "Africa/Casablanca",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WesternEuropeanTime
});
({
  id: TimezoneRegions$1.AfricaCeuta,
  name: "Africa/Ceuta",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.AfricaConakry,
  name: "Africa/Conakry",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaDakar,
  name: "Africa/Dakar",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaDarEsSalaam,
  name: "Africa/Dar_es_Salaam",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EastAfricaTime
});
({
  id: TimezoneRegions$1.AfricaDjibouti,
  name: "Africa/Djibouti",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EastAfricaTime
});
({
  id: TimezoneRegions$1.AfricaDouala,
  name: "Africa/Douala",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AfricaElAaiun,
  name: "Africa/El_Aaiun",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AfricaFreetown,
  name: "Africa/Freetown",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaGaborone,
  name: "Africa/Gaborone",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.CentralAfricaTime
});
({
  id: TimezoneRegions$1.AfricaHarare,
  name: "Africa/Harare",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.CentralAfricaTime
});
({
  id: TimezoneRegions$1.AfricaJohannesburg,
  name: "Africa/Johannesburg",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.SouthAfricanStandardTime
});
({
  id: TimezoneRegions$1.AfricaJuba,
  name: "Africa/Juba",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EastAfricaTime
});
({
  id: TimezoneRegions$1.AfricaKampala,
  name: "Africa/Kampala",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EastAfricaTime
});
({
  id: TimezoneRegions$1.AfricaKhartoum,
  name: "Africa/Khartoum",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EastAfricaTime
});
({
  id: TimezoneRegions$1.AfricaKigali,
  name: "Africa/Kigali",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.CentralAfricaTime
});
({
  id: TimezoneRegions$1.AfricaKinshasa,
  name: "Africa/Kinshasa",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AfricaLagos,
  name: "Africa/Lagos",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AfricaLibreville,
  name: "Africa/Libreville",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AfricaLome,
  name: "Africa/Lome",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaLuanda,
  name: "Africa/Luanda",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AfricaLubumbashi,
  name: "Africa/Lubumbashi",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.CentralAfricaTime
});
({
  id: TimezoneRegions$1.AfricaLusaka,
  name: "Africa/Lusaka",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.CentralAfricaTime
});
({
  id: TimezoneRegions$1.AfricaMalabo,
  name: "Africa/Malabo",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AfricaMaputo,
  name: "Africa/Maputo",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.CentralAfricaTime
});
({
  id: TimezoneRegions$1.AfricaMaseru,
  name: "Africa/Maseru",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.SouthAfricanStandardTime
});
({
  id: TimezoneRegions$1.AfricaMbabane,
  name: "Africa/Mbabane",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.SouthAfricanStandardTime
});
({
  id: TimezoneRegions$1.AfricaMogadishu,
  name: "Africa/Mogadishu",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EastAfricaTime
});
({
  id: TimezoneRegions$1.AfricaMonrovia,
  name: "Africa/Monrovia",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaNairobi,
  name: "Africa/Nairobi",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EastAfricaTime
});
({
  id: TimezoneRegions$1.AfricaNdjamena,
  name: "Africa/Ndjamena",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AfricaNiamey,
  name: "Africa/Niamey",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AfricaNouakchott,
  name: "Africa/Nouakchott",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.GreenwichMeanTime
});
({
  id: TimezoneRegions$1.AfricaOuagadougou,
  name: "Africa/Ouagadougou",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaPortoNovo,
  name: "Africa/Porto-Novo",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AfricaSaoTome,
  name: "Africa/SaoTome",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaTripoli,
  name: "Africa/Tripoli",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaTunis,
  name: "Africa/Tunis",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AfricaWindhoek,
  name: "Africa/Windhoek",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.WestAfricaTime
});
({
  id: TimezoneRegions$1.AmericaAdak,
  name: "America/Adak",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.HawaiiAleutianStandardTime
});
({
  id: TimezoneRegions$1.AmericaAnchorage,
  name: "America/Anchorage",
  offset: TimezoneOffset$1.UTC_PLUS_9,
  timezone: Timezones$1.AlaskaStandardTime
});
({
  id: TimezoneRegions$1.AmericaAnguilla,
  name: "America/Anguilla",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaAntigua,
  name: "America/Antigua",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaAraguaina,
  name: "America/Araguaina",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.BrasiliaTime
});
({
  id: TimezoneRegions$1.AmericaArgentinaBuenosAires,
  name: "America/Argentina/Buenos_Aires",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaArgentinaCatamarca,
  name: "America/Argentina/Catamarca",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaArgentinaCordoba,
  name: "America/Argentina/Cordoba",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaArgentinaJujuy,
  name: "America/Argentina/Jujuy",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaArgentinaLaRioja,
  name: "America/Argentina/La_Rioja",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaArgentinaMendoza,
  name: "America/Argentina/Mendoza",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaArgentinaRioGallegos,
  name: "America/Argentina/Rio_Gallegos",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaArgentinaSalta,
  name: "America/Argentina/Salta",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaArgentinaSanJuan,
  name: "America/Argentina/San_Juan",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaArgentinaSanLuis,
  name: "America/Argentina/San_Luis",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaArgentinaTucuman,
  name: "America/Argentina/Tucuman",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaArgentinaUshuaia,
  name: "America/Argentina/Ushuaia",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaAruba,
  name: "America/Aruba",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaAsuncion,
  name: "America/Asuncion",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.ParaguayTime
});
({
  id: TimezoneRegions$1.AmericaAtikokan,
  name: "America/Atikokan",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaAtka,
  name: "America/Atka",
  offset: TimezoneOffset$1.UTC_MINUS_10,
  timezone: Timezones$1.HawaiiAleutianStandardTime
});
({
  id: TimezoneRegions$1.AmericaBahia,
  name: "America/Bahia",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.BrasiliaTime
});
({
  id: TimezoneRegions$1.AmericaBahiaBanderas,
  name: "America/Bahia_Banderas",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaBarbados,
  name: "America/Barbados",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaBelem,
  name: "America/Belem",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.BrasiliaTime
});
({
  id: TimezoneRegions$1.AmericaBelize,
  name: "America/Belize",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaBlancSablon,
  name: "America/Blanc-Sablon",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaBoaVista,
  name: "America/Boa_Vista",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AmazonTime
});
({
  id: TimezoneRegions$1.AmericaBogota,
  name: "America/Bogota",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.ColombiaTime
});
({
  id: TimezoneRegions$1.AmericaBoise,
  name: "America/Boise",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AmericaCambridgeBay,
  name: "America/Cambridge_Bay",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AmericaCampoGrande,
  name: "America/Campo_Grande",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AmazonTime
});
({
  id: TimezoneRegions$1.AmericaCancun,
  name: "America/Cancun",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaCaracas,
  name: "America/Caracas",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.VenezuelaStandardTime
});
({
  id: TimezoneRegions$1.AmericaCayenne,
  name: "America/Cayenne",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.FrenchGuianaTime
});
({
  id: TimezoneRegions$1.AmericaCayman,
  name: "America/Cayman",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaChicago,
  name: "America/Chicago",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaChihuahua,
  name: "America/Chihuahua",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AmericaCoralHarbour,
  name: "America/Coral_Harbour",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaCordoba,
  name: "America/Cordoba",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ArgentinaTime
});
({
  id: TimezoneRegions$1.AmericaCostaRica,
  name: "America/Costa_Rica",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaCreston,
  name: "America/Creston",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AmericaCuiaba,
  name: "America/Cuiaba",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AmazonTime
});
({
  id: TimezoneRegions$1.AmericaCuracao,
  name: "America/Curacao",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaDanmarkshavn,
  name: "America/Danmarkshavn",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.GreenwichMeanTime
});
({
  id: TimezoneRegions$1.AmericaDawson,
  name: "America/Dawson",
  offset: TimezoneOffset$1.UTC_MINUS_8,
  timezone: Timezones$1.PacificStandardTime
});
({
  id: TimezoneRegions$1.AmericaDawsonCreek,
  name: "America/Dawson_Creek",
  offset: TimezoneOffset$1.UTC_MINUS_8,
  timezone: Timezones$1.PacificStandardTime
});
({
  id: TimezoneRegions$1.AmericaDenver,
  name: "America/Denver",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AmericaDetroit,
  name: "America/Detroit",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaDominica,
  name: "America/Dominica",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaEdmonton,
  name: "America/Edmonton",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AmericaEirunepe,
  name: "America/Eirunepe",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.AcreTime
});
({
  id: TimezoneRegions$1.AmericaElSalvador,
  name: "America/El_Salvador",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaFortaleza,
  name: "America/Fortaleza",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.BrasiliaTime
});
({
  id: TimezoneRegions$1.AmericaGlaceBay,
  name: "America/Glace_Bay",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaGodthab,
  name: "America/Godthab",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.WestGreenlandTime
});
({
  id: TimezoneRegions$1.AmericaGooseBay,
  name: "America/Goose_Bay",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaGrandTurk,
  name: "America/Grand_Turk",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaGrenada,
  name: "America/Grenada",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaGuadeloupe,
  name: "America/Guadeloupe",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaGuatemala,
  name: "America/Guatemala",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaGuayaquil,
  name: "America/Guayaquil",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EcuadorTime
});
({
  id: TimezoneRegions$1.AmericaGuyana,
  name: "America/Guyana",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaHalifax,
  name: "America/Halifax",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaHavana,
  name: "America/Havana",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.CubaStandardTime
});
({
  id: TimezoneRegions$1.AmericaHermosillo,
  name: "America/Hermosillo",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AmericaIndianaIndianapolis,
  name: "America/Indiana/Indianapolis",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaIndianaKnox,
  name: "America/Indiana/Knox",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaIndianaMarengo,
  name: "America/Indiana/Marengo",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaIndianaPetersburg,
  name: "America/Indiana/Petersburg",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaIndianaTellCity,
  name: "America/Indiana/Tell_City",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaIndianaVevay,
  name: "America/Indiana/Vevay",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaIndianaVincennes,
  name: "America/Indiana/Vincennes",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaIndianaWinamac,
  name: "America/Indiana/Winamac",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaInuvik,
  name: "America/Inuvik",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AmericaIqaluit,
  name: "America/Iqaluit",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaJamaica,
  name: "America/Jamaica",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaJuneau,
  name: "America/Juneau",
  offset: TimezoneOffset$1.UTC_MINUS_9,
  timezone: Timezones$1.AlaskaStandardTime
});
({
  id: TimezoneRegions$1.AmericaKentuckyLouisville,
  name: "America/Kentucky/Louisville",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaKentuckyMonticello,
  name: "America/Kentucky/Monticello",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaKralendijk,
  name: "America/Kralendijk",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaLaPaz,
  name: "America/La_Paz",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.BoliviaTime
});
({
  id: TimezoneRegions$1.AmericaLima,
  name: "America/Lima",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.PeruTime
});
({
  id: TimezoneRegions$1.AmericaLosAngeles,
  name: "America/Los_Angeles",
  offset: TimezoneOffset$1.UTC_MINUS_8,
  timezone: Timezones$1.PacificStandardTime
});
({
  id: TimezoneRegions$1.AmericaLouisville,
  name: "America/Louisville",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaLowerPrinces,
  name: "America/Lower_Princes",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaMaceio,
  name: "America/Maceio",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.BrasiliaTime
});
({
  id: TimezoneRegions$1.AmericaManagua,
  name: "America/Managua",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaManaus,
  name: "America/Manaus",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AmazonTime
});
({
  id: TimezoneRegions$1.AmericaMarigot,
  name: "America/Marigot",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaMartinique,
  name: "America/Martinique",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaMatamoros,
  name: "America/Matamoros",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaMazatlan,
  name: "America/Mazatlan",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AmericaMenominee,
  name: "America/Menominee",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaMerida,
  name: "America/Merida",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaMetlakatla,
  name: "America/Metlakatla",
  offset: TimezoneOffset$1.UTC_MINUS_9,
  timezone: Timezones$1.AlaskaStandardTime
});
({
  id: TimezoneRegions$1.AmericaMexicoCity,
  name: "America/Mexico_City",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaMiquelon,
  name: "America/Miquelon",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.SaintPierreAndMiquelonStandardTime
});
({
  id: TimezoneRegions$1.AmericaMoncton,
  name: "America/Moncton",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaMonterrey,
  name: "America/Monterrey",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaMontevideo,
  name: "America/Montevideo",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.UruguayStandardTime
});
({
  id: TimezoneRegions$1.AmericaMontreal,
  name: "America/Montreal",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaMontserrat,
  name: "America/Montserrat",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaNassau,
  name: "America/Nassau",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaNewYork,
  name: "America/New_York",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaNipigon,
  name: "America/Nipigon",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaNome,
  name: "America/Nome",
  offset: TimezoneOffset$1.UTC_MINUS_9,
  timezone: Timezones$1.AlaskaStandardTime
});
({
  id: TimezoneRegions$1.AmericaNoronha,
  name: "America/Noronha",
  offset: TimezoneOffset$1.UTC_MINUS_2,
  timezone: Timezones$1.FernandoDeNoronhaTime
});
({
  id: TimezoneRegions$1.AmericaNorthDakotaBeulah,
  name: "America/North_Dakota/Beulah",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaNorthDakotaCenter,
  name: "America/North_Dakota/Center",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaNorthDakotaNewSalem,
  name: "America/North_Dakota/New_Salem",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaOjinaga,
  name: "America/Ojinaga",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AmericaPanama,
  name: "America/Panama",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaPangnirtung,
  name: "America/Pangnirtung",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaParamaribo,
  name: "America/Paramaribo",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.SurinameTime
});
({
  id: TimezoneRegions$1.AmericaPhoenix,
  name: "America/Phoenix",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AmericaPortAuPrince,
  name: "America/Port-au-Prince",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaPortOfSpain,
  name: "America/Port_of_Spain",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaPortoVelho,
  name: "America/Porto_Velho",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AmazonTime
});
({
  id: TimezoneRegions$1.AmericaPuertoRico,
  name: "America/Puerto_Rico",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaRainyRiver,
  name: "America/Rainy_River",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaRankinInlet,
  name: "America/Rankin_Inlet",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaRecife,
  name: "America/Recife",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.BrasiliaTime
});
({
  id: TimezoneRegions$1.AmericaRegina,
  name: "America/Regina",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaResolute,
  name: "America/Resolute",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaRioBranco,
  name: "America/Rio_Branco",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.AcreTime
});
({
  id: TimezoneRegions$1.AmericaSantaIsabel,
  name: "America/Santa_Isabel",
  offset: TimezoneOffset$1.UTC_MINUS_8,
  timezone: Timezones$1.PacificStandardTime
});
({
  id: TimezoneRegions$1.AmericaSantarem,
  name: "America/Santarem",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.BrasiliaTime
});
({
  id: TimezoneRegions$1.AmericaSantiago,
  name: "America/Santiago",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.ChileStandardTime
});
({
  id: TimezoneRegions$1.AmericaSantoDomingo,
  name: "America/Santo_Domingo",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaSaoPaulo,
  name: "America/Sao_Paulo",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.BrasiliaTime
});
({
  id: TimezoneRegions$1.AmericaScoresbysund,
  name: "America/Scoresbysund",
  offset: TimezoneOffset$1.UTC_MINUS_1,
  timezone: Timezones$1.EasternGreenlandTime
});
({
  id: TimezoneRegions$1.AmericaShiprock,
  name: "America/Shiprock",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AmericaSitka,
  name: "America/Sitka",
  offset: TimezoneOffset$1.UTC_MINUS_9,
  timezone: Timezones$1.AlaskaStandardTime
});
({
  id: TimezoneRegions$1.AmericaStBarthelemy,
  name: "America/St_Barthelemy",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaStJohns,
  name: "America/St_Johns",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.NewfoundlandStandardTime
});
({
  id: TimezoneRegions$1.AmericaStKitts,
  name: "America/St_Kitts",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaStLucia,
  name: "America/St_Lucia",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaStThomas,
  name: "America/St_Thomas",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaStVincent,
  name: "America/St_Vincent",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaSwiftCurrent,
  name: "America/Swift_Current",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaTegucigalpa,
  name: "America/Tegucigalpa",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaThule,
  name: "America/Thule",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaThunderBay,
  name: "America/Thunder_Bay",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaTijuana,
  name: "America/Tijuana",
  offset: TimezoneOffset$1.UTC_MINUS_8,
  timezone: Timezones$1.PacificStandardTime
});
({
  id: TimezoneRegions$1.AmericaToronto,
  name: "America/Toronto",
  offset: TimezoneOffset$1.UTC_MINUS_5,
  timezone: Timezones$1.EasternStandardTime
});
({
  id: TimezoneRegions$1.AmericaTortola,
  name: "America/Tortola",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AmericaVancouver,
  name: "America/Vancouver",
  offset: TimezoneOffset$1.UTC_MINUS_8,
  timezone: Timezones$1.PacificStandardTime
});
({
  id: TimezoneRegions$1.AmericaWhitehorse,
  name: "America/Whitehorse",
  offset: TimezoneOffset$1.UTC_MINUS_8,
  timezone: Timezones$1.PacificStandardTime
});
({
  id: TimezoneRegions$1.AmericaWinnipeg,
  name: "America/Winnipeg",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AmericaYakutat,
  name: "America/Yakutat",
  offset: TimezoneOffset$1.UTC_MINUS_9,
  timezone: Timezones$1.AlaskaStandardTime
});
({
  id: TimezoneRegions$1.AmericaYellowknife,
  name: "America/Yellowknife",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.MountainStandardTime
});
({
  id: TimezoneRegions$1.AntarcticaCasey,
  name: "Antarctica/Casey",
  offset: TimezoneOffset$1.UTC_MINUS_8,
  timezone: Timezones$1.WesternStandardTime
});
({
  id: TimezoneRegions$1.AntarcticaDavis,
  name: "Antarctica/Davis",
  offset: TimezoneOffset$1.UTC_MINUS_7,
  timezone: Timezones$1.NewfoundlandStandardTime
});
({
  id: TimezoneRegions$1.AntarcticaDumontDUrville,
  name: "Antarctica/DumontDUrville",
  offset: TimezoneOffset$1.UTC_MINUS_10,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AntarcticaMacquarie,
  name: "Antarctica/Macquarie",
  offset: TimezoneOffset$1.UTC_MINUS_11,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AntarcticaMawson,
  name: "Antarctica/Mawson",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AntarcticaMcMurdo,
  name: "Antarctica/McMurdo",
  offset: TimezoneOffset$1.UTC_MINUS_12,
  timezone: Timezones$1.NewZealandStandardTime
});
({
  id: TimezoneRegions$1.AntarcticaPalmer,
  name: "Antarctica/Palmer",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.ChathamStandardTime
});
({
  id: TimezoneRegions$1.AntarcticaRothera,
  name: "Antarctica/Rothera",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.RotheraResearchStationTime
});
({
  id: TimezoneRegions$1.AntarcticaSyowa,
  name: "Antarctica/Syowa",
  offset: TimezoneOffset$1.UTC_MINUS_3,
  timezone: Timezones$1.ShowaStationTime
});
({
  id: TimezoneRegions$1.AntarcticaTroll,
  name: "Antarctica/Troll",
  offset: TimezoneOffset$1.UTC_MINUS_2,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.AntarcticaVostok,
  name: "Antarctica/Vostok",
  offset: TimezoneOffset$1.UTC_MINUS_6,
  timezone: Timezones$1.CentralStandardTime
});
({
  id: TimezoneRegions$1.ArcticLongyearbyen,
  name: "Arctic/Longyearbyen",
  offset: TimezoneOffset$1.UTC_MINUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.AsiaAden,
  name: "Asia/Aden",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.ArabiaStandardTime
});
({
  id: TimezoneRegions$1.AsiaAlmaty,
  name: "Asia/Almaty",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.AlmaAtaTime
});
({
  id: TimezoneRegions$1.AsiaAmman,
  name: "Asia/Amman",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.AsiaAnadyr,
  name: "Asia/Anadyr",
  offset: TimezoneOffset$1.UTC_PLUS_12,
  timezone: Timezones$1.NewCaledoniaTime
});
({
  id: TimezoneRegions$1.AsiaAqtau,
  name: "Asia/Aqtau",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.AqtobeTime
});
({
  id: TimezoneRegions$1.AsiaAqtobe,
  name: "Asia/Aqtobe",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.AqtobeTime
});
({
  id: TimezoneRegions$1.AsiaAshgabat,
  name: "Asia/Ashgabat",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.TurkmenistanTime
});
({
  id: TimezoneRegions$1.AsiaBaghdad,
  name: "Asia/Baghdad",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.ArabiaStandardTime
});
({
  id: TimezoneRegions$1.AsiaBahrain,
  name: "Asia/Bahrain",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.ArabiaStandardTime
});
({
  id: TimezoneRegions$1.AsiaBaku,
  name: "Asia/Baku",
  offset: TimezoneOffset$1.UTC_PLUS_4,
  timezone: Timezones$1.AzerbaijanTime
});
({
  id: TimezoneRegions$1.AsiaBangkok,
  name: "Asia/Bangkok",
  offset: TimezoneOffset$1.UTC_PLUS_7,
  timezone: Timezones$1.IndochinaTime
});
({
  id: TimezoneRegions$1.AsiaBarnaul,
  name: "Asia/Barnaul",
  offset: TimezoneOffset$1.UTC_PLUS_7,
  timezone: Timezones$1.KrasnoyarskTime
});
({
  id: TimezoneRegions$1.AsiaBeirut,
  name: "Asia/Beirut",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.AsiaBishkek,
  name: "Asia/Bishkek",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.KyrgyzstanTime
});
({
  id: TimezoneRegions$1.AsiaBrunei,
  name: "Asia/Brunei",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.BruneiTime
});
({
  id: TimezoneRegions$1.AsiaChita,
  name: "Asia/Chita",
  offset: TimezoneOffset$1.UTC_PLUS_9,
  timezone: Timezones$1.YakutskTime
});
({
  id: TimezoneRegions$1.AsiaChoibalsan,
  name: "Asia/Choibalsan",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.ChoibalsanStandardTime
});
({
  id: TimezoneRegions$1.AsiaColombo,
  name: "Asia/Colombo",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.IndianStandardTime
});
({
  id: TimezoneRegions$1.AsiaDamascus,
  name: "Asia/Damascus",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.AsiaDhaka,
  name: "Asia/Dhaka",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.BangladeshStandardTime
});
({
  id: TimezoneRegions$1.AsiaDili,
  name: "Asia/Dili",
  offset: TimezoneOffset$1.UTC_PLUS_9,
  timezone: Timezones$1.JapanStandardTime
});
({
  id: TimezoneRegions$1.AsiaDubai,
  name: "Asia/Dubai",
  offset: TimezoneOffset$1.UTC_PLUS_4,
  timezone: Timezones$1.GulfStandardTime
});
({
  id: TimezoneRegions$1.AsiaDushanbe,
  name: "Asia/Dushanbe",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.TajikistanTime
});
({
  id: TimezoneRegions$1.AsiaFamagusta,
  name: "Asia/Famagusta",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.AsiaGaza,
  name: "Asia/Gaza",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.AsiaHebron,
  name: "Asia/Hebron",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.AsiaHoChiMinh,
  name: "Asia/Ho_Chi_Minh",
  offset: TimezoneOffset$1.UTC_PLUS_7,
  timezone: Timezones$1.IndochinaTime
});
({
  id: TimezoneRegions$1.AsiaHongKong,
  name: "Asia/Hong_Kong",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.HongKongTime
});
({
  id: TimezoneRegions$1.AsiaHovd,
  name: "Asia/Hovd",
  offset: TimezoneOffset$1.UTC_PLUS_7,
  timezone: Timezones$1.HovdTime
});
({
  id: TimezoneRegions$1.AsiaIrkutsk,
  name: "Asia/Irkutsk",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.IrkutskTime
});
({
  id: TimezoneRegions$1.AsiaJakarta,
  name: "Asia/Jakarta",
  offset: TimezoneOffset$1.UTC_PLUS_7,
  timezone: Timezones$1.WesternIndonesianTime
});
({
  id: TimezoneRegions$1.AsiaJayapura,
  name: "Asia/Jayapura",
  offset: TimezoneOffset$1.UTC_PLUS_9,
  timezone: Timezones$1.JapanStandardTime
});
({
  id: TimezoneRegions$1.AsiaJerusalem,
  name: "Asia/Jerusalem",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.AsiaKabul,
  name: "Asia/Kabul",
  offset: TimezoneOffset$1.UTC_PLUS_4,
  timezone: Timezones$1.AfghanistanTime
});
({
  id: TimezoneRegions$1.AsiaKamchatka,
  name: "Asia/Kamchatka",
  offset: TimezoneOffset$1.UTC_PLUS_12,
  timezone: Timezones$1.KamchatkaTime
});
({
  id: TimezoneRegions$1.AsiaKarachi,
  name: "Asia/Karachi",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.PakistanStandardTime
});
({
  id: TimezoneRegions$1.AsiaKathmandu,
  name: "Asia/Kathmandu",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.NepalTime
});
({
  id: TimezoneRegions$1.AsiaKhandyga,
  name: "Asia/Khandyga",
  offset: TimezoneOffset$1.UTC_PLUS_9,
  timezone: Timezones$1.YakutskTime
});
({
  id: TimezoneRegions$1.AsiaKolkata,
  name: "Asia/Kolkata",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.IndianStandardTime
});
({
  id: TimezoneRegions$1.AsiaKrasnoyarsk,
  name: "Asia/Krasnoyarsk",
  offset: TimezoneOffset$1.UTC_PLUS_7,
  timezone: Timezones$1.KrasnoyarskTime
});
({
  id: TimezoneRegions$1.AsiaKualaLumpur,
  name: "Asia/Kuala_Lumpur",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.MalaysiaStandardTime
});
({
  id: TimezoneRegions$1.AsiaKuching,
  name: "Asia/Kuching",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.MalaysiaStandardTime
});
({
  id: TimezoneRegions$1.AsiaKuwait,
  name: "Asia/Kuwait",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.ArabiaStandardTime
});
({
  id: TimezoneRegions$1.AsiaMacau,
  name: "Asia/Macau",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.ChinaStandardTime
});
({
  id: TimezoneRegions$1.AsiaMagadan,
  name: "Asia/Magadan",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.MagadanTime
});
({
  id: TimezoneRegions$1.AsiaMakassar,
  name: "Asia/Makassar",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.MalaysiaTime
});
({
  id: TimezoneRegions$1.AsiaManila,
  name: "Asia/Manila",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.PhilippineTime
});
({
  id: TimezoneRegions$1.AsiaMuscat,
  name: "Asia/Muscat",
  offset: TimezoneOffset$1.UTC_PLUS_4,
  timezone: Timezones$1.GulfStandardTime
});
({
  id: TimezoneRegions$1.AsiaNovokuznetsk,
  name: "Asia/Novokuznetsk",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.NovosibirskTime
});
({
  id: TimezoneRegions$1.AsiaNovosibirsk,
  name: "Asia/Novosibirsk",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.NovosibirskTime
});
({
  id: TimezoneRegions$1.AsiaOmsk,
  name: "Asia/Omsk",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.OmskTime
});
({
  id: TimezoneRegions$1.AsiaOral,
  name: "Asia/Oral",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.OralTime
});
({
  id: TimezoneRegions$1.AsiaPhnomPenh,
  name: "Asia/Phnom_Penh",
  offset: TimezoneOffset$1.UTC_PLUS_7,
  timezone: Timezones$1.IndochinaTime
});
({
  id: TimezoneRegions$1.AsiaPontianak,
  name: "Asia/Pontianak",
  offset: TimezoneOffset$1.UTC_PLUS_7,
  timezone: Timezones$1.WesternIndonesianTime
});
({
  id: TimezoneRegions$1.AsiaPyongyang,
  name: "Asia/Pyongyang",
  offset: TimezoneOffset$1.UTC_PLUS_9,
  timezone: Timezones$1.KoreaStandardTime
});
({
  id: TimezoneRegions$1.AsiaQatar,
  name: "Asia/Qatar",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.ArabiaStandardTime
});
({
  id: TimezoneRegions$1.AsiaQyzylorda,
  name: "Asia/Qyzylorda",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.WestKazakhstanTime
});
({
  id: TimezoneRegions$1.AsiaRangoon,
  name: "Asia/Rangoon",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.MyanmarStandardTime
});
({
  id: TimezoneRegions$1.AsiaRiyadh,
  name: "Asia/Riyadh",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.ArabiaStandardTime
});
({
  id: TimezoneRegions$1.AsiaSakhalin,
  name: "Asia/Sakhalin",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.SakhalinIslandTime
});
({
  id: TimezoneRegions$1.AsiaSamarkand,
  name: "Asia/Samarkand",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.UzbekistanTime
});
({
  id: TimezoneRegions$1.AsiaSeoul,
  name: "Asia/Seoul",
  offset: TimezoneOffset$1.UTC_PLUS_9,
  timezone: Timezones$1.KoreaStandardTime
});
({
  id: TimezoneRegions$1.AsiaShanghai,
  name: "Asia/Shanghai",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.ChinaStandardTime
});
({
  id: TimezoneRegions$1.AsiaSingapore,
  name: "Asia/Singapore",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.SingaporeStandardTime
});
({
  id: TimezoneRegions$1.AsiaSrednekolymsk,
  name: "Asia/Srednekolymsk",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.SrednekolymskTime
});
({
  id: TimezoneRegions$1.AsiaTaipei,
  name: "Asia/Taipei",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.ChinaStandardTime
});
({
  id: TimezoneRegions$1.AsiaTashkent,
  name: "Asia/Tashkent",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.UzbekistanTime
});
({
  id: TimezoneRegions$1.AsiaTbilisi,
  name: "Asia/Tbilisi",
  offset: TimezoneOffset$1.UTC_PLUS_4,
  timezone: Timezones$1.GeorgiaStandardTime
});
({
  id: TimezoneRegions$1.AsiaTehran,
  name: "Asia/Tehran",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.IranStandardTime
});
({
  id: TimezoneRegions$1.AsiaThimphu,
  name: "Asia/Thimphu",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.BhutanTime
});
({
  id: TimezoneRegions$1.AsiaTokyo,
  name: "Asia/Tokyo",
  offset: TimezoneOffset$1.UTC_PLUS_9,
  timezone: Timezones$1.JapanStandardTime
});
({
  id: TimezoneRegions$1.AsiaTomsk,
  name: "Asia/Tomsk",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.KrasnoyarskTime
});
({
  id: TimezoneRegions$1.AsiaUlaanbaatar,
  name: "Asia/Ulaanbaatar",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.UlaanbaatarStandardTime
});
({
  id: TimezoneRegions$1.AsiaUrumqi,
  name: "Asia/Urumqi",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.ChinaStandardTime
});
({
  id: TimezoneRegions$1.AsiaUstNera,
  name: "Asia/Ust-Nera",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.VladivostokTime
});
({
  id: TimezoneRegions$1.AsiaVientiane,
  name: "Asia/Vientiane",
  offset: TimezoneOffset$1.UTC_PLUS_7,
  timezone: Timezones$1.IndochinaTime
});
({
  id: TimezoneRegions$1.AsiaVladivostok,
  name: "Asia/Vladivostok",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.VladivostokTime
});
({
  id: TimezoneRegions$1.AsiaYakutsk,
  name: "Asia/Yakutsk",
  offset: TimezoneOffset$1.UTC_PLUS_9,
  timezone: Timezones$1.YakutskTime
});
({
  id: TimezoneRegions$1.AsiaYekaterinburg,
  name: "Asia/Yekaterinburg",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.YekaterinburgTime
});
({
  id: TimezoneRegions$1.AsiaYerevan,
  name: "Asia/Yerevan",
  offset: TimezoneOffset$1.UTC_PLUS_4,
  timezone: Timezones$1.ArmeniaTime
});
({
  id: TimezoneRegions$1.AtlanticAzores,
  name: "Atlantic/Azores",
  offset: TimezoneOffset$1.UTC_MINUS_1,
  timezone: Timezones$1.AzoresStandardTime
});
({
  id: TimezoneRegions$1.AtlanticBermuda,
  name: "Atlantic/Bermuda",
  offset: TimezoneOffset$1.UTC_MINUS_4,
  timezone: Timezones$1.AtlanticStandardTime
});
({
  id: TimezoneRegions$1.AtlanticCanary,
  name: "Atlantic/Canary",
  offset: TimezoneOffset$1.UTC_MINUS_1,
  timezone: Timezones$1.WesternEuropeanTime
});
({
  id: TimezoneRegions$1.AtlanticCapeVerde,
  name: "Atlantic/Cape_Verde",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CapeVerdeTime
});
({
  id: TimezoneRegions$1.AtlanticFaroe,
  name: "Atlantic/Faroe",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.GreenwichMeanTime
});
({
  id: TimezoneRegions$1.AtlanticMadeira,
  name: "Atlantic/Madeira",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.WesternEuropeanTime
});
({
  id: TimezoneRegions$1.AtlanticReykjavik,
  name: "Atlantic/Reykjavik",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.GreenwichMeanTime
});
({
  id: TimezoneRegions$1.AtlanticSouthGeorgia,
  name: "Atlantic/South_Georgia",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.CoordinatedUniversalTime
});
({
  id: TimezoneRegions$1.AtlanticStHelena,
  name: "Atlantic/St_Helena",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.GreenwichMeanTime
});
({
  id: TimezoneRegions$1.AtlanticStanley,
  name: "Atlantic/Stanley",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.FalklandIslandsTime
});
({
  id: TimezoneRegions$1.AustraliaAdelaide,
  name: "Australia/Adelaide",
  offset: TimezoneOffset$1.UTC_PLUS_9_30,
  timezone: Timezones$1.AustralianCentralStandardTime
});
({
  id: TimezoneRegions$1.AustraliaBrisbane,
  name: "Australia/Brisbane",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.AustralianEasternStandardTime
});
({
  id: TimezoneRegions$1.AustraliaBrokenHill,
  name: "Australia/Broken_Hill",
  offset: TimezoneOffset$1.UTC_PLUS_9_30,
  timezone: Timezones$1.AustralianCentralStandardTime
});
({
  id: TimezoneRegions$1.AustraliaCanberra,
  name: "Australia/Canberra",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.AustralianEasternStandardTime
});
({
  id: TimezoneRegions$1.AustraliaCurrie,
  name: "Australia/Currie",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.AustralianEasternStandardTime
});
({
  id: TimezoneRegions$1.AustraliaDarwin,
  name: "Australia/Darwin",
  offset: TimezoneOffset$1.UTC_PLUS_9_30,
  timezone: Timezones$1.AustralianCentralStandardTime
});
({
  id: TimezoneRegions$1.AustraliaEucla,
  name: "Australia/Eucla",
  offset: TimezoneOffset$1.UTC_PLUS_8_45,
  timezone: Timezones$1.AustralianCentralWesternStandardTime
});
({
  id: TimezoneRegions$1.AustraliaHobart,
  name: "Australia/Hobart",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.AustralianEasternStandardTime
});
({
  id: TimezoneRegions$1.AustraliaLindeman,
  name: "Australia/Lindeman",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.AustralianEasternStandardTime
});
({
  id: TimezoneRegions$1.AustraliaLordHowe,
  name: "Australia/Lord_Howe",
  offset: TimezoneOffset$1.UTC_PLUS_10_30,
  timezone: Timezones$1.LordHoweStandardTime
});
({
  id: TimezoneRegions$1.AustraliaMelbourne,
  name: "Australia/Melbourne",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.AustralianEasternStandardTime
});
({
  id: TimezoneRegions$1.AustraliaPerth,
  name: "Australia/Perth",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.AustralianWesternStandardTime
});
({
  id: TimezoneRegions$1.AustraliaSydney,
  name: "Australia/Sydney",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.AustralianEasternStandardTime
});
({
  id: TimezoneRegions$1.EuropeAmsterdam,
  name: "Europe/Amsterdam",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeAndorra,
  name: "Europe/Andorra",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeAthens,
  name: "Europe/Athens",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeBelgrade,
  name: "Europe/Belgrade",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeBerlin,
  name: "Europe/Berlin",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeBratislava,
  name: "Europe/Bratislava",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeBrussels,
  name: "Europe/Brussels",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeBucharest,
  name: "Europe/Bucharest",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeBudapest,
  name: "Europe/Budapest",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeBusingen,
  name: "Europe/Busingen",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeChisinau,
  name: "Europe/Chisinau",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeCopenhagen,
  name: "Europe/Copenhagen",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeDublin,
  name: "Europe/Dublin",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.GreenwichMeanTime
});
({
  id: TimezoneRegions$1.EuropeGibraltar,
  name: "Europe/Gibraltar",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeGuernsey,
  name: "Europe/Guernsey",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeHelsinki,
  name: "Europe/Helsinki",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeIsleOfMan,
  name: "Europe/Isle_of_Man",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.GreenwichMeanTime
});
({
  id: TimezoneRegions$1.EuropeIstanbul,
  name: "Europe/Istanbul",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeJersey,
  name: "Europe/Jersey",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeKaliningrad,
  name: "Europe/Kaliningrad",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeKiev,
  name: "Europe/Kiev",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeLisbon,
  name: "Europe/Lisbon",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.GreenwichMeanTime
});
({
  id: TimezoneRegions$1.EuropeLjubljana,
  name: "Europe/Ljubljana",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeLondon,
  name: "Europe/London",
  offset: TimezoneOffset$1.UTC_0,
  timezone: Timezones$1.GreenwichMeanTime
});
({
  id: TimezoneRegions$1.EuropeLuxembourg,
  name: "Europe/Luxembourg",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeMadrid,
  name: "Europe/Madrid",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeMalta,
  name: "Europe/Malta",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeMariehamn,
  name: "Europe/Mariehamn",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeMinsk,
  name: "Europe/Minsk",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeMonaco,
  name: "Europe/Monaco",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeMoscow,
  name: "Europe/Moscow",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeOslo,
  name: "Europe/Oslo",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeParis,
  name: "Europe/Paris",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropePodgorica,
  name: "Europe/Podgorica",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropePrague,
  name: "Europe/Prague",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeRiga,
  name: "Europe/Riga",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeRome,
  name: "Europe/Rome",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeSamara,
  name: "Europe/Samara",
  offset: TimezoneOffset$1.UTC_PLUS_4,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeSanMarino,
  name: "Europe/San_Marino",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeSarajevo,
  name: "Europe/Sarajevo",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeSimferopol,
  name: "Europe/Simferopol",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeSkopje,
  name: "Europe/Skopje",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeSofia,
  name: "Europe/Sofia",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeStockholm,
  name: "Europe/Stockholm",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeTallinn,
  name: "Europe/Tallinn",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeTirane,
  name: "Europe/Tirane",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeUzhgorod,
  name: "Europe/Uzhgorod",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeVaduz,
  name: "Europe/Vaduz",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeVatican,
  name: "Europe/Vatican",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeVienna,
  name: "Europe/Vienna",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeVilnius,
  name: "Europe/Vilnius",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeVolgograd,
  name: "Europe/Volgograd",
  offset: TimezoneOffset$1.UTC_PLUS_4,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeWarsaw,
  name: "Europe/Warsaw",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeZagreb,
  name: "Europe/Zagreb",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeZaporozhye,
  name: "Europe/Zaporozhye",
  offset: TimezoneOffset$1.UTC_PLUS_2,
  timezone: Timezones$1.EasternEuropeanTime
});
({
  id: TimezoneRegions$1.EuropeZurich,
  name: "Europe/Zurich",
  offset: TimezoneOffset$1.UTC_PLUS_1,
  timezone: Timezones$1.CentralEuropeanTime
});
({
  id: TimezoneRegions$1.IndianAntananarivo,
  name: "Indian/Antananarivo",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EastAfricaTime
});
({
  id: TimezoneRegions$1.IndianChagos,
  name: "Indian/Chagos",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.IndianOceanTime
});
({
  id: TimezoneRegions$1.IndianChristmas,
  name: "Indian/Christmas",
  offset: TimezoneOffset$1.UTC_PLUS_7,
  timezone: Timezones$1.ChristmasIslandTime
});
({
  id: TimezoneRegions$1.IndianCocos,
  name: "Indian/Cocos",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.CocosIslandsTime
});
({
  id: TimezoneRegions$1.IndianComoro,
  name: "Indian/Comoro",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EastAfricaTime
});
({
  id: TimezoneRegions$1.IndianKerguelen,
  name: "Indian/Kerguelen",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.FrenchSouthernAndAntarcticTime
});
({
  id: TimezoneRegions$1.IndianMahe,
  name: "Indian/Mahe",
  offset: TimezoneOffset$1.UTC_PLUS_4,
  timezone: Timezones$1.SeychellesTime
});
({
  id: TimezoneRegions$1.IndianMaldives,
  name: "Indian/Maldives",
  offset: TimezoneOffset$1.UTC_PLUS_5,
  timezone: Timezones$1.MaldivesTime
});
({
  id: TimezoneRegions$1.IndianMauritius,
  name: "Indian/Mauritius",
  offset: TimezoneOffset$1.UTC_PLUS_4,
  timezone: Timezones$1.MauritiusTime
});
({
  id: TimezoneRegions$1.IndianMayotte,
  name: "Indian/Mayotte",
  offset: TimezoneOffset$1.UTC_PLUS_3,
  timezone: Timezones$1.EastAfricaTime
});
({
  id: TimezoneRegions$1.IndianReunion,
  name: "Indian/Reunion",
  offset: TimezoneOffset$1.UTC_PLUS_4,
  timezone: Timezones$1.ReunionTime
});
({
  id: TimezoneRegions$1.PacificApia,
  name: "Pacific/Apia",
  offset: TimezoneOffset$1.UTC_PLUS_13,
  timezone: Timezones$1.SamoaStandardTime
});
({
  id: TimezoneRegions$1.PacificAuckland,
  name: "Pacific/Auckland",
  offset: TimezoneOffset$1.UTC_PLUS_13,
  timezone: Timezones$1.NewZealandStandardTime
});
({
  id: TimezoneRegions$1.PacificChatham,
  name: "Pacific/Chatham",
  offset: TimezoneOffset$1.UTC_PLUS_13,
  timezone: Timezones$1.ChathamStandardTime
});
({
  id: TimezoneRegions$1.PacificEaster,
  name: "Pacific/Easter",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.EasterIslandStandardTime
});
({
  id: TimezoneRegions$1.PacificEfate,
  name: "Pacific/Efate",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.VanuatuTime
});
({
  id: TimezoneRegions$1.PacificEnderbury,
  name: "Pacific/Enderbury",
  offset: TimezoneOffset$1.UTC_PLUS_13,
  timezone: Timezones$1.TongaTime
});
({
  id: TimezoneRegions$1.PacificFakaofo,
  name: "Pacific/Fakaofo",
  offset: TimezoneOffset$1.UTC_PLUS_13,
  timezone: Timezones$1.TongaTime
});
({
  id: TimezoneRegions$1.PacificFiji,
  name: "Pacific/Fiji",
  offset: TimezoneOffset$1.UTC_PLUS_12,
  timezone: Timezones$1.FijiTime
});
({
  id: TimezoneRegions$1.PacificFunafuti,
  name: "Pacific/Funafuti",
  offset: TimezoneOffset$1.UTC_PLUS_12,
  timezone: Timezones$1.TuvaluTime
});
({
  id: TimezoneRegions$1.PacificGalapagos,
  name: "Pacific/Galapagos",
  offset: TimezoneOffset$1.UTC_PLUS_6,
  timezone: Timezones$1.GalapagosTime
});
({
  id: TimezoneRegions$1.PacificGambier,
  name: "Pacific/Gambier",
  offset: TimezoneOffset$1.UTC_PLUS_9,
  timezone: Timezones$1.GambierIslandTime
});
({
  id: TimezoneRegions$1.PacificGuadalcanal,
  name: "Pacific/Guadalcanal",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.SolomonIslandsTime
});
({
  id: TimezoneRegions$1.PacificGuam,
  name: "Pacific/Guam",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.ChamorroStandardTime
});
({
  id: TimezoneRegions$1.PacificHonolulu,
  name: "Pacific/Honolulu",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.HawaiiAleutianStandardTime
});
({
  id: TimezoneRegions$1.PacificJohnston,
  name: "Pacific/Johnston",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.HawaiiAleutianStandardTime
});
({
  id: TimezoneRegions$1.PacificKiritimati,
  name: "Pacific/Kiritimati",
  offset: TimezoneOffset$1.UTC_PLUS_14,
  timezone: Timezones$1.LineIslandsTime
});
({
  id: TimezoneRegions$1.PacificKosrae,
  name: "Pacific/Kosrae",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.KosraeTime
});
({
  id: TimezoneRegions$1.PacificKwajalein,
  name: "Pacific/Kwajalein",
  offset: TimezoneOffset$1.UTC_PLUS_12,
  timezone: Timezones$1.MarshallIslandsTime
});
({
  id: TimezoneRegions$1.PacificMajuro,
  name: "Pacific/Majuro",
  offset: TimezoneOffset$1.UTC_PLUS_12,
  timezone: Timezones$1.MarshallIslandsTime
});
({
  id: TimezoneRegions$1.PacificMarquesas,
  name: "Pacific/Marquesas",
  offset: TimezoneOffset$1.UTC_PLUS_9,
  timezone: Timezones$1.MarquesasIslandsTime
});
({
  id: TimezoneRegions$1.PacificMidway,
  name: "Pacific/Midway",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.SamoaStandardTime
});
({
  id: TimezoneRegions$1.PacificNauru,
  name: "Pacific/Nauru",
  offset: TimezoneOffset$1.UTC_PLUS_12,
  timezone: Timezones$1.NauruTime
});
({
  id: TimezoneRegions$1.PacificNiue,
  name: "Pacific/Niue",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.NiueTime
});
({
  id: TimezoneRegions$1.PacificNorfolk,
  name: "Pacific/Norfolk",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.NorfolkIslandTime
});
({
  id: TimezoneRegions$1.PacificNoumea,
  name: "Pacific/Noumea",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.NewCaledoniaTime
});
({
  id: TimezoneRegions$1.PacificPagoPago,
  name: "Pacific/Pago_Pago",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.SamoaStandardTime
});
({
  id: TimezoneRegions$1.PacificPalau,
  name: "Pacific/Palau",
  offset: TimezoneOffset$1.UTC_PLUS_9,
  timezone: Timezones$1.PalauTime
});
({
  id: TimezoneRegions$1.PacificPitcairn,
  name: "Pacific/Pitcairn",
  offset: TimezoneOffset$1.UTC_PLUS_8,
  timezone: Timezones$1.PitcairnTime
});
({
  id: TimezoneRegions$1.PacificPonape,
  name: "Pacific/Ponape",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.PohnpeiStandardTime
});
({
  id: TimezoneRegions$1.PacificPortMoresby,
  name: "Pacific/Port_Moresby",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.PapuaNewGuineaTime
});
({
  id: TimezoneRegions$1.PacificRarotonga,
  name: "Pacific/Rarotonga",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.CookIslandTime
});
({
  id: TimezoneRegions$1.PacificSaipan,
  name: "Pacific/Saipan",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.ChamorroStandardTime
});
({
  id: TimezoneRegions$1.PacificTahiti,
  name: "Pacific/Tahiti",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.TahitiTime
});
({
  id: TimezoneRegions$1.PacificTarawa,
  name: "Pacific/Tarawa",
  offset: TimezoneOffset$1.UTC_PLUS_12,
  timezone: Timezones$1.GilbertIslandTime
});
({
  id: TimezoneRegions$1.PacificTongatapu,
  name: "Pacific/Tongatapu",
  offset: TimezoneOffset$1.UTC_PLUS_13,
  timezone: Timezones$1.TongaTime
});
({
  id: TimezoneRegions$1.PacificChuuk,
  name: "Pacific/Chuuk",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.ChuukTime
});
({
  id: TimezoneRegions$1.PacificPohnpei,
  name: "Pacific/Pohnpei",
  offset: TimezoneOffset$1.UTC_PLUS_11,
  timezone: Timezones$1.PohnpeiStandardTime
});
({
  id: TimezoneRegions$1.PacificYap,
  name: "Pacific/Yap",
  offset: TimezoneOffset$1.UTC_PLUS_10,
  timezone: Timezones$1.ChuukTime
});
var devEnvironment = {
  id: "dev",
  type: EnvironmentType$1.Development,
  public: false,
  name: "Development",
  description: "Development environment"
};
var testEnvironment = {
  id: "test",
  type: EnvironmentType$1.NonProduction,
  public: false,
  name: "Test",
  description: "Test environment"
};
var prodEnvironment = {
  id: "prod",
  type: EnvironmentType$1.Production,
  public: true,
  name: "Production",
  description: "Production environment"
};
function getEnvironment() {
  const { NODE_ENV } = { "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true };
  if (NODE_ENV === "dev") {
    return devEnvironment;
  }
  if (NODE_ENV === "prod") {
    return prodEnvironment;
  }
  return testEnvironment;
}
var Activities;
(function(Activities2) {
  Activities2["Comment"] = "comment";
  Activities2["Create"] = "create";
  Activities2["Delete"] = "delete";
  Activities2["Edit"] = "edit";
  Activities2["Invoice"] = "invoice";
  Activities2["Message"] = "message";
  Activities2["PageView"] = "pageView";
  Activities2["Paid"] = "paid";
  Activities2["Payment"] = "payment";
  Activities2["Purchase"] = "purchase";
  Activities2["Referral"] = "referral";
  Activities2["Renewal"] = "renewal";
  Activities2["Signup"] = "signup";
  Activities2["Subscription"] = "subscription";
  Activities2["Upgrade"] = "upgrade";
})(Activities || (Activities = {}));
var Analytics;
(function(Analytics2) {
  Analytics2["Business"] = "business";
  Analytics2["Engineering"] = "engineering";
  Analytics2["Exception"] = "exception";
  Analytics2["LogMessage"] = "log-message";
  Analytics2["Marketing"] = "marketing";
  Analytics2["PageLeave"] = "page-leave";
  Analytics2["PageView"] = "page-view";
  Analytics2["Product"] = "product";
  Analytics2["QualityManagement"] = "quality-management";
  Analytics2["UserAccess"] = "user-access";
  Analytics2["UserLogin"] = "user-login";
  Analytics2["UserLogout"] = "user-logout";
  Analytics2["UserSignup"] = "user-signup";
  Analytics2["UserPreferencesChanged"] = "user-preferences-changed";
  Analytics2["WebsiteVisit"] = "website-visit";
})(Analytics || (Analytics = {}));
var PageLeaveMethod;
(function(PageLeaveMethod2) {
  PageLeaveMethod2["CloseTab"] = "close-tab";
  PageLeaveMethod2["ExternalLink"] = "external-link";
  PageLeaveMethod2["NavigateAway"] = "navigate-away";
  PageLeaveMethod2["Unknown"] = "unknown";
})(PageLeaveMethod || (PageLeaveMethod = {}));
var DeploymentTarget;
(function(DeploymentTarget2) {
  DeploymentTarget2["Ecs"] = "Ecs";
})(DeploymentTarget || (DeploymentTarget = {}));
var DeploymentStatus;
(function(DeploymentStatus2) {
  DeploymentStatus2["Finished"] = "Finished";
  DeploymentStatus2["Queued"] = "Queued";
  DeploymentStatus2["Running"] = "Running";
  DeploymentStatus2["Started"] = "Started";
})(DeploymentStatus || (DeploymentStatus = {}));
var DeviceType;
(function(DeviceType2) {
  DeviceType2["Mobile"] = "mobile";
  DeviceType2["TV"] = "tv";
  DeviceType2["Watch"] = "watch";
  DeviceType2["Web"] = "web";
})(DeviceType || (DeviceType = {}));
var EnvironmentType;
(function(EnvironmentType2) {
  EnvironmentType2["Development"] = "Development";
  EnvironmentType2["NonProduction"] = "NonProduction";
  EnvironmentType2["Production"] = "Production";
})(EnvironmentType || (EnvironmentType = {}));
var OnboardingStatus;
(function(OnboardingStatus2) {
  OnboardingStatus2["Completed"] = "completed";
  OnboardingStatus2["Started"] = "started";
  OnboardingStatus2["Uncompleted"] = "uncompleted";
})(OnboardingStatus || (OnboardingStatus = {}));
var PipelineType;
(function(PipelineType2) {
  PipelineType2["Build"] = "Build";
  PipelineType2["Deployment"] = "Deployment";
  PipelineType2["Test"] = "Test";
})(PipelineType || (PipelineType = {}));
var PipelineWorkflowStatus;
(function(PipelineWorkflowStatus2) {
  PipelineWorkflowStatus2["Canceled"] = "Canceled";
  PipelineWorkflowStatus2["Completed"] = "Completed";
  PipelineWorkflowStatus2["Failed"] = "Failed";
  PipelineWorkflowStatus2["Running"] = "Running";
  PipelineWorkflowStatus2["Queued"] = "Queued";
  PipelineWorkflowStatus2["Waiting"] = "Waiting";
})(PipelineWorkflowStatus || (PipelineWorkflowStatus = {}));
var PipelineStepStatus;
(function(PipelineStepStatus2) {
  PipelineStepStatus2["Canceled"] = "Canceled";
  PipelineStepStatus2["Completed"] = "Completed";
  PipelineStepStatus2["Failed"] = "Failed";
  PipelineStepStatus2["Running"] = "Running";
  PipelineStepStatus2["Queued"] = "Queued";
  PipelineStepStatus2["Waiting"] = "Waiting";
})(PipelineStepStatus || (PipelineStepStatus = {}));
var PageRole;
(function(PageRole2) {
  PageRole2["ForgotPassword"] = "forgot_password";
  PageRole2["Index"] = "index";
  PageRole2["Login"] = "login";
  PageRole2["PageNotFound"] = "404";
  PageRole2["Signup"] = "signup";
  PageRole2["VerifyCode"] = "verify_code";
})(PageRole || (PageRole = {}));
var AlertLevel;
(function(AlertLevel2) {
  AlertLevel2["Info"] = "info";
  AlertLevel2["Warning"] = "warning";
  AlertLevel2["Error"] = "error";
  AlertLevel2["Success"] = "success";
})(AlertLevel || (AlertLevel = {}));
var ModalType;
(function(ModalType2) {
  ModalType2["Details"] = "details";
  ModalType2["Dialog"] = "dialog";
})(ModalType || (ModalType = {}));
var NotificationType;
(function(NotificationType2) {
  NotificationType2["Info"] = "info";
  NotificationType2["Warning"] = "warning";
  NotificationType2["Error"] = "error";
  NotificationType2["Success"] = "success";
})(NotificationType || (NotificationType = {}));
var DataPointMetric;
(function(DataPointMetric2) {
  DataPointMetric2["AccountBalance"] = "AccountBalance";
  DataPointMetric2["UserAssets"] = "UserAssets";
  DataPointMetric2["UserCreditCardDebt"] = "UserCreditCardDebt";
  DataPointMetric2["UserCreditLimit"] = "UserCreditLimit";
  DataPointMetric2["UserCreditUtilization"] = "UserCreditUtilization";
  DataPointMetric2["UserDebt"] = "UserDebt";
  DataPointMetric2["UserInvestments"] = "UserInvestments";
  DataPointMetric2["UserRetirement"] = "UserRetirement";
  DataPointMetric2["UserSavings"] = "UserSavings";
})(DataPointMetric || (DataPointMetric = {}));
var DefaultValue;
(function(DefaultValue2) {
  DefaultValue2["DateTime"] = "date_time";
  DefaultValue2["True"] = "true";
  DefaultValue2["False"] = "false";
  DefaultValue2["UniqueId"] = "unique_id";
})(DefaultValue || (DefaultValue = {}));
var ModelType;
(function(ModelType2) {
  ModelType2["DomainModel"] = "domain_entity";
  ModelType2["GenericModel"] = "generic_entity";
})(ModelType || (ModelType = {}));
var Primitives;
(function(Primitives2) {
  Primitives2["AirportCode"] = "airport-code";
  Primitives2["BankIDCode"] = "bank-id-code";
  Primitives2["BitcoinAddress"] = "bitcoin-address";
  Primitives2["Boolean"] = "boolean";
  Primitives2["City"] = "city";
  Primitives2["Color"] = "color";
  Primitives2["CountryCode"] = "country-code";
  Primitives2["CreditCard"] = "credit-card";
  Primitives2["CurrencyAmount"] = "currency-amount";
  Primitives2["CurrencyCode"] = "currency-code";
  Primitives2["DataURI"] = "data-uri";
  Primitives2["Date"] = "date";
  Primitives2["DateRange"] = "date-range";
  Primitives2["DateTime"] = "date-time";
  Primitives2["DayOfMonth"] = "day-of-month";
  Primitives2["DomainName"] = "domain-name";
  Primitives2["EmailAddress"] = "email-address";
  Primitives2["EthereumAddress"] = "ethereum-address";
  Primitives2["EAN"] = "european-article-number";
  Primitives2["EIN"] = "employer-identification-number";
  Primitives2["Float"] = "float";
  Primitives2["GeographicCoordinate"] = "geographic-coordinate";
  Primitives2["GeographicCoordinates"] = "geographic-coordinates";
  Primitives2["GitRepositoryURL"] = "git-repository-url";
  Primitives2["HSLColor"] = "hsl-color";
  Primitives2["HexColor"] = "hex-color";
  Primitives2["Hexadecimal"] = "hexadecimal";
  Primitives2["IBAN"] = "international-bank-account-number";
  Primitives2["IMEI"] = "international-mobile-equipment-identifier";
  Primitives2["IPAddress"] = "ip-address";
  Primitives2["IPAddressRange"] = "ip-address-range";
  Primitives2["ISBN"] = "international-standard-book-number";
  Primitives2["ISIN"] = "international-stock-number";
  Primitives2["ISMN"] = "international-standard-music-number";
  Primitives2["ISSN"] = "international-standard-serial-number";
  Primitives2["ISO8601"] = "iso-8601";
  Primitives2["ISO31661Alpha2"] = "iso-31661-alpha-2";
  Primitives2["ISO31661Alpha3"] = "iso-31661-alpha-3";
  Primitives2["ISO4217"] = "iso-4217";
  Primitives2["Image"] = "image";
  Primitives2["Integer"] = "integer";
  Primitives2["JSON"] = "json";
  Primitives2["LanguageCode"] = "language-code";
  Primitives2["LicensePlateNumber"] = "license-plate-number";
  Primitives2["LongText"] = "long-text";
  Primitives2["MD5"] = "md5";
  Primitives2["Markdown"] = "markdown";
  Primitives2["Menu"] = "menu";
  Primitives2["Number"] = "number";
  Primitives2["MACAddress"] = "mac-address";
  Primitives2["MagnetURI"] = "magnet-uri";
  Primitives2["MimeType"] = "mime-type";
  Primitives2["Month"] = "month";
  Primitives2["Password"] = "password";
  Primitives2["PassportNumber"] = "passport-number";
  Primitives2["Percent"] = "percent";
  Primitives2["PhoneNumber"] = "phone-number";
  Primitives2["Port"] = "port";
  Primitives2["PostalCode"] = "postal-code";
  Primitives2["Province"] = "province";
  Primitives2["RFC3339"] = "rfc-3339";
  Primitives2["RGBColor"] = "rgb-color";
  Primitives2["SemanticVersion"] = "semantic-version";
  Primitives2["SSN"] = "social-security-number";
  Primitives2["State"] = "state";
  Primitives2["StreetAddress"] = "street-address";
  Primitives2["String"] = "string";
  Primitives2["Tags"] = "tags";
  Primitives2["TaxIDNumber"] = "tax-id-number";
  Primitives2["Time"] = "time";
  Primitives2["TimeOfDay"] = "time-of-day";
  Primitives2["TimeRange"] = "time-range";
  Primitives2["TimezoneRegion"] = "timezone-region";
  Primitives2["URL"] = "url";
  Primitives2["URLPath"] = "url-path";
  Primitives2["UUID"] = "uuid";
  Primitives2["VATIDNumber"] = "value-added-tax-id-number";
  Primitives2["VerificationCode"] = "verification-code";
  Primitives2["Video"] = "video";
  Primitives2["Weekday"] = "weekday";
  Primitives2["Year"] = "year";
})(Primitives || (Primitives = {}));
var Severity;
(function(Severity2) {
  Severity2["Critical"] = "Critical";
  Severity2["Error"] = "Error";
  Severity2["Fatal"] = "Fatal";
  Severity2["Warning"] = "Warning";
})(Severity || (Severity = {}));
var Condition;
(function(Condition2) {
  Condition2["Contains"] = "contains";
  Condition2["HasCharacterCount"] = "has-character-count";
  Condition2["HasNumberCount"] = "has-number-count";
  Condition2["HasLetterCount"] = "has-letter-count";
  Condition2["HasLowercaseCount"] = "has-lowercase-count";
  Condition2["HasSpacesCount"] = "has-spaces-count";
  Condition2["HasSymbolCount"] = "has-symbol-count";
  Condition2["HasUppercaseCount"] = "has-uppercase-count";
  Condition2["IsAfter"] = "is-after";
  Condition2["IsAfterOrEqual"] = "is-after-or-equal";
  Condition2["IsAirport"] = "is-airport";
  Condition2["IsAlpha"] = "is-alpha";
  Condition2["IsAlphanumeric"] = "is-alphanumeric";
  Condition2["IsAlgorithmHash"] = "is-algorithm-hash";
  Condition2["IsAscii"] = "is-ascii";
  Condition2["IsBase64"] = "is-base-64";
  Condition2["IsBefore"] = "is-before";
  Condition2["IsBeforeOrAfter"] = "is-before-or-after";
  Condition2["IsBeforeOrEqual"] = "is-before-or-equal";
  Condition2["IsBetween"] = "is-between";
  Condition2["IsBIC"] = "is-bic";
  Condition2["IsBitcoinAddress"] = "is-bitcoin-address";
  Condition2["IsBoolean"] = "is-boolean";
  Condition2["IsColor"] = "is-color";
  Condition2["IsComplexEnough"] = "is-complex-enough";
  Condition2["IsCountry"] = "is-country";
  Condition2["IsCreditCard"] = "is-credit-card";
  Condition2["IsCurrency"] = "is-currency";
  Condition2["IsDataURI"] = "is-data-uri";
  Condition2["IsDate"] = "is-date";
  Condition2["IsDateRange"] = "is-date-range";
  Condition2["IsDateTime"] = "is-date-time";
  Condition2["IsDayOfMonth"] = "is-day-of-month";
  Condition2["IsDecimal"] = "is-decimal";
  Condition2["IsDivisibleBy"] = "is-divisible-by";
  Condition2["IsDomainName"] = "is-domain-name";
  Condition2["IsEmailAddress"] = "is-email-address";
  Condition2["IsEthereumAddress"] = "is-ethereum-address";
  Condition2["IsEAN"] = "is-ean";
  Condition2["IsEIN"] = "is-ein";
  Condition2["IsEqual"] = "is-equal";
  Condition2["IsEvenNumber"] = "is-even-number";
  Condition2["IsFloat"] = "is-float";
  Condition2["IsIBAN"] = "is-iban";
  Condition2["IsGreaterThan"] = "greater-than";
  Condition2["IsGreaterThanOrEqual"] = "greater-than-or-equal";
  Condition2["IsHSLColor"] = "is-hsl-color";
  Condition2["IsHexColor"] = "is-hex-color";
  Condition2["IsHexadecimal"] = "is-hexadecimal";
  Condition2["IsIdentityCardCode"] = "is-identity-card-code";
  Condition2["IsIMEI"] = "is-imei";
  Condition2["IsInIPAddressRange"] = "is-in-ip-address-range";
  Condition2["IsInList"] = "is-in-list";
  Condition2["IsInTheLast"] = "is-in-the-last";
  Condition2["IsInteger"] = "is-integer";
  Condition2["IsIPAddress"] = "is-ip-address";
  Condition2["IsIPAddressRange"] = "is-ip-address-range";
  Condition2["IsISBN"] = "is-isbn";
  Condition2["IsISIN"] = "is-isin";
  Condition2["IsISMN"] = "is-ismn";
  Condition2["IsISRC"] = "is-isrc";
  Condition2["IsISSN"] = "is-issn";
  Condition2["IsISO4217"] = "is-iso-4217";
  Condition2["IsISO8601"] = "is-iso-8601";
  Condition2["IsISO31661Alpha2"] = "is-iso-31661-alpha-2";
  Condition2["IsISO31661Alpha3"] = "is-iso-31661-alpha-3";
  Condition2["IsJSON"] = "is-json";
  Condition2["IsLanguage"] = "is-language";
  Condition2["IsLatitude"] = "is-latitude";
  Condition2["IsLongitude"] = "is-longitude";
  Condition2["IsLengthEqual"] = "is-length-equal";
  Condition2["IsLengthGreaterThan"] = "is-length-greater-than";
  Condition2["IsLengthGreaterThanOrEqual"] = "is-length-great-than-or-equal";
  Condition2["IsLengthLessThan"] = "is-length-less-than";
  Condition2["IsLengthLessThanOrEqual"] = "is-length-less-than-or-equal";
  Condition2["IsLessThan"] = "less-than";
  Condition2["IsLessThanOrEqual"] = "less-than-or-equal";
  Condition2["IsLicensePlateNumber"] = "is-license-plate-number";
  Condition2["IsLowercase"] = "is-lowercase";
  Condition2["IsOctal"] = "is-octal";
  Condition2["IsMACAddress"] = "is-mac-address";
  Condition2["IsMD5"] = "is-md5";
  Condition2["IsMagnetURI"] = "is-magnet-uri";
  Condition2["IsMarkdown"] = "is-markdown";
  Condition2["IsMimeType"] = "is-mime-type";
  Condition2["IsMonth"] = "is-month";
  Condition2["IsNegativeNumber"] = "is-negative-number";
  Condition2["IsNotDate"] = "is-not-date";
  Condition2["IsNotEqual"] = "is-not-equal";
  Condition2["IsNotInIPAddressRange"] = "is-not-in-ip-address-range";
  Condition2["IsNotInList"] = "is-not-in-list";
  Condition2["IsNotNull"] = "is-not-null";
  Condition2["IsNotRegexMatch"] = "is-not-regex-match";
  Condition2["IsNotToday"] = "is-not-today";
  Condition2["IsNumber"] = "is-number";
  Condition2["IsNumeric"] = "is-numeric";
  Condition2["IsOddNumber"] = "is-odd-number";
  Condition2["IsPassportNumber"] = "is-passport-number";
  Condition2["IsPhoneNumber"] = "is-phone-number";
  Condition2["IsPort"] = "is-port";
  Condition2["IsPositiveNumber"] = "is-positive-number";
  Condition2["IsPostalCode"] = "is-postal-code";
  Condition2["IsProvince"] = "is-province";
  Condition2["IsRGBColor"] = "is-rgb-color";
  Condition2["IsRegexMatch"] = "is-regex-match";
  Condition2["IsRequired"] = "is-required";
  Condition2["IsSemanticVersion"] = "is-semantic-version";
  Condition2["IsSlug"] = "is-slug";
  Condition2["IsSSN"] = "is-ssn";
  Condition2["IsState"] = "is-state";
  Condition2["IsStreetAddress"] = "is-street-address";
  Condition2["IsString"] = "is-string";
  Condition2["IsStrongPassword"] = "is-strong-password";
  Condition2["IsTags"] = "is-tags";
  Condition2["IsTaxIDNumber"] = "is-tax-id-number";
  Condition2["IsThisMonth"] = "is-this-month";
  Condition2["IsThisQuarter"] = "is-this-quarter";
  Condition2["IsThisWeek"] = "is-this-week";
  Condition2["IsThisWeekend"] = "is-this-weekend";
  Condition2["IsThisYear"] = "is-this-year";
  Condition2["IsTime"] = "is-time";
  Condition2["IsTimeOfDay"] = "is-time-of-day";
  Condition2["IsTimeRange"] = "is-time-range";
  Condition2["IsToday"] = "is-today";
  Condition2["IsURL"] = "is-url";
  Condition2["IsUUID"] = "is-uuid";
  Condition2["IsUppercase"] = "is-uppercase";
  Condition2["IsUsernameAvailable"] = "is-username-available";
  Condition2["IsValidStreetAddress"] = "is-valid-street-address";
  Condition2["IsVATIDNumber"] = "is-vat-id-number";
  Condition2["IsWeekday"] = "is-weekday";
  Condition2["IsWeekend"] = "is-weekend";
  Condition2["IsYear"] = "is-year";
})(Condition || (Condition = {}));
var AuthenticationCondition;
(function(AuthenticationCondition2) {
  AuthenticationCondition2["IsAuthenticated"] = "is-authenticated";
  AuthenticationCondition2["IsNotAuthenticated"] = "is-not-authenticated";
  AuthenticationCondition2["IsUsernameAvailable"] = "is-username-available";
  AuthenticationCondition2["PasswordMismatch"] = "password-mismatch";
})(AuthenticationCondition || (AuthenticationCondition = {}));
var ColorCondition;
(function(ColorCondition2) {
  ColorCondition2[ColorCondition2["IsHSLColor"] = Condition.IsHSLColor] = "IsHSLColor";
  ColorCondition2[ColorCondition2["IsHexColor"] = Condition.IsHexColor] = "IsHexColor";
  ColorCondition2[ColorCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  ColorCondition2[ColorCondition2["IsRGBColor"] = Condition.IsRGBColor] = "IsRGBColor";
  ColorCondition2[ColorCondition2["IsString"] = Condition.IsString] = "IsString";
})(ColorCondition || (ColorCondition = {}));
var CurrencyCondition;
(function(CurrencyCondition2) {
  CurrencyCondition2[CurrencyCondition2["IsBetween"] = Condition.IsBetween] = "IsBetween";
  CurrencyCondition2[CurrencyCondition2["IsCurrency"] = Condition.IsCurrency] = "IsCurrency";
  CurrencyCondition2[CurrencyCondition2["IsDecimal"] = Condition.IsDecimal] = "IsDecimal";
  CurrencyCondition2[CurrencyCondition2["IsDivisibleBy"] = Condition.IsDivisibleBy] = "IsDivisibleBy";
  CurrencyCondition2[CurrencyCondition2["IsEvenNumber"] = Condition.IsEvenNumber] = "IsEvenNumber";
  CurrencyCondition2[CurrencyCondition2["IsFloat"] = Condition.IsFloat] = "IsFloat";
  CurrencyCondition2[CurrencyCondition2["IsGreaterThan"] = Condition.IsGreaterThan] = "IsGreaterThan";
  CurrencyCondition2[CurrencyCondition2["IsGreaterThanOrEqual"] = Condition.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  CurrencyCondition2[CurrencyCondition2["IsInteger"] = Condition.IsInteger] = "IsInteger";
  CurrencyCondition2[CurrencyCondition2["IsISO8601"] = Condition.IsISO8601] = "IsISO8601";
  CurrencyCondition2[CurrencyCondition2["IsLessThan"] = Condition.IsLessThan] = "IsLessThan";
  CurrencyCondition2[CurrencyCondition2["IsLessThanOrEqual"] = Condition.IsLessThanOrEqual] = "IsLessThanOrEqual";
  CurrencyCondition2[CurrencyCondition2["IsNegativeNumber"] = Condition.IsNegativeNumber] = "IsNegativeNumber";
  CurrencyCondition2[CurrencyCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  CurrencyCondition2[CurrencyCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  CurrencyCondition2[CurrencyCondition2["IsNumber"] = Condition.IsNumber] = "IsNumber";
  CurrencyCondition2[CurrencyCondition2["IsOddNumber"] = Condition.IsOddNumber] = "IsOddNumber";
  CurrencyCondition2[CurrencyCondition2["IsPositiveNumber"] = Condition.IsPositiveNumber] = "IsPositiveNumber";
})(CurrencyCondition || (CurrencyCondition = {}));
var BitcoinAddressCondition;
(function(BitcoinAddressCondition2) {
  BitcoinAddressCondition2[BitcoinAddressCondition2["IsBitcoinAddress"] = Condition.IsBitcoinAddress] = "IsBitcoinAddress";
  BitcoinAddressCondition2[BitcoinAddressCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  BitcoinAddressCondition2[BitcoinAddressCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  BitcoinAddressCondition2[BitcoinAddressCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
})(BitcoinAddressCondition || (BitcoinAddressCondition = {}));
var EthereumAddressCondition;
(function(EthereumAddressCondition2) {
  EthereumAddressCondition2[EthereumAddressCondition2["IsEthereumAddress"] = Condition.IsEthereumAddress] = "IsEthereumAddress";
  EthereumAddressCondition2[EthereumAddressCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  EthereumAddressCondition2[EthereumAddressCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  EthereumAddressCondition2[EthereumAddressCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
})(EthereumAddressCondition || (EthereumAddressCondition = {}));
var LanguageCondition;
(function(LanguageCondition2) {
  LanguageCondition2[LanguageCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  LanguageCondition2[LanguageCondition2["IsJSON"] = Condition.IsJSON] = "IsJSON";
  LanguageCondition2[LanguageCondition2["IsLanguage"] = Condition.IsLanguage] = "IsLanguage";
  LanguageCondition2[LanguageCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  LanguageCondition2[LanguageCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
})(LanguageCondition || (LanguageCondition = {}));
var CityCondition;
(function(CityCondition2) {
  CityCondition2[CityCondition2["IsAlpha"] = Condition.IsAlpha] = "IsAlpha";
  CityCondition2[CityCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  CityCondition2[CityCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  CityCondition2[CityCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  CityCondition2[CityCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  CityCondition2[CityCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  CityCondition2[CityCondition2["IsString"] = Condition.IsString] = "IsString";
})(CityCondition || (CityCondition = {}));
var CountryCondition;
(function(CountryCondition2) {
  CountryCondition2[CountryCondition2["IsAlpha"] = Condition.IsAlpha] = "IsAlpha";
  CountryCondition2[CountryCondition2["IsCountry"] = Condition.IsCountry] = "IsCountry";
  CountryCondition2[CountryCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  CountryCondition2[CountryCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  CountryCondition2[CountryCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  CountryCondition2[CountryCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  CountryCondition2[CountryCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  CountryCondition2[CountryCondition2["IsString"] = Condition.IsString] = "IsString";
})(CountryCondition || (CountryCondition = {}));
var LatitudeCondition;
(function(LatitudeCondition2) {
  LatitudeCondition2[LatitudeCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  LatitudeCondition2[LatitudeCondition2["IsFloat"] = Condition.IsFloat] = "IsFloat";
  LatitudeCondition2[LatitudeCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  LatitudeCondition2[LatitudeCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  LatitudeCondition2[LatitudeCondition2["IsNumeric"] = Condition.IsNumeric] = "IsNumeric";
})(LatitudeCondition || (LatitudeCondition = {}));
var LongitudeCondition;
(function(LongitudeCondition2) {
  LongitudeCondition2[LongitudeCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  LongitudeCondition2[LongitudeCondition2["IsFloat"] = Condition.IsFloat] = "IsFloat";
  LongitudeCondition2[LongitudeCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  LongitudeCondition2[LongitudeCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  LongitudeCondition2[LongitudeCondition2["IsNumeric"] = Condition.IsNumeric] = "IsNumeric";
})(LongitudeCondition || (LongitudeCondition = {}));
var PostalCodeCondition;
(function(PostalCodeCondition2) {
  PostalCodeCondition2[PostalCodeCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  PostalCodeCondition2[PostalCodeCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  PostalCodeCondition2[PostalCodeCondition2["IsPostalCode"] = Condition.IsPostalCode] = "IsPostalCode";
  PostalCodeCondition2[PostalCodeCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
})(PostalCodeCondition || (PostalCodeCondition = {}));
var ProvinceCondition;
(function(ProvinceCondition2) {
  ProvinceCondition2[ProvinceCondition2["IsAlpha"] = Condition.IsAlpha] = "IsAlpha";
  ProvinceCondition2[ProvinceCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  ProvinceCondition2[ProvinceCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  ProvinceCondition2[ProvinceCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  ProvinceCondition2[ProvinceCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  ProvinceCondition2[ProvinceCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  ProvinceCondition2[ProvinceCondition2["IsProvince"] = Condition.IsProvince] = "IsProvince";
  ProvinceCondition2[ProvinceCondition2["IsString"] = Condition.IsString] = "IsString";
})(ProvinceCondition || (ProvinceCondition = {}));
var StateCondition;
(function(StateCondition2) {
  StateCondition2[StateCondition2["IsAlpha"] = Condition.IsAlpha] = "IsAlpha";
  StateCondition2[StateCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  StateCondition2[StateCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  StateCondition2[StateCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  StateCondition2[StateCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  StateCondition2[StateCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  StateCondition2[StateCondition2["IsState"] = Condition.IsState] = "IsState";
  StateCondition2[StateCondition2["IsString"] = Condition.IsString] = "IsString";
})(StateCondition || (StateCondition = {}));
var StreetAddressCondition;
(function(StreetAddressCondition2) {
  StreetAddressCondition2[StreetAddressCondition2["IsAlphanumeric"] = Condition.IsAlphanumeric] = "IsAlphanumeric";
  StreetAddressCondition2[StreetAddressCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  StreetAddressCondition2[StreetAddressCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  StreetAddressCondition2[StreetAddressCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  StreetAddressCondition2[StreetAddressCondition2["IsString"] = Condition.IsString] = "IsString";
  StreetAddressCondition2[StreetAddressCondition2["IsStreetAddress"] = Condition.IsStreetAddress] = "IsStreetAddress";
})(StreetAddressCondition || (StreetAddressCondition = {}));
var AirportCondition;
(function(AirportCondition2) {
  AirportCondition2[AirportCondition2["IsAirport"] = Condition.IsAirport] = "IsAirport";
  AirportCondition2[AirportCondition2["IsAlpha"] = Condition.IsAlpha] = "IsAlpha";
  AirportCondition2[AirportCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  AirportCondition2[AirportCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  AirportCondition2[AirportCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  AirportCondition2[AirportCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  AirportCondition2[AirportCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  AirportCondition2[AirportCondition2["IsString"] = Condition.IsString] = "IsString";
})(AirportCondition || (AirportCondition = {}));
var AlgorithmHashCondition;
(function(AlgorithmHashCondition2) {
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsAlgorithmHash"] = Condition.IsAlgorithmHash] = "IsAlgorithmHash";
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  AlgorithmHashCondition2[AlgorithmHashCondition2["IsString"] = Condition.IsString] = "IsString";
})(AlgorithmHashCondition || (AlgorithmHashCondition = {}));
var SemanticVersionCondition;
(function(SemanticVersionCondition2) {
  SemanticVersionCondition2[SemanticVersionCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  SemanticVersionCondition2[SemanticVersionCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  SemanticVersionCondition2[SemanticVersionCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  SemanticVersionCondition2[SemanticVersionCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  SemanticVersionCondition2[SemanticVersionCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  SemanticVersionCondition2[SemanticVersionCondition2["IsSemanticVersion"] = Condition.IsSemanticVersion] = "IsSemanticVersion";
  SemanticVersionCondition2[SemanticVersionCondition2["IsString"] = Condition.IsString] = "IsString";
})(SemanticVersionCondition || (SemanticVersionCondition = {}));
var UUIDCondition;
(function(UUIDCondition2) {
  UUIDCondition2[UUIDCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  UUIDCondition2[UUIDCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  UUIDCondition2[UUIDCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  UUIDCondition2[UUIDCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  UUIDCondition2[UUIDCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  UUIDCondition2[UUIDCondition2["IsString"] = Condition.IsString] = "IsString";
  UUIDCondition2[UUIDCondition2["IsUUID"] = Condition.IsUUID] = "IsUUID";
})(UUIDCondition || (UUIDCondition = {}));
var MD5Condition;
(function(MD5Condition2) {
  MD5Condition2[MD5Condition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  MD5Condition2[MD5Condition2["IsInList"] = Condition.IsInList] = "IsInList";
  MD5Condition2[MD5Condition2["IsMD5"] = Condition.IsMD5] = "IsMD5";
  MD5Condition2[MD5Condition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  MD5Condition2[MD5Condition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  MD5Condition2[MD5Condition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  MD5Condition2[MD5Condition2["IsString"] = Condition.IsString] = "IsString";
})(MD5Condition || (MD5Condition = {}));
var BooleanCondition;
(function(BooleanCondition2) {
  BooleanCondition2[BooleanCondition2["IsBoolean"] = Condition.IsBoolean] = "IsBoolean";
  BooleanCondition2[BooleanCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  BooleanCondition2[BooleanCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  BooleanCondition2[BooleanCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
})(BooleanCondition || (BooleanCondition = {}));
var DateCondition;
(function(DateCondition2) {
  DateCondition2[DateCondition2["IsAfter"] = Condition.IsAfter] = "IsAfter";
  DateCondition2[DateCondition2["IsAfterOrEqual"] = Condition.IsAfterOrEqual] = "IsAfterOrEqual";
  DateCondition2[DateCondition2["IsBefore"] = Condition.IsBefore] = "IsBefore";
  DateCondition2[DateCondition2["IsBeforeOrEqual"] = Condition.IsBeforeOrEqual] = "IsBeforeOrEqual";
  DateCondition2[DateCondition2["IsBetween"] = Condition.IsBetween] = "IsBetween";
  DateCondition2[DateCondition2["IsDate"] = Condition.IsDate] = "IsDate";
  DateCondition2[DateCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  DateCondition2[DateCondition2["IsNotDate"] = Condition.IsNotDate] = "IsNotDate";
  DateCondition2[DateCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  DateCondition2[DateCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  DateCondition2[DateCondition2["IsNotToday"] = Condition.IsNotToday] = "IsNotToday";
  DateCondition2[DateCondition2["IsThisWeek"] = Condition.IsThisWeek] = "IsThisWeek";
  DateCondition2[DateCondition2["IsThisMonth"] = Condition.IsThisMonth] = "IsThisMonth";
  DateCondition2[DateCondition2["IsThisQuarter"] = Condition.IsThisQuarter] = "IsThisQuarter";
  DateCondition2[DateCondition2["IsThisYear"] = Condition.IsThisYear] = "IsThisYear";
  DateCondition2[DateCondition2["IsToday"] = Condition.IsToday] = "IsToday";
  DateCondition2[DateCondition2["IsWeekend"] = Condition.IsWeekend] = "IsWeekend";
})(DateCondition || (DateCondition = {}));
var DateRangeCondition;
(function(DateRangeCondition2) {
  DateRangeCondition2[DateRangeCondition2["IsAfter"] = Condition.IsAfter] = "IsAfter";
  DateRangeCondition2[DateRangeCondition2["IsBefore"] = Condition.IsBefore] = "IsBefore";
  DateRangeCondition2[DateRangeCondition2["IsBeforeOrAfter"] = Condition.IsBeforeOrAfter] = "IsBeforeOrAfter";
  DateRangeCondition2[DateRangeCondition2["IsBetween"] = Condition.IsBetween] = "IsBetween";
  DateRangeCondition2[DateRangeCondition2["IsDate"] = Condition.IsDate] = "IsDate";
  DateRangeCondition2[DateRangeCondition2["IsDateRange"] = Condition.IsDateRange] = "IsDateRange";
  DateRangeCondition2[DateRangeCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  DateRangeCondition2[DateRangeCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  DateRangeCondition2[DateRangeCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
})(DateRangeCondition || (DateRangeCondition = {}));
var DateTimeCondition;
(function(DateTimeCondition2) {
  DateTimeCondition2[DateTimeCondition2["IsAfter"] = Condition.IsAfter] = "IsAfter";
  DateTimeCondition2[DateTimeCondition2["IsAfterOrEqual"] = Condition.IsAfterOrEqual] = "IsAfterOrEqual";
  DateTimeCondition2[DateTimeCondition2["IsBefore"] = Condition.IsBefore] = "IsBefore";
  DateTimeCondition2[DateTimeCondition2["IsBeforeOrEqual"] = Condition.IsBeforeOrEqual] = "IsBeforeOrEqual";
  DateTimeCondition2[DateTimeCondition2["IsBetween"] = Condition.IsBetween] = "IsBetween";
  DateTimeCondition2[DateTimeCondition2["IsDate"] = Condition.IsDate] = "IsDate";
  DateTimeCondition2[DateTimeCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  DateTimeCondition2[DateTimeCondition2["IsNotDate"] = Condition.IsNotDate] = "IsNotDate";
  DateTimeCondition2[DateTimeCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  DateTimeCondition2[DateTimeCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  DateTimeCondition2[DateTimeCondition2["IsNotToday"] = Condition.IsNotToday] = "IsNotToday";
  DateTimeCondition2[DateTimeCondition2["IsThisWeek"] = Condition.IsThisWeek] = "IsThisWeek";
  DateTimeCondition2[DateTimeCondition2["IsThisMonth"] = Condition.IsThisMonth] = "IsThisMonth";
  DateTimeCondition2[DateTimeCondition2["IsThisQuarter"] = Condition.IsThisQuarter] = "IsThisQuarter";
  DateTimeCondition2[DateTimeCondition2["IsThisYear"] = Condition.IsThisYear] = "IsThisYear";
  DateTimeCondition2[DateTimeCondition2["IsToday"] = Condition.IsToday] = "IsToday";
  DateTimeCondition2[DateTimeCondition2["IsWeekend"] = Condition.IsWeekend] = "IsWeekend";
})(DateTimeCondition || (DateTimeCondition = {}));
var DayOfMonthCondition;
(function(DayOfMonthCondition2) {
  DayOfMonthCondition2[DayOfMonthCondition2["IsAfter"] = Condition.IsAfter] = "IsAfter";
  DayOfMonthCondition2[DayOfMonthCondition2["IsAfterOrEqual"] = Condition.IsAfterOrEqual] = "IsAfterOrEqual";
  DayOfMonthCondition2[DayOfMonthCondition2["IsBefore"] = Condition.IsBefore] = "IsBefore";
  DayOfMonthCondition2[DayOfMonthCondition2["IsBeforeOrEqual"] = Condition.IsBeforeOrEqual] = "IsBeforeOrEqual";
  DayOfMonthCondition2[DayOfMonthCondition2["IsBetween"] = Condition.IsBetween] = "IsBetween";
  DayOfMonthCondition2[DayOfMonthCondition2["IsDayOfMonth"] = Condition.IsDayOfMonth] = "IsDayOfMonth";
  DayOfMonthCondition2[DayOfMonthCondition2["IsEvenNumber"] = Condition.IsEvenNumber] = "IsEvenNumber";
  DayOfMonthCondition2[DayOfMonthCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  DayOfMonthCondition2[DayOfMonthCondition2["IsGreaterThan"] = Condition.IsGreaterThan] = "IsGreaterThan";
  DayOfMonthCondition2[DayOfMonthCondition2["IsGreaterThanOrEqual"] = Condition.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  DayOfMonthCondition2[DayOfMonthCondition2["IsInteger"] = Condition.IsInteger] = "IsInteger";
  DayOfMonthCondition2[DayOfMonthCondition2["IsLessThan"] = Condition.IsLessThan] = "IsLessThan";
  DayOfMonthCondition2[DayOfMonthCondition2["IsLessThanOrEqual"] = Condition.IsLessThanOrEqual] = "IsLessThanOrEqual";
  DayOfMonthCondition2[DayOfMonthCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  DayOfMonthCondition2[DayOfMonthCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  DayOfMonthCondition2[DayOfMonthCondition2["IsNumber"] = Condition.IsNumber] = "IsNumber";
  DayOfMonthCondition2[DayOfMonthCondition2["IsOddNumber"] = Condition.IsOddNumber] = "IsOddNumber";
  DayOfMonthCondition2[DayOfMonthCondition2["IsToday"] = Condition.IsToday] = "IsToday";
  DayOfMonthCondition2[DayOfMonthCondition2["IsWeekday"] = Condition.IsWeekday] = "IsWeekday";
  DayOfMonthCondition2[DayOfMonthCondition2["IsWeekend"] = Condition.IsWeekend] = "IsWeekend";
})(DayOfMonthCondition || (DayOfMonthCondition = {}));
var MonthCondition;
(function(MonthCondition2) {
  MonthCondition2[MonthCondition2["IsAfter"] = Condition.IsAfter] = "IsAfter";
  MonthCondition2[MonthCondition2["IsAfterOrEqual"] = Condition.IsAfterOrEqual] = "IsAfterOrEqual";
  MonthCondition2[MonthCondition2["IsBefore"] = Condition.IsBefore] = "IsBefore";
  MonthCondition2[MonthCondition2["IsBeforeOrEqual"] = Condition.IsBeforeOrEqual] = "IsBeforeOrEqual";
  MonthCondition2[MonthCondition2["IsBetween"] = Condition.IsBetween] = "IsBetween";
  MonthCondition2[MonthCondition2["IsEvenNumber"] = Condition.IsEvenNumber] = "IsEvenNumber";
  MonthCondition2[MonthCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  MonthCondition2[MonthCondition2["IsGreaterThan"] = Condition.IsGreaterThan] = "IsGreaterThan";
  MonthCondition2[MonthCondition2["IsGreaterThanOrEqual"] = Condition.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  MonthCondition2[MonthCondition2["IsInteger"] = Condition.IsInteger] = "IsInteger";
  MonthCondition2[MonthCondition2["IsLessThan"] = Condition.IsLessThan] = "IsLessThan";
  MonthCondition2[MonthCondition2["IsLessThanOrEqual"] = Condition.IsLessThanOrEqual] = "IsLessThanOrEqual";
  MonthCondition2[MonthCondition2["IsMonth"] = Condition.IsMonth] = "IsMonth";
  MonthCondition2[MonthCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  MonthCondition2[MonthCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  MonthCondition2[MonthCondition2["IsNumber"] = Condition.IsNumber] = "IsNumber";
  MonthCondition2[MonthCondition2["IsOddNumber"] = Condition.IsOddNumber] = "IsOddNumber";
  MonthCondition2[MonthCondition2["IsThisMonth"] = Condition.IsThisMonth] = "IsThisMonth";
})(MonthCondition || (MonthCondition = {}));
var TimeCondition;
(function(TimeCondition2) {
  TimeCondition2[TimeCondition2["IsAfter"] = Condition.IsAfter] = "IsAfter";
  TimeCondition2[TimeCondition2["IsAfterOrEqual"] = Condition.IsAfterOrEqual] = "IsAfterOrEqual";
  TimeCondition2[TimeCondition2["IsBefore"] = Condition.IsBefore] = "IsBefore";
  TimeCondition2[TimeCondition2["IsBeforeOrEqual"] = Condition.IsBeforeOrEqual] = "IsBeforeOrEqual";
  TimeCondition2[TimeCondition2["IsBetween"] = Condition.IsBetween] = "IsBetween";
  TimeCondition2[TimeCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  TimeCondition2[TimeCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  TimeCondition2[TimeCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  TimeCondition2[TimeCondition2["IsTime"] = Condition.IsTime] = "IsTime";
})(TimeCondition || (TimeCondition = {}));
var TimeRangeCondition;
(function(TimeRangeCondition2) {
  TimeRangeCondition2[TimeRangeCondition2["IsAfter"] = Condition.IsAfter] = "IsAfter";
  TimeRangeCondition2[TimeRangeCondition2["IsBefore"] = Condition.IsBefore] = "IsBefore";
  TimeRangeCondition2[TimeRangeCondition2["IsBeforeOrAfter"] = Condition.IsBeforeOrAfter] = "IsBeforeOrAfter";
  TimeRangeCondition2[TimeRangeCondition2["IsBetween"] = Condition.IsBetween] = "IsBetween";
  TimeRangeCondition2[TimeRangeCondition2["IsTime"] = Condition.IsTime] = "IsTime";
  TimeRangeCondition2[TimeRangeCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  TimeRangeCondition2[TimeRangeCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  TimeRangeCondition2[TimeRangeCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  TimeRangeCondition2[TimeRangeCondition2["IsTimeRange"] = Condition.IsTimeRange] = "IsTimeRange";
})(TimeRangeCondition || (TimeRangeCondition = {}));
var TimeOfDayCondition;
(function(TimeOfDayCondition2) {
  TimeOfDayCondition2[TimeOfDayCondition2["IsAfter"] = Condition.IsAfter] = "IsAfter";
  TimeOfDayCondition2[TimeOfDayCondition2["IsBefore"] = Condition.IsBefore] = "IsBefore";
  TimeOfDayCondition2[TimeOfDayCondition2["IsBeforeOrAfter"] = Condition.IsBeforeOrAfter] = "IsBeforeOrAfter";
  TimeOfDayCondition2[TimeOfDayCondition2["IsBetween"] = Condition.IsBetween] = "IsBetween";
  TimeOfDayCondition2[TimeOfDayCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  TimeOfDayCondition2[TimeOfDayCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  TimeOfDayCondition2[TimeOfDayCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  TimeOfDayCondition2[TimeOfDayCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  TimeOfDayCondition2[TimeOfDayCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  TimeOfDayCondition2[TimeOfDayCondition2["IsTimeOfDay"] = Condition.IsTimeOfDay] = "IsTimeOfDay";
  TimeOfDayCondition2[TimeOfDayCondition2["IsTimeRange"] = Condition.IsTimeRange] = "IsTimeRange";
})(TimeOfDayCondition || (TimeOfDayCondition = {}));
var WeekdayCondition;
(function(WeekdayCondition2) {
  WeekdayCondition2[WeekdayCondition2["IsAfter"] = Condition.IsAfter] = "IsAfter";
  WeekdayCondition2[WeekdayCondition2["IsAfterOrEqual"] = Condition.IsAfterOrEqual] = "IsAfterOrEqual";
  WeekdayCondition2[WeekdayCondition2["IsBefore"] = Condition.IsBefore] = "IsBefore";
  WeekdayCondition2[WeekdayCondition2["IsBeforeOrEqual"] = Condition.IsBeforeOrEqual] = "IsBeforeOrEqual";
  WeekdayCondition2[WeekdayCondition2["IsBetween"] = Condition.IsBetween] = "IsBetween";
  WeekdayCondition2[WeekdayCondition2["IsEvenNumber"] = Condition.IsEvenNumber] = "IsEvenNumber";
  WeekdayCondition2[WeekdayCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  WeekdayCondition2[WeekdayCondition2["IsGreaterThan"] = Condition.IsGreaterThan] = "IsGreaterThan";
  WeekdayCondition2[WeekdayCondition2["IsGreaterThanOrEqual"] = Condition.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  WeekdayCondition2[WeekdayCondition2["IsLessThan"] = Condition.IsLessThan] = "IsLessThan";
  WeekdayCondition2[WeekdayCondition2["IsLessThanOrEqual"] = Condition.IsLessThanOrEqual] = "IsLessThanOrEqual";
  WeekdayCondition2[WeekdayCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  WeekdayCondition2[WeekdayCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  WeekdayCondition2[WeekdayCondition2["IsNumber"] = Condition.IsNumber] = "IsNumber";
  WeekdayCondition2[WeekdayCondition2["IsOddNumber"] = Condition.IsOddNumber] = "IsOddNumber";
  WeekdayCondition2[WeekdayCondition2["IsWeekday"] = Condition.IsWeekday] = "IsWeekday";
  WeekdayCondition2[WeekdayCondition2["IsWeekend"] = Condition.IsWeekend] = "IsWeekend";
})(WeekdayCondition || (WeekdayCondition = {}));
var YearCondition;
(function(YearCondition2) {
  YearCondition2[YearCondition2["IsAfter"] = Condition.IsAfter] = "IsAfter";
  YearCondition2[YearCondition2["IsAfterOrEqual"] = Condition.IsAfterOrEqual] = "IsAfterOrEqual";
  YearCondition2[YearCondition2["IsBefore"] = Condition.IsBefore] = "IsBefore";
  YearCondition2[YearCondition2["IsBeforeOrEqual"] = Condition.IsBeforeOrEqual] = "IsBeforeOrEqual";
  YearCondition2[YearCondition2["IsBetween"] = Condition.IsBetween] = "IsBetween";
  YearCondition2[YearCondition2["IsEvenNumber"] = Condition.IsEvenNumber] = "IsEvenNumber";
  YearCondition2[YearCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  YearCondition2[YearCondition2["IsGreaterThan"] = Condition.IsGreaterThan] = "IsGreaterThan";
  YearCondition2[YearCondition2["IsGreaterThanOrEqual"] = Condition.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  YearCondition2[YearCondition2["IsInteger"] = Condition.IsInteger] = "IsInteger";
  YearCondition2[YearCondition2["IsLessThan"] = Condition.IsLessThan] = "IsLessThan";
  YearCondition2[YearCondition2["IsLessThanOrEqual"] = Condition.IsLessThanOrEqual] = "IsLessThanOrEqual";
  YearCondition2[YearCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  YearCondition2[YearCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  YearCondition2[YearCondition2["IsNumber"] = Condition.IsNumber] = "IsNumber";
  YearCondition2[YearCondition2["IsOddNumber"] = Condition.IsOddNumber] = "IsOddNumber";
  YearCondition2[YearCondition2["IsThisYear"] = Condition.IsThisYear] = "IsThisYear";
  YearCondition2[YearCondition2["IsYear"] = Condition.IsYear] = "IsYear";
})(YearCondition || (YearCondition = {}));
var HexadecimalCondition;
(function(HexadecimalCondition2) {
  HexadecimalCondition2[HexadecimalCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  HexadecimalCondition2[HexadecimalCondition2["IsHexadecimal"] = Condition.IsHexadecimal] = "IsHexadecimal";
  HexadecimalCondition2[HexadecimalCondition2["IsLengthEqual"] = Condition.IsLengthEqual] = "IsLengthEqual";
  HexadecimalCondition2[HexadecimalCondition2["IsLengthGreaterThan"] = Condition.IsLengthGreaterThan] = "IsLengthGreaterThan";
  HexadecimalCondition2[HexadecimalCondition2["IsLengthGreaterThanOrEqual"] = Condition.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual";
  HexadecimalCondition2[HexadecimalCondition2["IsLengthLessThan"] = Condition.IsLengthLessThan] = "IsLengthLessThan";
  HexadecimalCondition2[HexadecimalCondition2["IsLengthLessThanOrEqual"] = Condition.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual";
  HexadecimalCondition2[HexadecimalCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  HexadecimalCondition2[HexadecimalCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  HexadecimalCondition2[HexadecimalCondition2["IsString"] = Condition.IsString] = "IsString";
})(HexadecimalCondition || (HexadecimalCondition = {}));
var JSONCondition;
(function(JSONCondition2) {
  JSONCondition2[JSONCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  JSONCondition2[JSONCondition2["IsJSON"] = Condition.IsJSON] = "IsJSON";
  JSONCondition2[JSONCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  JSONCondition2[JSONCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
})(JSONCondition || (JSONCondition = {}));
var MarkdownCondition;
(function(MarkdownCondition2) {
  MarkdownCondition2[MarkdownCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  MarkdownCondition2[MarkdownCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  MarkdownCondition2[MarkdownCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  MarkdownCondition2[MarkdownCondition2["IsMarkdown"] = Condition.IsMarkdown] = "IsMarkdown";
  MarkdownCondition2[MarkdownCondition2["IsString"] = Condition.IsString] = "IsString";
})(MarkdownCondition || (MarkdownCondition = {}));
var MenuCondition;
(function(MenuCondition2) {
  MenuCondition2[MenuCondition2["Contains"] = Condition.Contains] = "Contains";
  MenuCondition2[MenuCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  MenuCondition2[MenuCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  MenuCondition2[MenuCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
})(MenuCondition || (MenuCondition = {}));
var TagsCondition;
(function(TagsCondition2) {
  TagsCondition2[TagsCondition2["Contains"] = Condition.Contains] = "Contains";
  TagsCondition2[TagsCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  TagsCondition2[TagsCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  TagsCondition2[TagsCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
})(TagsCondition || (TagsCondition = {}));
var DataURICondition;
(function(DataURICondition2) {
  DataURICondition2[DataURICondition2["Contains"] = Condition.Contains] = "Contains";
  DataURICondition2[DataURICondition2["IsDataURI"] = Condition.IsDataURI] = "IsDataURI";
  DataURICondition2[DataURICondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  DataURICondition2[DataURICondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  DataURICondition2[DataURICondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  DataURICondition2[DataURICondition2["IsString"] = Condition.IsString] = "IsString";
})(DataURICondition || (DataURICondition = {}));
var DomainNameCondition;
(function(DomainNameCondition2) {
  DomainNameCondition2[DomainNameCondition2["Contains"] = Condition.Contains] = "Contains";
  DomainNameCondition2[DomainNameCondition2["IsDomainName"] = Condition.IsDomainName] = "IsDomainName";
  DomainNameCondition2[DomainNameCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  DomainNameCondition2[DomainNameCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  DomainNameCondition2[DomainNameCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  DomainNameCondition2[DomainNameCondition2["IsString"] = Condition.IsString] = "IsString";
})(DomainNameCondition || (DomainNameCondition = {}));
var EmailCondition;
(function(EmailCondition2) {
  EmailCondition2[EmailCondition2["Contains"] = Condition.Contains] = "Contains";
  EmailCondition2[EmailCondition2["IsEmailAddress"] = Condition.IsEmailAddress] = "IsEmailAddress";
  EmailCondition2[EmailCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  EmailCondition2[EmailCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  EmailCondition2[EmailCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  EmailCondition2[EmailCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  EmailCondition2[EmailCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  EmailCondition2[EmailCondition2["IsString"] = Condition.IsString] = "IsString";
})(EmailCondition || (EmailCondition = {}));
var IPAddressCondition;
(function(IPAddressCondition2) {
  IPAddressCondition2[IPAddressCondition2["Contains"] = Condition.Contains] = "Contains";
  IPAddressCondition2[IPAddressCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  IPAddressCondition2[IPAddressCondition2["IsIPAddress"] = Condition.IsIPAddress] = "IsIPAddress";
  IPAddressCondition2[IPAddressCondition2["IsInIPAddressRange"] = Condition.IsInIPAddressRange] = "IsInIPAddressRange";
  IPAddressCondition2[IPAddressCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  IPAddressCondition2[IPAddressCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  IPAddressCondition2[IPAddressCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  IPAddressCondition2[IPAddressCondition2["IsNotInIPAddressRange"] = Condition.IsNotInIPAddressRange] = "IsNotInIPAddressRange";
  IPAddressCondition2[IPAddressCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  IPAddressCondition2[IPAddressCondition2["IsString"] = Condition.IsString] = "IsString";
})(IPAddressCondition || (IPAddressCondition = {}));
var IPAddressRangeCondition;
(function(IPAddressRangeCondition2) {
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsIPAddressRange"] = Condition.IsIPAddressRange] = "IsIPAddressRange";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsNotInIPAddressRange"] = Condition.IsNotInIPAddressRange] = "IsNotInIPAddressRange";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  IPAddressRangeCondition2[IPAddressRangeCondition2["IsString"] = Condition.IsString] = "IsString";
})(IPAddressRangeCondition || (IPAddressRangeCondition = {}));
var PortCondition;
(function(PortCondition2) {
  PortCondition2[PortCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  PortCondition2[PortCondition2["IsGreaterThan"] = Condition.IsGreaterThan] = "IsGreaterThan";
  PortCondition2[PortCondition2["IsGreaterThanOrEqual"] = Condition.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  PortCondition2[PortCondition2["IsInteger"] = Condition.IsInteger] = "IsInteger";
  PortCondition2[PortCondition2["IsLessThan"] = Condition.IsLessThan] = "IsLessThan";
  PortCondition2[PortCondition2["IsLessThanOrEqual"] = Condition.IsLessThanOrEqual] = "IsLessThanOrEqual";
  PortCondition2[PortCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  PortCondition2[PortCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
})(PortCondition || (PortCondition = {}));
var MACAddressCondition;
(function(MACAddressCondition2) {
  MACAddressCondition2[MACAddressCondition2["Contains"] = Condition.Contains] = "Contains";
  MACAddressCondition2[MACAddressCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  MACAddressCondition2[MACAddressCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  MACAddressCondition2[MACAddressCondition2["IsMACAddress"] = Condition.IsMACAddress] = "IsMACAddress";
  MACAddressCondition2[MACAddressCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  MACAddressCondition2[MACAddressCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  MACAddressCondition2[MACAddressCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  MACAddressCondition2[MACAddressCondition2["IsString"] = Condition.IsString] = "IsString";
})(MACAddressCondition || (MACAddressCondition = {}));
var MagnetURICondition;
(function(MagnetURICondition2) {
  MagnetURICondition2[MagnetURICondition2["Contains"] = Condition.Contains] = "Contains";
  MagnetURICondition2[MagnetURICondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  MagnetURICondition2[MagnetURICondition2["IsInList"] = Condition.IsInList] = "IsInList";
  MagnetURICondition2[MagnetURICondition2["IsMagnetURI"] = Condition.IsMagnetURI] = "IsMagnetURI";
  MagnetURICondition2[MagnetURICondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  MagnetURICondition2[MagnetURICondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  MagnetURICondition2[MagnetURICondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  MagnetURICondition2[MagnetURICondition2["IsString"] = Condition.IsString] = "IsString";
})(MagnetURICondition || (MagnetURICondition = {}));
var MimeTypeCondition;
(function(MimeTypeCondition2) {
  MimeTypeCondition2[MimeTypeCondition2["Contains"] = Condition.Contains] = "Contains";
  MimeTypeCondition2[MimeTypeCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  MimeTypeCondition2[MimeTypeCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  MimeTypeCondition2[MimeTypeCondition2["IsMimeType"] = Condition.IsMimeType] = "IsMimeType";
  MimeTypeCondition2[MimeTypeCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  MimeTypeCondition2[MimeTypeCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  MimeTypeCondition2[MimeTypeCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  MimeTypeCondition2[MimeTypeCondition2["IsString"] = Condition.IsString] = "IsString";
})(MimeTypeCondition || (MimeTypeCondition = {}));
var SlugCondition;
(function(SlugCondition2) {
  SlugCondition2[SlugCondition2["Contains"] = Condition.Contains] = "Contains";
  SlugCondition2[SlugCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  SlugCondition2[SlugCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  SlugCondition2[SlugCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  SlugCondition2[SlugCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  SlugCondition2[SlugCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  SlugCondition2[SlugCondition2["IsString"] = Condition.IsString] = "IsString";
  SlugCondition2[SlugCondition2["IsSlug"] = Condition.IsSlug] = "IsSlug";
})(SlugCondition || (SlugCondition = {}));
var URLCondition;
(function(URLCondition2) {
  URLCondition2[URLCondition2["Contains"] = Condition.Contains] = "Contains";
  URLCondition2[URLCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  URLCondition2[URLCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  URLCondition2[URLCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  URLCondition2[URLCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  URLCondition2[URLCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  URLCondition2[URLCondition2["IsString"] = Condition.IsString] = "IsString";
  URLCondition2[URLCondition2["IsURL"] = Condition.IsURL] = "IsURL";
})(URLCondition || (URLCondition = {}));
var NumberCondition;
(function(NumberCondition2) {
  NumberCondition2[NumberCondition2["IsAfter"] = Condition.IsAfter] = "IsAfter";
  NumberCondition2[NumberCondition2["IsAfterOrEqual"] = Condition.IsAfterOrEqual] = "IsAfterOrEqual";
  NumberCondition2[NumberCondition2["IsBefore"] = Condition.IsBefore] = "IsBefore";
  NumberCondition2[NumberCondition2["IsBeforeOrEqual"] = Condition.IsBeforeOrEqual] = "IsBeforeOrEqual";
  NumberCondition2[NumberCondition2["IsBetween"] = Condition.IsBetween] = "IsBetween";
  NumberCondition2[NumberCondition2["IsDecimal"] = Condition.IsDecimal] = "IsDecimal";
  NumberCondition2[NumberCondition2["IsDivisibleBy"] = Condition.IsDivisibleBy] = "IsDivisibleBy";
  NumberCondition2[NumberCondition2["IsEAN"] = Condition.IsEAN] = "IsEAN";
  NumberCondition2[NumberCondition2["IsEIN"] = Condition.IsEIN] = "IsEIN";
  NumberCondition2[NumberCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  NumberCondition2[NumberCondition2["IsEvenNumber"] = Condition.IsEvenNumber] = "IsEvenNumber";
  NumberCondition2[NumberCondition2["IsFloat"] = Condition.IsFloat] = "IsFloat";
  NumberCondition2[NumberCondition2["IsGreaterThan"] = Condition.IsGreaterThan] = "IsGreaterThan";
  NumberCondition2[NumberCondition2["IsGreaterThanOrEqual"] = Condition.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  NumberCondition2[NumberCondition2["IsInt"] = Condition.IsInteger] = "IsInt";
  NumberCondition2[NumberCondition2["IsISBN"] = Condition.IsISBN] = "IsISBN";
  NumberCondition2[NumberCondition2["IsISMN"] = Condition.IsISMN] = "IsISMN";
  NumberCondition2[NumberCondition2["IsISSN"] = Condition.IsISSN] = "IsISSN";
  NumberCondition2[NumberCondition2["IsLatitude"] = Condition.IsLatitude] = "IsLatitude";
  NumberCondition2[NumberCondition2["IsLongitude"] = Condition.IsLongitude] = "IsLongitude";
  NumberCondition2[NumberCondition2["IsLessThan"] = Condition.IsLessThan] = "IsLessThan";
  NumberCondition2[NumberCondition2["IsLessThanOrEqual"] = Condition.IsLessThanOrEqual] = "IsLessThanOrEqual";
  NumberCondition2[NumberCondition2["IsMACAddress"] = Condition.IsMACAddress] = "IsMACAddress";
  NumberCondition2[NumberCondition2["IsNumber"] = Condition.IsNumber] = "IsNumber";
  NumberCondition2[NumberCondition2["IsNegativeNumber"] = Condition.IsNegativeNumber] = "IsNegativeNumber";
  NumberCondition2[NumberCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  NumberCondition2[NumberCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  NumberCondition2[NumberCondition2["IsOddNumber"] = Condition.IsOddNumber] = "IsOddNumber";
  NumberCondition2[NumberCondition2["IsPassportNumber"] = Condition.IsPassportNumber] = "IsPassportNumber";
  NumberCondition2[NumberCondition2["IsPhoneNumber"] = Condition.IsPhoneNumber] = "IsPhoneNumber";
  NumberCondition2[NumberCondition2["IsPort"] = Condition.IsPort] = "IsPort";
  NumberCondition2[NumberCondition2["IsPositiveNumber"] = Condition.IsPositiveNumber] = "IsPositiveNumber";
  NumberCondition2[NumberCondition2["IsPostalCode"] = Condition.IsPostalCode] = "IsPostalCode";
  NumberCondition2[NumberCondition2["IsSemanticVersion"] = Condition.IsSemanticVersion] = "IsSemanticVersion";
  NumberCondition2[NumberCondition2["IsSSN"] = Condition.IsSSN] = "IsSSN";
  NumberCondition2[NumberCondition2["IsTaxIDNumber"] = Condition.IsTaxIDNumber] = "IsTaxIDNumber";
  NumberCondition2[NumberCondition2["IsUUID"] = Condition.IsUUID] = "IsUUID";
  NumberCondition2[NumberCondition2["IsVATIDNumber"] = Condition.IsVATIDNumber] = "IsVATIDNumber";
})(NumberCondition || (NumberCondition = {}));
var FloatCondition;
(function(FloatCondition2) {
  FloatCondition2[FloatCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  FloatCondition2[FloatCondition2["IsFloat"] = Condition.IsFloat] = "IsFloat";
  FloatCondition2[FloatCondition2["IsGreaterThan"] = Condition.IsGreaterThan] = "IsGreaterThan";
  FloatCondition2[FloatCondition2["IsGreaterThanOrEqual"] = Condition.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  FloatCondition2[FloatCondition2["IsLessThan"] = Condition.IsLessThan] = "IsLessThan";
  FloatCondition2[FloatCondition2["IsLessThanOrEqual"] = Condition.IsLessThanOrEqual] = "IsLessThanOrEqual";
  FloatCondition2[FloatCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  FloatCondition2[FloatCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  FloatCondition2[FloatCondition2["IsNumber"] = Condition.IsNumber] = "IsNumber";
  FloatCondition2[FloatCondition2["IsNumeric"] = Condition.IsNumeric] = "IsNumeric";
})(FloatCondition || (FloatCondition = {}));
var IntegerCondition;
(function(IntegerCondition2) {
  IntegerCondition2[IntegerCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  IntegerCondition2[IntegerCondition2["IsInteger"] = Condition.IsInteger] = "IsInteger";
  IntegerCondition2[IntegerCondition2["IsGreaterThan"] = Condition.IsGreaterThan] = "IsGreaterThan";
  IntegerCondition2[IntegerCondition2["IsGreaterThanOrEqual"] = Condition.IsGreaterThanOrEqual] = "IsGreaterThanOrEqual";
  IntegerCondition2[IntegerCondition2["IsLessThan"] = Condition.IsLessThan] = "IsLessThan";
  IntegerCondition2[IntegerCondition2["IsLessThanOrEqual"] = Condition.IsLessThanOrEqual] = "IsLessThanOrEqual";
  IntegerCondition2[IntegerCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  IntegerCondition2[IntegerCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  IntegerCondition2[IntegerCondition2["IsNumber"] = Condition.IsNumber] = "IsNumber";
  IntegerCondition2[IntegerCondition2["IsNumeric"] = Condition.IsNumeric] = "IsNumeric";
})(IntegerCondition || (IntegerCondition = {}));
var CreditCardCondition;
(function(CreditCardCondition2) {
  CreditCardCondition2[CreditCardCondition2["IsCreditCard"] = Condition.IsCreditCard] = "IsCreditCard";
  CreditCardCondition2[CreditCardCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  CreditCardCondition2[CreditCardCondition2["IsLengthEqual"] = Condition.IsLengthEqual] = "IsLengthEqual";
  CreditCardCondition2[CreditCardCondition2["IsLengthGreaterThan"] = Condition.IsLengthGreaterThan] = "IsLengthGreaterThan";
  CreditCardCondition2[CreditCardCondition2["IsLengthGreaterThanOrEqual"] = Condition.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual";
  CreditCardCondition2[CreditCardCondition2["IsLengthLessThan"] = Condition.IsLengthLessThan] = "IsLengthLessThan";
  CreditCardCondition2[CreditCardCondition2["IsLengthLessThanOrEqual"] = Condition.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual";
  CreditCardCondition2[CreditCardCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  CreditCardCondition2[CreditCardCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  CreditCardCondition2[CreditCardCondition2["IsRegexMatch"] = Condition.IsRegexMatch] = "IsRegexMatch";
  CreditCardCondition2[CreditCardCondition2["IsNotRegexMatch"] = Condition.IsNotRegexMatch] = "IsNotRegexMatch";
})(CreditCardCondition || (CreditCardCondition = {}));
var EmailAddressCondition;
(function(EmailAddressCondition2) {
  EmailAddressCondition2[EmailAddressCondition2["isEmailAddress"] = Condition.IsEmailAddress] = "isEmailAddress";
  EmailAddressCondition2[EmailAddressCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  EmailAddressCondition2[EmailAddressCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  EmailAddressCondition2[EmailAddressCondition2["IsLengthEqual"] = Condition.IsLengthEqual] = "IsLengthEqual";
  EmailAddressCondition2[EmailAddressCondition2["IsLengthGreaterThan"] = Condition.IsLengthGreaterThan] = "IsLengthGreaterThan";
  EmailAddressCondition2[EmailAddressCondition2["IsLengthGreaterThanOrEqual"] = Condition.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual";
  EmailAddressCondition2[EmailAddressCondition2["IsLengthLessThan"] = Condition.IsLengthLessThan] = "IsLengthLessThan";
  EmailAddressCondition2[EmailAddressCondition2["IsLengthLessThanOrEqual"] = Condition.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual";
  EmailAddressCondition2[EmailAddressCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  EmailAddressCondition2[EmailAddressCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  EmailAddressCondition2[EmailAddressCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  EmailAddressCondition2[EmailAddressCondition2["IsRegexMatch"] = Condition.IsRegexMatch] = "IsRegexMatch";
  EmailAddressCondition2[EmailAddressCondition2["IsNotRegexMatch"] = Condition.IsNotRegexMatch] = "IsNotRegexMatch";
})(EmailAddressCondition || (EmailAddressCondition = {}));
var LicensePlateNumber;
(function(LicensePlateNumber2) {
  LicensePlateNumber2[LicensePlateNumber2["IsLicensePlateNumber"] = Condition.IsLicensePlateNumber] = "IsLicensePlateNumber";
  LicensePlateNumber2[LicensePlateNumber2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  LicensePlateNumber2[LicensePlateNumber2["IsNotRegexMatch"] = Condition.IsNotRegexMatch] = "IsNotRegexMatch";
  LicensePlateNumber2[LicensePlateNumber2["IsString"] = Condition.IsString] = "IsString";
  LicensePlateNumber2[LicensePlateNumber2["IsRegexMatch"] = Condition.IsRegexMatch] = "IsRegexMatch";
})(LicensePlateNumber || (LicensePlateNumber = {}));
var PassportNumberCondition;
(function(PassportNumberCondition2) {
  PassportNumberCondition2[PassportNumberCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  PassportNumberCondition2[PassportNumberCondition2["IsPassportNumber"] = Condition.IsPassportNumber] = "IsPassportNumber";
  PassportNumberCondition2[PassportNumberCondition2["IsString"] = Condition.IsString] = "IsString";
  PassportNumberCondition2[PassportNumberCondition2["IsRegexMatch"] = Condition.IsRegexMatch] = "IsRegexMatch";
})(PassportNumberCondition || (PassportNumberCondition = {}));
var PasswordCondition;
(function(PasswordCondition2) {
  PasswordCondition2[PasswordCondition2["IsComplexEnough"] = Condition.IsComplexEnough] = "IsComplexEnough";
  PasswordCondition2[PasswordCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  PasswordCondition2[PasswordCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  PasswordCondition2[PasswordCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  PasswordCondition2[PasswordCondition2["IsNotRegexMatch"] = Condition.IsNotRegexMatch] = "IsNotRegexMatch";
  PasswordCondition2[PasswordCondition2["IsLengthGreaterThan"] = Condition.IsLengthGreaterThan] = "IsLengthGreaterThan";
  PasswordCondition2[PasswordCondition2["IsLengthGreaterThanOrEqual"] = Condition.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual";
  PasswordCondition2[PasswordCondition2["IsLengthLessThan"] = Condition.IsLengthLessThan] = "IsLengthLessThan";
  PasswordCondition2[PasswordCondition2["IsLengthLessThanOrEqual"] = Condition.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual";
  PasswordCondition2[PasswordCondition2["IsStrongPassword"] = Condition.IsStrongPassword] = "IsStrongPassword";
  PasswordCondition2[PasswordCondition2["IsString"] = Condition.IsString] = "IsString";
  PasswordCondition2[PasswordCondition2["IsRegexMatch"] = Condition.IsRegexMatch] = "IsRegexMatch";
})(PasswordCondition || (PasswordCondition = {}));
var PhoneNumberCondition;
(function(PhoneNumberCondition2) {
  PhoneNumberCondition2[PhoneNumberCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  PhoneNumberCondition2[PhoneNumberCondition2["IsNotRegexMatch"] = Condition.IsNotRegexMatch] = "IsNotRegexMatch";
  PhoneNumberCondition2[PhoneNumberCondition2["IsNumber"] = Condition.IsNumber] = "IsNumber";
  PhoneNumberCondition2[PhoneNumberCondition2["IsPhoneNumber"] = Condition.IsPhoneNumber] = "IsPhoneNumber";
  PhoneNumberCondition2[PhoneNumberCondition2["IsRegexMatch"] = Condition.IsRegexMatch] = "IsRegexMatch";
})(PhoneNumberCondition || (PhoneNumberCondition = {}));
var SocialSecurityNumberCondition;
(function(SocialSecurityNumberCondition2) {
  SocialSecurityNumberCondition2[SocialSecurityNumberCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  SocialSecurityNumberCondition2[SocialSecurityNumberCondition2["IsSSN"] = Condition.IsSSN] = "IsSSN";
  SocialSecurityNumberCondition2[SocialSecurityNumberCondition2["IsString"] = Condition.IsString] = "IsString";
  SocialSecurityNumberCondition2[SocialSecurityNumberCondition2["IsRegexMatch"] = Condition.IsRegexMatch] = "IsRegexMatch";
})(SocialSecurityNumberCondition || (SocialSecurityNumberCondition = {}));
var BICCondition;
(function(BICCondition2) {
  BICCondition2[BICCondition2["Contains"] = Condition.Contains] = "Contains";
  BICCondition2[BICCondition2["IsBIC"] = Condition.IsBIC] = "IsBIC";
  BICCondition2[BICCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  BICCondition2[BICCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  BICCondition2[BICCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  BICCondition2[BICCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  BICCondition2[BICCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  BICCondition2[BICCondition2["IsString"] = Condition.IsString] = "IsString";
})(BICCondition || (BICCondition = {}));
var EANCondition;
(function(EANCondition2) {
  EANCondition2[EANCondition2["Contains"] = Condition.Contains] = "Contains";
  EANCondition2[EANCondition2["IsEAN"] = Condition.IsEAN] = "IsEAN";
  EANCondition2[EANCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  EANCondition2[EANCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  EANCondition2[EANCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  EANCondition2[EANCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  EANCondition2[EANCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  EANCondition2[EANCondition2["IsString"] = Condition.IsString] = "IsString";
})(EANCondition || (EANCondition = {}));
var EINCondition;
(function(EINCondition2) {
  EINCondition2[EINCondition2["Contains"] = Condition.Contains] = "Contains";
  EINCondition2[EINCondition2["IsEIN"] = Condition.IsEIN] = "IsEIN";
  EINCondition2[EINCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  EINCondition2[EINCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  EINCondition2[EINCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  EINCondition2[EINCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  EINCondition2[EINCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  EINCondition2[EINCondition2["IsString"] = Condition.IsString] = "IsString";
})(EINCondition || (EINCondition = {}));
var IBANCondition;
(function(IBANCondition2) {
  IBANCondition2[IBANCondition2["Contains"] = Condition.Contains] = "Contains";
  IBANCondition2[IBANCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  IBANCondition2[IBANCondition2["IsIBAN"] = Condition.IsIBAN] = "IsIBAN";
  IBANCondition2[IBANCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  IBANCondition2[IBANCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  IBANCondition2[IBANCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  IBANCondition2[IBANCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  IBANCondition2[IBANCondition2["IsString"] = Condition.IsString] = "IsString";
})(IBANCondition || (IBANCondition = {}));
var ISBNCondition;
(function(ISBNCondition2) {
  ISBNCondition2[ISBNCondition2["Contains"] = Condition.Contains] = "Contains";
  ISBNCondition2[ISBNCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  ISBNCondition2[ISBNCondition2["IsISBN"] = Condition.IsISBN] = "IsISBN";
  ISBNCondition2[ISBNCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  ISBNCondition2[ISBNCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  ISBNCondition2[ISBNCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  ISBNCondition2[ISBNCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  ISBNCondition2[ISBNCondition2["IsString"] = Condition.IsString] = "IsString";
})(ISBNCondition || (ISBNCondition = {}));
var ISINCondition;
(function(ISINCondition2) {
  ISINCondition2[ISINCondition2["Contains"] = Condition.Contains] = "Contains";
  ISINCondition2[ISINCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  ISINCondition2[ISINCondition2["IsISIN"] = Condition.IsISIN] = "IsISIN";
  ISINCondition2[ISINCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  ISINCondition2[ISINCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  ISINCondition2[ISINCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  ISINCondition2[ISINCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  ISINCondition2[ISINCondition2["IsString"] = Condition.IsString] = "IsString";
})(ISINCondition || (ISINCondition = {}));
var ISMNCondition;
(function(ISMNCondition2) {
  ISMNCondition2[ISMNCondition2["Contains"] = Condition.Contains] = "Contains";
  ISMNCondition2[ISMNCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  ISMNCondition2[ISMNCondition2["IsISMN"] = Condition.IsISMN] = "IsISMN";
  ISMNCondition2[ISMNCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  ISMNCondition2[ISMNCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  ISMNCondition2[ISMNCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  ISMNCondition2[ISMNCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  ISMNCondition2[ISMNCondition2["IsString"] = Condition.IsString] = "IsString";
})(ISMNCondition || (ISMNCondition = {}));
var ISSNCondition;
(function(ISSNCondition2) {
  ISSNCondition2[ISSNCondition2["Contains"] = Condition.Contains] = "Contains";
  ISSNCondition2[ISSNCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  ISSNCondition2[ISSNCondition2["IsISSN"] = Condition.IsISSN] = "IsISSN";
  ISSNCondition2[ISSNCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  ISSNCondition2[ISSNCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  ISSNCondition2[ISSNCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  ISSNCondition2[ISSNCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  ISSNCondition2[ISSNCondition2["IsString"] = Condition.IsString] = "IsString";
})(ISSNCondition || (ISSNCondition = {}));
var TaxIDNumberCondition;
(function(TaxIDNumberCondition2) {
  TaxIDNumberCondition2[TaxIDNumberCondition2["Contains"] = Condition.Contains] = "Contains";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsString"] = Condition.IsString] = "IsString";
  TaxIDNumberCondition2[TaxIDNumberCondition2["IsTaxIDNumber"] = Condition.IsTaxIDNumber] = "IsTaxIDNumber";
})(TaxIDNumberCondition || (TaxIDNumberCondition = {}));
var VATCondition;
(function(VATCondition2) {
  VATCondition2[VATCondition2["Contains"] = Condition.Contains] = "Contains";
  VATCondition2[VATCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  VATCondition2[VATCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  VATCondition2[VATCondition2["IsNotEqual"] = Condition.IsNotEqual] = "IsNotEqual";
  VATCondition2[VATCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  VATCondition2[VATCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  VATCondition2[VATCondition2["IsString"] = Condition.IsString] = "IsString";
  VATCondition2[VATCondition2["IsVATIDNumber"] = Condition.IsVATIDNumber] = "IsVATIDNumber";
})(VATCondition || (VATCondition = {}));
var StringCondition;
(function(StringCondition2) {
  StringCondition2[StringCondition2["Contains"] = Condition.Contains] = "Contains";
  StringCondition2[StringCondition2["HasNumberCount"] = Condition.HasNumberCount] = "HasNumberCount";
  StringCondition2[StringCondition2["HasLowercaseCount"] = Condition.HasLowercaseCount] = "HasLowercaseCount";
  StringCondition2[StringCondition2["HasLetterCount"] = Condition.HasLetterCount] = "HasLetterCount";
  StringCondition2[StringCondition2["HasSpacesCount"] = Condition.HasSpacesCount] = "HasSpacesCount";
  StringCondition2[StringCondition2["HasSymbolCount"] = Condition.HasSymbolCount] = "HasSymbolCount";
  StringCondition2[StringCondition2["HasUppercaseCount"] = Condition.HasUppercaseCount] = "HasUppercaseCount";
  StringCondition2[StringCondition2["IsAlpha"] = Condition.IsAlpha] = "IsAlpha";
  StringCondition2[StringCondition2["IsAlphanumeric"] = Condition.IsAlphanumeric] = "IsAlphanumeric";
  StringCondition2[StringCondition2["IsAscii"] = Condition.IsAscii] = "IsAscii";
  StringCondition2[StringCondition2["IsBase64"] = Condition.IsBase64] = "IsBase64";
  StringCondition2[StringCondition2["IsColor"] = Condition.IsColor] = "IsColor";
  StringCondition2[StringCondition2["IsComplexEnough"] = Condition.IsComplexEnough] = "IsComplexEnough";
  StringCondition2[StringCondition2["IsCreditCard"] = Condition.IsCreditCard] = "IsCreditCard";
  StringCondition2[StringCondition2["IsDataURI"] = Condition.IsDataURI] = "IsDataURI";
  StringCondition2[StringCondition2["IsDomainName"] = Condition.IsDomainName] = "IsDomainName";
  StringCondition2[StringCondition2["IsEmailAddress"] = Condition.IsEmailAddress] = "IsEmailAddress";
  StringCondition2[StringCondition2["IsEthereumAddress"] = Condition.IsEthereumAddress] = "IsEthereumAddress";
  StringCondition2[StringCondition2["IsEAN"] = Condition.IsEAN] = "IsEAN";
  StringCondition2[StringCondition2["IsEIN"] = Condition.IsEIN] = "IsEIN";
  StringCondition2[StringCondition2["IsEqual"] = Condition.IsEqual] = "IsEqual";
  StringCondition2[StringCondition2["IsIBAN"] = Condition.IsIBAN] = "IsIBAN";
  StringCondition2[StringCondition2["IsHSLColor"] = Condition.IsHSLColor] = "IsHSLColor";
  StringCondition2[StringCondition2["IsHexColor"] = Condition.IsHexColor] = "IsHexColor";
  StringCondition2[StringCondition2["IsHexadecimal"] = Condition.IsHexadecimal] = "IsHexadecimal";
  StringCondition2[StringCondition2["IsIdentityCardCode"] = Condition.IsIdentityCardCode] = "IsIdentityCardCode";
  StringCondition2[StringCondition2["IsIMEI"] = Condition.IsIMEI] = "IsIMEI";
  StringCondition2[StringCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  StringCondition2[StringCondition2["IsIPAddress"] = Condition.IsIPAddress] = "IsIPAddress";
  StringCondition2[StringCondition2["IsInIPAddressRange"] = Condition.IsInIPAddressRange] = "IsInIPAddressRange";
  StringCondition2[StringCondition2["IsISBN"] = Condition.IsISBN] = "IsISBN";
  StringCondition2[StringCondition2["IsISIN"] = Condition.IsISIN] = "IsISIN";
  StringCondition2[StringCondition2["IsISMN"] = Condition.IsISMN] = "IsISMN";
  StringCondition2[StringCondition2["IsISRC"] = Condition.IsISRC] = "IsISRC";
  StringCondition2[StringCondition2["IsISSN"] = Condition.IsISSN] = "IsISSN";
  StringCondition2[StringCondition2["IsLanguage"] = Condition.IsLanguage] = "IsLanguage";
  StringCondition2[StringCondition2["IsLatitude"] = Condition.IsLatitude] = "IsLatitude";
  StringCondition2[StringCondition2["IsLongitude"] = Condition.IsLongitude] = "IsLongitude";
  StringCondition2[StringCondition2["IsLengthEqual"] = Condition.IsLengthEqual] = "IsLengthEqual";
  StringCondition2[StringCondition2["IsLengthGreaterThan"] = Condition.IsLengthGreaterThan] = "IsLengthGreaterThan";
  StringCondition2[StringCondition2["IsLengthGreaterThanOrEqual"] = Condition.IsLengthGreaterThanOrEqual] = "IsLengthGreaterThanOrEqual";
  StringCondition2[StringCondition2["IsLengthLessThan"] = Condition.IsLengthLessThan] = "IsLengthLessThan";
  StringCondition2[StringCondition2["IsLengthLessThanOrEqual"] = Condition.IsLengthLessThanOrEqual] = "IsLengthLessThanOrEqual";
  StringCondition2[StringCondition2["IsLicensePlateNumber"] = Condition.IsLicensePlateNumber] = "IsLicensePlateNumber";
  StringCondition2[StringCondition2["IsLowercase"] = Condition.IsLowercase] = "IsLowercase";
  StringCondition2[StringCondition2["IsOctal"] = Condition.IsOctal] = "IsOctal";
  StringCondition2[StringCondition2["IsMACAddress"] = Condition.IsMACAddress] = "IsMACAddress";
  StringCondition2[StringCondition2["IsMD5"] = Condition.IsMD5] = "IsMD5";
  StringCondition2[StringCondition2["IsMagnetURI"] = Condition.IsMagnetURI] = "IsMagnetURI";
  StringCondition2[StringCondition2["IsMarkdown"] = Condition.IsMarkdown] = "IsMarkdown";
  StringCondition2[StringCondition2["IsMimeType"] = Condition.IsMimeType] = "IsMimeType";
  StringCondition2[StringCondition2["IsMonth"] = Condition.IsMonth] = "IsMonth";
  StringCondition2[StringCondition2["IsNotInIPAddressRange"] = Condition.IsNotInIPAddressRange] = "IsNotInIPAddressRange";
  StringCondition2[StringCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  StringCondition2[StringCondition2["IsNotNull"] = Condition.IsNotNull] = "IsNotNull";
  StringCondition2[StringCondition2["IsNotRegexMatch"] = Condition.IsNotRegexMatch] = "IsNotRegexMatch";
  StringCondition2[StringCondition2["IsNumber"] = Condition.IsNumber] = "IsNumber";
  StringCondition2[StringCondition2["IsNumeric"] = Condition.IsNumeric] = "IsNumeric";
  StringCondition2[StringCondition2["IsPassportNumber"] = Condition.IsPassportNumber] = "IsPassportNumber";
  StringCondition2[StringCondition2["IsPhoneNumber"] = Condition.IsPhoneNumber] = "IsPhoneNumber";
  StringCondition2[StringCondition2["IsPort"] = Condition.IsPort] = "IsPort";
  StringCondition2[StringCondition2["IsPostalCode"] = Condition.IsPostalCode] = "IsPostalCode";
  StringCondition2[StringCondition2["IsProvince"] = Condition.IsProvince] = "IsProvince";
  StringCondition2[StringCondition2["IsRegexMatch"] = Condition.IsRegexMatch] = "IsRegexMatch";
  StringCondition2[StringCondition2["IsSemanticVersion"] = Condition.IsSemanticVersion] = "IsSemanticVersion";
  StringCondition2[StringCondition2["IsSlug"] = Condition.IsSlug] = "IsSlug";
  StringCondition2[StringCondition2["IsSSN"] = Condition.IsSSN] = "IsSSN";
  StringCondition2[StringCondition2["IsState"] = Condition.IsState] = "IsState";
  StringCondition2[StringCondition2["IsStreetAddress"] = Condition.IsStreetAddress] = "IsStreetAddress";
  StringCondition2[StringCondition2["IsString"] = Condition.IsString] = "IsString";
  StringCondition2[StringCondition2["IsTaxIDNumber"] = Condition.IsTaxIDNumber] = "IsTaxIDNumber";
  StringCondition2[StringCondition2["IsURL"] = Condition.IsURL] = "IsURL";
  StringCondition2[StringCondition2["IsUUID"] = Condition.IsUUID] = "IsUUID";
  StringCondition2[StringCondition2["IsUppercase"] = Condition.IsUppercase] = "IsUppercase";
  StringCondition2[StringCondition2["IsVATIDNumber"] = Condition.IsVATIDNumber] = "IsVATIDNumber";
  StringCondition2[StringCondition2["IsWeekday"] = Condition.IsWeekday] = "IsWeekday";
  StringCondition2[StringCondition2["IsWeekend"] = Condition.IsWeekend] = "IsWeekend";
  StringCondition2[StringCondition2["IsYear"] = Condition.IsYear] = "IsYear";
})(StringCondition || (StringCondition = {}));
var LongTextCondition;
(function(LongTextCondition2) {
  LongTextCondition2[LongTextCondition2["Contains"] = Condition.Contains] = "Contains";
  LongTextCondition2[LongTextCondition2["IsAlpha"] = Condition.IsAlpha] = "IsAlpha";
  LongTextCondition2[LongTextCondition2["IsAlphanumeric"] = Condition.IsAlphanumeric] = "IsAlphanumeric";
  LongTextCondition2[LongTextCondition2["IsInList"] = Condition.IsInList] = "IsInList";
  LongTextCondition2[LongTextCondition2["IsMarkdown"] = Condition.IsMarkdown] = "IsMarkdown";
  LongTextCondition2[LongTextCondition2["IsNotInList"] = Condition.IsNotInList] = "IsNotInList";
  LongTextCondition2[LongTextCondition2["IsNumeric"] = Condition.IsNumeric] = "IsNumeric";
  LongTextCondition2[LongTextCondition2["IsLowercase"] = Condition.IsLowercase] = "IsLowercase";
  LongTextCondition2[LongTextCondition2["IsString"] = Condition.IsString] = "IsString";
  LongTextCondition2[LongTextCondition2["IsUppercase"] = Condition.IsUppercase] = "IsUppercase";
})(LongTextCondition || (LongTextCondition = {}));
var FormValidationProblem;
(function(FormValidationProblem2) {
  FormValidationProblem2["InvalidCharacters"] = "invalid-characters";
  FormValidationProblem2["InvalidPattern"] = "invalid-pattern";
  FormValidationProblem2["NotComplexEnough"] = "not-complex-enough";
  FormValidationProblem2["NotUnique"] = "not-unique";
  FormValidationProblem2["NotValidEmail"] = "not-valid-email";
  FormValidationProblem2["TooLong"] = "too-long";
  FormValidationProblem2["TooShort"] = "too-short";
  FormValidationProblem2["Required"] = "required";
})(FormValidationProblem || (FormValidationProblem = {}));
var Privilege;
(function(Privilege2) {
  Privilege2[Privilege2["Allowed"] = 0] = "Allowed";
  Privilege2[Privilege2["Blocked"] = 1] = "Blocked";
})(Privilege || (Privilege = {}));
var TaskStatus;
(function(TaskStatus2) {
  TaskStatus2["Canceled"] = "Canceled";
  TaskStatus2["Completed"] = "Completed";
  TaskStatus2["Created"] = "Created";
  TaskStatus2["Faulted"] = "Faulted";
  TaskStatus2["Queued"] = "Queued";
  TaskStatus2["Running"] = "Running";
  TaskStatus2["Waiting"] = "Waiting";
})(TaskStatus || (TaskStatus = {}));
var UserVerificationStatus;
(function(UserVerificationStatus2) {
  UserVerificationStatus2["Archived"] = "ARCHIVED";
  UserVerificationStatus2["Compromised"] = "COMPROMISED";
  UserVerificationStatus2["Confirmed"] = "CONFIRMED";
  UserVerificationStatus2["ForcePasswordChange"] = "FORCE_CHANGE_PASSWORD";
  UserVerificationStatus2["ResetRequired"] = "RESET_REQUIRED";
  UserVerificationStatus2["Unconfirmed"] = "UNCONFIRMED";
  UserVerificationStatus2["Unknown"] = "UNKNOWN";
})(UserVerificationStatus || (UserVerificationStatus = {}));
var UserAuthenticationVerificationType;
(function(UserAuthenticationVerificationType2) {
  UserAuthenticationVerificationType2["Code"] = "code";
  UserAuthenticationVerificationType2["Link"] = "link";
})(UserAuthenticationVerificationType || (UserAuthenticationVerificationType = {}));
var UserRole;
(function(UserRole2) {
  UserRole2["Owner"] = "Owner";
  UserRole2["Admin"] = "Admin";
  UserRole2["User"] = "User";
  UserRole2["Visitor"] = "Visitor";
})(UserRole || (UserRole = {}));
var PaymentIntentStatus;
(function(PaymentIntentStatus2) {
  PaymentIntentStatus2["RequiresPaymentMethod"] = "requires_payment_method";
  PaymentIntentStatus2["RequiresConfirmation"] = "requires_confirmation";
  PaymentIntentStatus2["RequiresAction"] = "requires_action";
  PaymentIntentStatus2["Processing"] = "processing";
  PaymentIntentStatus2["RequiresCapture"] = "requires_capture";
  PaymentIntentStatus2["Canceled"] = "canceled";
  PaymentIntentStatus2["Succeeded"] = "succeeded";
})(PaymentIntentStatus || (PaymentIntentStatus = {}));
var SubscriptionStatus;
(function(SubscriptionStatus2) {
  SubscriptionStatus2["Incomplete"] = "incomplete";
  SubscriptionStatus2["IncompleteExpired"] = "incomplete_expired";
  SubscriptionStatus2["Trialing"] = "trialing";
  SubscriptionStatus2["Active"] = "active";
  SubscriptionStatus2["PastDue"] = "past_due";
  SubscriptionStatus2["Canceled"] = "canceled";
  SubscriptionStatus2["Unpaid"] = "unpaid";
})(SubscriptionStatus || (SubscriptionStatus = {}));
var SubscriptionPlanDuration;
(function(SubscriptionPlanDuration2) {
  SubscriptionPlanDuration2["Monthly"] = "monthly";
  SubscriptionPlanDuration2["Quarterly"] = "quarterly";
  SubscriptionPlanDuration2["Yearly"] = "yearly";
  SubscriptionPlanDuration2["Lifetime"] = "lifetime";
})(SubscriptionPlanDuration || (SubscriptionPlanDuration = {}));
var CommunicationMedium;
(function(CommunicationMedium2) {
  CommunicationMedium2["Email"] = "email";
  CommunicationMedium2["PhoneNumber"] = "phone_number";
})(CommunicationMedium || (CommunicationMedium = {}));
var LogLevel;
(function(LogLevel2) {
  LogLevel2["Analytics"] = "analytics";
  LogLevel2["Critical"] = "critical";
  LogLevel2["Debug"] = "debug";
  LogLevel2["Exception"] = "exception";
  LogLevel2["Http"] = "http";
  LogLevel2["Info"] = "info";
  LogLevel2["Warning"] = "warning";
})(LogLevel || (LogLevel = {}));
var HttpRequestMethod;
(function(HttpRequestMethod2) {
  HttpRequestMethod2["Delete"] = "delete";
  HttpRequestMethod2["Get"] = "get";
  HttpRequestMethod2["Head"] = "head";
  HttpRequestMethod2["Patch"] = "patch";
  HttpRequestMethod2["Post"] = "post";
  HttpRequestMethod2["Put"] = "put";
})(HttpRequestMethod || (HttpRequestMethod = {}));
var HttpResponseCode;
(function(HttpResponseCode2) {
  HttpResponseCode2[HttpResponseCode2["CONTINUE"] = 100] = "CONTINUE";
  HttpResponseCode2[HttpResponseCode2["SWITCHING_PROTOCOLS"] = 101] = "SWITCHING_PROTOCOLS";
  HttpResponseCode2[HttpResponseCode2["PROCESSING"] = 102] = "PROCESSING";
  HttpResponseCode2[HttpResponseCode2["OK"] = 200] = "OK";
  HttpResponseCode2[HttpResponseCode2["CREATED"] = 201] = "CREATED";
  HttpResponseCode2[HttpResponseCode2["ACCEPTED"] = 202] = "ACCEPTED";
  HttpResponseCode2[HttpResponseCode2["NON_AUTHORITATIVE_INFORMATION"] = 203] = "NON_AUTHORITATIVE_INFORMATION";
  HttpResponseCode2[HttpResponseCode2["NO_CONTENT"] = 204] = "NO_CONTENT";
  HttpResponseCode2[HttpResponseCode2["RESET_CONTENT"] = 205] = "RESET_CONTENT";
  HttpResponseCode2[HttpResponseCode2["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
  HttpResponseCode2[HttpResponseCode2["MULTI_STATUS"] = 207] = "MULTI_STATUS";
  HttpResponseCode2[HttpResponseCode2["ALREADY_REPORTED"] = 208] = "ALREADY_REPORTED";
  HttpResponseCode2[HttpResponseCode2["IM_USED"] = 226] = "IM_USED";
  HttpResponseCode2[HttpResponseCode2["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
  HttpResponseCode2[HttpResponseCode2["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
  HttpResponseCode2[HttpResponseCode2["FOUND"] = 302] = "FOUND";
  HttpResponseCode2[HttpResponseCode2["SEE_OTHER"] = 303] = "SEE_OTHER";
  HttpResponseCode2[HttpResponseCode2["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
  HttpResponseCode2[HttpResponseCode2["USE_PROXY"] = 305] = "USE_PROXY";
  HttpResponseCode2[HttpResponseCode2["SWITCH_PROXY"] = 306] = "SWITCH_PROXY";
  HttpResponseCode2[HttpResponseCode2["TEMPORARY_REDIRECT"] = 307] = "TEMPORARY_REDIRECT";
  HttpResponseCode2[HttpResponseCode2["PERMANENT_REDIRECT"] = 308] = "PERMANENT_REDIRECT";
  HttpResponseCode2[HttpResponseCode2["BAD_REQUEST"] = 400] = "BAD_REQUEST";
  HttpResponseCode2[HttpResponseCode2["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
  HttpResponseCode2[HttpResponseCode2["PAYMENT_REQUIRED"] = 402] = "PAYMENT_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["FORBIDDEN"] = 403] = "FORBIDDEN";
  HttpResponseCode2[HttpResponseCode2["NOT_FOUND"] = 404] = "NOT_FOUND";
  HttpResponseCode2[HttpResponseCode2["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
  HttpResponseCode2[HttpResponseCode2["NOT_ACCEPTABLE"] = 406] = "NOT_ACCEPTABLE";
  HttpResponseCode2[HttpResponseCode2["PROXY_AUTHENTICATION_REQUIRED"] = 407] = "PROXY_AUTHENTICATION_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["REQUEST_TIMEOUT"] = 408] = "REQUEST_TIMEOUT";
  HttpResponseCode2[HttpResponseCode2["CONFLICT"] = 409] = "CONFLICT";
  HttpResponseCode2[HttpResponseCode2["GONE"] = 410] = "GONE";
  HttpResponseCode2[HttpResponseCode2["LENGTH_REQUIRED"] = 411] = "LENGTH_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
  HttpResponseCode2[HttpResponseCode2["PAYLOAD_TOO_LARGE"] = 413] = "PAYLOAD_TOO_LARGE";
  HttpResponseCode2[HttpResponseCode2["URI_TOO_LONG"] = 414] = "URI_TOO_LONG";
  HttpResponseCode2[HttpResponseCode2["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
  HttpResponseCode2[HttpResponseCode2["RANGE_NOT_SATISFIABLE"] = 416] = "RANGE_NOT_SATISFIABLE";
  HttpResponseCode2[HttpResponseCode2["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
  HttpResponseCode2[HttpResponseCode2["I_AM_A_TEAPOT"] = 418] = "I_AM_A_TEAPOT";
  HttpResponseCode2[HttpResponseCode2["MISDIRECTED_REQUEST"] = 421] = "MISDIRECTED_REQUEST";
  HttpResponseCode2[HttpResponseCode2["UNPROCESSABLE_ENTITY"] = 422] = "UNPROCESSABLE_ENTITY";
  HttpResponseCode2[HttpResponseCode2["LOCKED"] = 423] = "LOCKED";
  HttpResponseCode2[HttpResponseCode2["FAILED_DEPENDENCY"] = 424] = "FAILED_DEPENDENCY";
  HttpResponseCode2[HttpResponseCode2["TOO_EARLY"] = 425] = "TOO_EARLY";
  HttpResponseCode2[HttpResponseCode2["UPGRADE_REQUIRED"] = 426] = "UPGRADE_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["PRECONDITION_REQUIRED"] = 428] = "PRECONDITION_REQUIRED";
  HttpResponseCode2[HttpResponseCode2["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
  HttpResponseCode2[HttpResponseCode2["REQUEST_HEADER_FIELDS_TOO_LARGE"] = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE";
  HttpResponseCode2[HttpResponseCode2["UNAVAILABLE_FOR_LEGAL_REASONS"] = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS";
  HttpResponseCode2[HttpResponseCode2["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
  HttpResponseCode2[HttpResponseCode2["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
  HttpResponseCode2[HttpResponseCode2["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
  HttpResponseCode2[HttpResponseCode2["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
  HttpResponseCode2[HttpResponseCode2["GATEWAY_TIMEOUT"] = 504] = "GATEWAY_TIMEOUT";
  HttpResponseCode2[HttpResponseCode2["HTTP_VERSION_NOT_SUPPORTED"] = 505] = "HTTP_VERSION_NOT_SUPPORTED";
  HttpResponseCode2[HttpResponseCode2["VARIANT_ALSO_NEGOTIATES"] = 506] = "VARIANT_ALSO_NEGOTIATES";
  HttpResponseCode2[HttpResponseCode2["INSUFFICIENT_STORAGE"] = 507] = "INSUFFICIENT_STORAGE";
  HttpResponseCode2[HttpResponseCode2["LOOP_DETECTED"] = 508] = "LOOP_DETECTED";
  HttpResponseCode2[HttpResponseCode2["BANDWIDTH_LIMIT_EXCEEDED"] = 509] = "BANDWIDTH_LIMIT_EXCEEDED";
  HttpResponseCode2[HttpResponseCode2["NOT_EXTENDED"] = 510] = "NOT_EXTENDED";
  HttpResponseCode2[HttpResponseCode2["NETWORK_AUTHENTICATION_REQUIRED"] = 511] = "NETWORK_AUTHENTICATION_REQUIRED";
})(HttpResponseCode || (HttpResponseCode = {}));
var CountryCode;
(function(CountryCode2) {
  CountryCode2["Afghanistan"] = "AF";
  CountryCode2["Albania"] = "AL";
  CountryCode2["Algeria"] = "DZ";
  CountryCode2["AmericanSamoa"] = "AS";
  CountryCode2["Andorra"] = "AD";
  CountryCode2["Angola"] = "AO";
  CountryCode2["Anguilla"] = "AI";
  CountryCode2["Antarctica"] = "AQ";
  CountryCode2["AntiguaAndBarbuda"] = "AG";
  CountryCode2["Argentina"] = "AR";
  CountryCode2["Armenia"] = "AM";
  CountryCode2["Aruba"] = "AW";
  CountryCode2["Australia"] = "AU";
  CountryCode2["Austria"] = "AT";
  CountryCode2["Azerbaijan"] = "AZ";
  CountryCode2["Bahamas"] = "BS";
  CountryCode2["Bahrain"] = "BH";
  CountryCode2["Bangladesh"] = "BD";
  CountryCode2["Barbados"] = "BB";
  CountryCode2["Belarus"] = "BY";
  CountryCode2["Belgium"] = "BE";
  CountryCode2["Belize"] = "BZ";
  CountryCode2["Benin"] = "BJ";
  CountryCode2["Bermuda"] = "BM";
  CountryCode2["Bhutan"] = "BT";
  CountryCode2["Bolivia"] = "BO";
  CountryCode2["BosniaAndHerzegovina"] = "BA";
  CountryCode2["Botswana"] = "BW";
  CountryCode2["BouvetIsland"] = "BV";
  CountryCode2["Brazil"] = "BR";
  CountryCode2["BritishIndianOceanTerritory"] = "IO";
  CountryCode2["Brunei"] = "BN";
  CountryCode2["Bulgaria"] = "BG";
  CountryCode2["BurkinaFaso"] = "BF";
  CountryCode2["Burundi"] = "BI";
  CountryCode2["Cambodia"] = "KH";
  CountryCode2["Cameroon"] = "CM";
  CountryCode2["Canada"] = "CA";
  CountryCode2["CapeVerde"] = "CV";
  CountryCode2["CaymanIslands"] = "KY";
  CountryCode2["CentralAfricanRepublic"] = "CF";
  CountryCode2["Chad"] = "TD";
  CountryCode2["Chile"] = "CL";
  CountryCode2["China"] = "CN";
  CountryCode2["ChristmasIsland"] = "CX";
  CountryCode2["CocosKeelingIslands"] = "CC";
  CountryCode2["Colombia"] = "CO";
  CountryCode2["Comoros"] = "KM";
  CountryCode2["Congo"] = "CG";
  CountryCode2["CongoTheDemocraticRepublicOfThe"] = "CD";
  CountryCode2["CookIslands"] = "CK";
  CountryCode2["CostaRica"] = "CR";
  CountryCode2["CoteDIvoire"] = "CI";
  CountryCode2["Croatia"] = "HR";
  CountryCode2["Cuba"] = "CU";
  CountryCode2["Cyprus"] = "CY";
  CountryCode2["CzechRepublic"] = "CZ";
  CountryCode2["Denmark"] = "DK";
  CountryCode2["Djibouti"] = "DJ";
  CountryCode2["Dominica"] = "DM";
  CountryCode2["DominicanRepublic"] = "DO";
  CountryCode2["Ecuador"] = "EC";
  CountryCode2["Egypt"] = "EG";
  CountryCode2["ElSalvador"] = "SV";
  CountryCode2["EquatorialGuinea"] = "GQ";
  CountryCode2["Eritrea"] = "ER";
  CountryCode2["Estonia"] = "EE";
  CountryCode2["Ethiopia"] = "ET";
  CountryCode2["FalklandIslands"] = "FK";
  CountryCode2["FaroeIslands"] = "FO";
  CountryCode2["Fiji"] = "FJ";
  CountryCode2["Finland"] = "FI";
  CountryCode2["France"] = "FR";
  CountryCode2["FrenchGuiana"] = "GF";
  CountryCode2["FrenchPolynesia"] = "PF";
  CountryCode2["FrenchSouthernTerritories"] = "TF";
  CountryCode2["Gabon"] = "GA";
  CountryCode2["Gambia"] = "GM";
  CountryCode2["Georgia"] = "GE";
  CountryCode2["Germany"] = "DE";
  CountryCode2["Ghana"] = "GH";
  CountryCode2["Gibraltar"] = "GI";
  CountryCode2["Greece"] = "GR";
  CountryCode2["Greenland"] = "GL";
  CountryCode2["Grenada"] = "GD";
  CountryCode2["Guadeloupe"] = "GP";
  CountryCode2["Guam"] = "GU";
  CountryCode2["Guatemala"] = "GT";
  CountryCode2["Guernsey"] = "GG";
  CountryCode2["Guinea"] = "GN";
  CountryCode2["GuineaBissau"] = "GW";
  CountryCode2["Guyana"] = "GY";
  CountryCode2["Haiti"] = "HT";
  CountryCode2["HeardIslandMcdonaldIslands"] = "HM";
  CountryCode2["HolySeeVaticanCityState"] = "VA";
  CountryCode2["Honduras"] = "HN";
  CountryCode2["HongKong"] = "HK";
  CountryCode2["Hungary"] = "HU";
  CountryCode2["Iceland"] = "IS";
  CountryCode2["India"] = "IN";
  CountryCode2["Indonesia"] = "ID";
  CountryCode2["Iran"] = "IR";
  CountryCode2["Iraq"] = "IQ";
  CountryCode2["Ireland"] = "IE";
  CountryCode2["IsleOfMan"] = "IM";
  CountryCode2["Israel"] = "IL";
  CountryCode2["Italy"] = "IT";
  CountryCode2["Jamaica"] = "JM";
  CountryCode2["Japan"] = "JP";
  CountryCode2["Jersey"] = "JE";
  CountryCode2["Jordan"] = "JO";
  CountryCode2["Kazakhstan"] = "KZ";
  CountryCode2["Kenya"] = "KE";
  CountryCode2["Kiribati"] = "KI";
  CountryCode2["Kuwait"] = "KW";
  CountryCode2["Kyrgyzstan"] = "KG";
  CountryCode2["Laos"] = "LA";
  CountryCode2["Latvia"] = "LV";
  CountryCode2["Lebanon"] = "LB";
  CountryCode2["Lesotho"] = "LS";
  CountryCode2["Liberia"] = "LR";
  CountryCode2["Libya"] = "LY";
  CountryCode2["Liechtenstein"] = "LI";
  CountryCode2["Lithuania"] = "LT";
  CountryCode2["Luxembourg"] = "LU";
  CountryCode2["Macau"] = "MO";
  CountryCode2["Madagascar"] = "MG";
  CountryCode2["Malawi"] = "MW";
  CountryCode2["Malaysia"] = "MY";
  CountryCode2["Maldives"] = "MV";
  CountryCode2["Mali"] = "ML";
  CountryCode2["Malta"] = "MT";
  CountryCode2["MarshallIslands"] = "MH";
  CountryCode2["Martinique"] = "MQ";
  CountryCode2["Mauritania"] = "MR";
  CountryCode2["Mauritius"] = "MU";
  CountryCode2["Mayotte"] = "YT";
  CountryCode2["Mexico"] = "MX";
  CountryCode2["MicronesiaFederatedStatesOf"] = "FM";
  CountryCode2["Moldova"] = "MD";
  CountryCode2["Monaco"] = "MC";
  CountryCode2["Mongolia"] = "MN";
  CountryCode2["Montenegro"] = "ME";
  CountryCode2["Montserrat"] = "MS";
  CountryCode2["Morocco"] = "MA";
  CountryCode2["Mozambique"] = "MZ";
  CountryCode2["Myanmar"] = "MM";
  CountryCode2["Namibia"] = "NA";
  CountryCode2["Nauru"] = "NR";
  CountryCode2["Nepal"] = "NP";
  CountryCode2["Netherlands"] = "NL";
  CountryCode2["NetherlandsAntilles"] = "AN";
  CountryCode2["NewCaledonia"] = "NC";
  CountryCode2["NewZealand"] = "NZ";
  CountryCode2["NorthKorea"] = "KP";
  CountryCode2["Nicaragua"] = "NI";
  CountryCode2["Niger"] = "NE";
  CountryCode2["Nigeria"] = "NG";
  CountryCode2["Niue"] = "NU";
  CountryCode2["NorfolkIsland"] = "NF";
  CountryCode2["NorthMacedonia"] = "MK";
  CountryCode2["NorthernMarianaIslands"] = "MP";
  CountryCode2["Norway"] = "NO";
  CountryCode2["Oman"] = "OM";
  CountryCode2["Pakistan"] = "PK";
  CountryCode2["Palau"] = "PW";
  CountryCode2["PalestinianTerritoryOccupied"] = "PS";
  CountryCode2["Panama"] = "PA";
  CountryCode2["PapuaNewGuinea"] = "PG";
  CountryCode2["Paraguay"] = "PY";
  CountryCode2["Peru"] = "PE";
  CountryCode2["Philippines"] = "PH";
  CountryCode2["Pitcairn"] = "PN";
  CountryCode2["Poland"] = "PL";
  CountryCode2["Portugal"] = "PT";
  CountryCode2["PuertoRico"] = "PR";
  CountryCode2["Qatar"] = "QA";
  CountryCode2["Reunion"] = "RE";
  CountryCode2["Romania"] = "RO";
  CountryCode2["RussianFederation"] = "RU";
  CountryCode2["Rwanda"] = "RW";
  CountryCode2["SaintBarthelemy"] = "BL";
  CountryCode2["SaintHelena"] = "SH";
  CountryCode2["SaintKittsAndNevis"] = "KN";
  CountryCode2["SaintLucia"] = "LC";
  CountryCode2["SaintMartin"] = "MF";
  CountryCode2["SaintPierreAndMiquelon"] = "PM";
  CountryCode2["SaintVincentAndTheGrenadines"] = "VC";
  CountryCode2["Samoa"] = "WS";
  CountryCode2["SanMarino"] = "SM";
  CountryCode2["SaoTomeAndPrincipe"] = "ST";
  CountryCode2["SaudiArabia"] = "SA";
  CountryCode2["Senegal"] = "SN";
  CountryCode2["Serbia"] = "RS";
  CountryCode2["SerbiaAndMontenegro"] = "CS";
  CountryCode2["Seychelles"] = "SC";
  CountryCode2["SierraLeone"] = "SL";
  CountryCode2["Singapore"] = "SG";
  CountryCode2["Slovakia"] = "SK";
  CountryCode2["Slovenia"] = "SI";
  CountryCode2["SolomonIslands"] = "SB";
  CountryCode2["Somalia"] = "SO";
  CountryCode2["SouthAfrica"] = "ZA";
  CountryCode2["SouthGeorgiaAndTheSouthSandwichIslands"] = "GS";
  CountryCode2["SouthKorea"] = "KR";
  CountryCode2["Spain"] = "ES";
  CountryCode2["SriLanka"] = "LK";
  CountryCode2["Sudan"] = "SD";
  CountryCode2["Suriname"] = "SR";
  CountryCode2["SvalbardAndJanMayen"] = "SJ";
  CountryCode2["Swaziland"] = "SZ";
  CountryCode2["Sweden"] = "SE";
  CountryCode2["Switzerland"] = "CH";
  CountryCode2["Syria"] = "SY";
  CountryCode2["Taiwan"] = "TW";
  CountryCode2["Tajikistan"] = "TJ";
  CountryCode2["Tanzania"] = "TZ";
  CountryCode2["Thailand"] = "TH";
  CountryCode2["TimorLeste"] = "TL";
  CountryCode2["Togo"] = "TG";
  CountryCode2["Tokelau"] = "TK";
  CountryCode2["Tonga"] = "TO";
  CountryCode2["TrinidadAndTobago"] = "TT";
  CountryCode2["Tunisia"] = "TN";
  CountryCode2["Turkey"] = "TR";
  CountryCode2["Turkmenistan"] = "TM";
  CountryCode2["TurksAndCaicosIslands"] = "TC";
  CountryCode2["Tuvalu"] = "TV";
  CountryCode2["Uganda"] = "UG";
  CountryCode2["Ukraine"] = "UA";
  CountryCode2["UnitedArabEmirates"] = "AE";
  CountryCode2["UnitedKingdom"] = "GB";
  CountryCode2["UnitedStates"] = "US";
  CountryCode2["UnitedStatesMinorOutlyingIslands"] = "UM";
  CountryCode2["Uruguay"] = "UY";
  CountryCode2["Uzbekistan"] = "UZ";
  CountryCode2["Vanuatu"] = "VU";
  CountryCode2["Venezuela"] = "VE";
  CountryCode2["Vietnam"] = "VN";
  CountryCode2["VirginIslandsBritish"] = "VG";
  CountryCode2["VirginIslandsUS"] = "VI";
  CountryCode2["WallisAndFutuna"] = "WF";
  CountryCode2["WesternSahara"] = "EH";
  CountryCode2["Yemen"] = "YE";
  CountryCode2["Zambia"] = "ZM";
  CountryCode2["Zimbabwe"] = "ZW";
})(CountryCode || (CountryCode = {}));
var CurrencyCode;
(function(CurrencyCode2) {
  CurrencyCode2["AfghanistanAfghani"] = "AFN";
  CurrencyCode2["AlbaniaLek"] = "ALL";
  CurrencyCode2["ArmeniaDram"] = "AMD";
  CurrencyCode2["AlgeriaDinar"] = "DZD";
  CurrencyCode2["AmericanSamoaTala"] = "WST";
  CurrencyCode2["AngolaKwanza"] = "AOA";
  CurrencyCode2["ArgentinaPeso"] = "ARS";
  CurrencyCode2["AustraliaDollar"] = "AUD";
  CurrencyCode2["ArubaFlorin"] = "AWG";
  CurrencyCode2["AzerbaijanNewManat"] = "AZN";
  CurrencyCode2["BosniaAndHerzegovinaConvertibleMark"] = "BAM";
  CurrencyCode2["BahrainDinar"] = "BHD";
  CurrencyCode2["BarbadosDollar"] = "BBD";
  CurrencyCode2["BangladeshTaka"] = "BDT";
  CurrencyCode2["BelgiumFranc"] = "BGN";
  CurrencyCode2["BermudaDollar"] = "BMD";
  CurrencyCode2["BruneiDollar"] = "BND";
  CurrencyCode2["BoliviaBoliviano"] = "BOB";
  CurrencyCode2["BrazilReal"] = "BRL";
  CurrencyCode2["BahamasDollar"] = "BSD";
  CurrencyCode2["BhutanNgultrum"] = "BTN";
  CurrencyCode2["BotswanaPula"] = "BWP";
  CurrencyCode2["BelarusRuble"] = "BYN";
  CurrencyCode2["BelizeDollar"] = "BZD";
  CurrencyCode2["BulgariaLev"] = "BGN";
  CurrencyCode2["BurundiFranc"] = "BIF";
  CurrencyCode2["BritishPound"] = "GBP";
  CurrencyCode2["CanadaDollar"] = "CAD";
  CurrencyCode2["CambodiaRiel"] = "KHR";
  CurrencyCode2["ComorosFranc"] = "KMF";
  CurrencyCode2["CaymanIslandsDollar"] = "KYD";
  CurrencyCode2["ChilePeso"] = "CLP";
  CurrencyCode2["ChinaYuan"] = "CNY";
  CurrencyCode2["ColombiaPeso"] = "COP";
  CurrencyCode2["CostaRicaColon"] = "CRC";
  CurrencyCode2["CroatiaKuna"] = "HRK";
  CurrencyCode2["CubaConvertiblePeso"] = "CUC";
  CurrencyCode2["CubaPeso"] = "CUP";
  CurrencyCode2["CapeVerdeEscudo"] = "CVE";
  CurrencyCode2["CyprusPound"] = "CYP";
  CurrencyCode2["CzechRepublicKoruna"] = "CZK";
  CurrencyCode2["DjiboutiFranc"] = "DJF";
  CurrencyCode2["DenmarkKrone"] = "DKK";
  CurrencyCode2["DominicaDollar"] = "XCD";
  CurrencyCode2["DominicanRepublicPeso"] = "DOP";
  CurrencyCode2["EastCaribbeanDollar"] = "XCD";
  CurrencyCode2["EgyptPound"] = "EGP";
  CurrencyCode2["ElSalvadorColon"] = "SVC";
  CurrencyCode2["EquatorialGuineaEkwele"] = "GQE";
  CurrencyCode2["EritreaNakfa"] = "ERN";
  CurrencyCode2["EstoniaKroon"] = "EEK";
  CurrencyCode2["EthiopiaBirr"] = "ETB";
  CurrencyCode2["Euro"] = "EUR";
  CurrencyCode2["FijiDollar"] = "FJD";
  CurrencyCode2["FalklandIslandsPound"] = "FKP";
  CurrencyCode2["GambiaDalasi"] = "GMD";
  CurrencyCode2["GabonFranc"] = "GMD";
  CurrencyCode2["GeorgiaLari"] = "GEL";
  CurrencyCode2["GhanaCedi"] = "GHS";
  CurrencyCode2["GibraltarPound"] = "GIP";
  CurrencyCode2["GuatemalaQuetzal"] = "GTQ";
  CurrencyCode2["GuernseyPound"] = "GGP";
  CurrencyCode2["GuineaBissauPeso"] = "GWP";
  CurrencyCode2["GuyanaDollar"] = "GYD";
  CurrencyCode2["HongKongDollar"] = "HKD";
  CurrencyCode2["HondurasLempira"] = "HNL";
  CurrencyCode2["HaitiGourde"] = "HTG";
  CurrencyCode2["HungaryForint"] = "HUF";
  CurrencyCode2["IndonesiaRupiah"] = "IDR";
  CurrencyCode2["IsleOfManPound"] = "IMP";
  CurrencyCode2["IsraelNewShekel"] = "ILS";
  CurrencyCode2["IndiaRupee"] = "INR";
  CurrencyCode2["IraqDinar"] = "IQD";
  CurrencyCode2["IranRial"] = "IRR";
  CurrencyCode2["IcelandKrona"] = "ISK";
  CurrencyCode2["JamaicaDollar"] = "JMD";
  CurrencyCode2["JapanYen"] = "JPY";
  CurrencyCode2["JerseyPound"] = "JEP";
  CurrencyCode2["JordanDinar"] = "JOD";
  CurrencyCode2["KazakhstanTenge"] = "KZT";
  CurrencyCode2["KenyaShilling"] = "KES";
  CurrencyCode2["KyrgyzstanSom"] = "KGS";
  CurrencyCode2["NorthKoreaWon"] = "KPW";
  CurrencyCode2["SouthKoreaWon"] = "KRW";
  CurrencyCode2["KuwaitDinar"] = "KWD";
  CurrencyCode2["LaosKip"] = "LAK";
  CurrencyCode2["LebanonPound"] = "LBP";
  CurrencyCode2["LiberiaDollar"] = "LRD";
  CurrencyCode2["LesothoLoti"] = "LSL";
  CurrencyCode2["LibyanDinar"] = "LYD";
  CurrencyCode2["LithuaniaLitas"] = "LTL";
  CurrencyCode2["LatviaLats"] = "LVL";
  CurrencyCode2["LibyaDinar"] = "LYD";
  CurrencyCode2["MacauPataca"] = "MOP";
  CurrencyCode2["MaldivesRufiyaa"] = "MVR";
  CurrencyCode2["MalawiKwacha"] = "MWK";
  CurrencyCode2["MaltaLira"] = "MTL";
  CurrencyCode2["MauritiusRupee"] = "MUR";
  CurrencyCode2["MongoliaTughrik"] = "MNT";
  CurrencyCode2["MoroccoDirham"] = "MAD";
  CurrencyCode2["MoldovaLeu"] = "MDL";
  CurrencyCode2["MozambiqueMetical"] = "MZN";
  CurrencyCode2["MadagascarAriary"] = "MGA";
  CurrencyCode2["MacedoniaDenar"] = "MKD";
  CurrencyCode2["MexicoPeso"] = "MXN";
  CurrencyCode2["MalaysiaRinggit"] = "MYR";
  CurrencyCode2["MyanmarKyat"] = "MMK";
  CurrencyCode2["MicronesiaFederatedStatesDollar"] = "USD";
  CurrencyCode2["NicaraguaCordoba"] = "NIO";
  CurrencyCode2["NamibiaDollar"] = "NAD";
  CurrencyCode2["NetherlandsAntillesGuilder"] = "ANG";
  CurrencyCode2["NewCaledoniaFranc"] = "XPF";
  CurrencyCode2["NigeriaNaira"] = "NGN";
  CurrencyCode2["NicaraguaCordobaOro"] = "NIO";
  CurrencyCode2["NigerCFAFranc"] = "XOF";
  CurrencyCode2["NorwayKrone"] = "NOK";
  CurrencyCode2["NepalRupee"] = "NPR";
  CurrencyCode2["NewZealandDollar"] = "NZD";
  CurrencyCode2["OmanRial"] = "OMR";
  CurrencyCode2["PanamaBalboa"] = "PAB";
  CurrencyCode2["PeruNuevoSol"] = "PEN";
  CurrencyCode2["PapuaNewGuineaKina"] = "PGK";
  CurrencyCode2["PhilippinesPeso"] = "PHP";
  CurrencyCode2["PakistanRupee"] = "PKR";
  CurrencyCode2["PeruNuevo"] = "PEN";
  CurrencyCode2["PolandZloty"] = "PLN";
  CurrencyCode2["ParaguayGuarani"] = "PYG";
  CurrencyCode2["QatarRial"] = "QAR";
  CurrencyCode2["RomaniaNewLeu"] = "RON";
  CurrencyCode2["SerbiaDinar"] = "RSD";
  CurrencyCode2["SriLankaRupee"] = "LKR";
  CurrencyCode2["RussiaRuble"] = "RUB";
  CurrencyCode2["RwandaFranc"] = "RWF";
  CurrencyCode2["SaudiArabiaRiyal"] = "SAR";
  CurrencyCode2["SlovakiaKoruna"] = "SKK";
  CurrencyCode2["SloveniaTolar"] = "SIT";
  CurrencyCode2["SolomonIslandsDollar"] = "SBD";
  CurrencyCode2["SeychellesRupee"] = "SCR";
  CurrencyCode2["SudanPound"] = "SDG";
  CurrencyCode2["SwedenKrona"] = "SEK";
  CurrencyCode2["SingaporeDollar"] = "SGD";
  CurrencyCode2["SaintHelenaPound"] = "SHP";
  CurrencyCode2["SierraLeoneLeone"] = "SLL";
  CurrencyCode2["SomaliaShilling"] = "SOS";
  CurrencyCode2["SurinameDollar"] = "SRD";
  CurrencyCode2["SintMaartenPound"] = "SXD";
  CurrencyCode2["SyriaPound"] = "SYP";
  CurrencyCode2["SwazilandLilangeni"] = "SZL";
  CurrencyCode2["SwitzerlandFranc"] = "CHF";
  CurrencyCode2["ThailandBaht"] = "THB";
  CurrencyCode2["TajikistanSomoni"] = "TJS";
  CurrencyCode2["TurkmenistanManat"] = "TMT";
  CurrencyCode2["TunisiaDinar"] = "TND";
  CurrencyCode2["TongaPaanga"] = "TOP";
  CurrencyCode2["TurkeyLira"] = "TRY";
  CurrencyCode2["TrinidadAndTobagoDollar"] = "TTD";
  CurrencyCode2["TaiwanNewDollar"] = "TWD";
  CurrencyCode2["TanzaniaShilling"] = "TZS";
  CurrencyCode2["UnitedArabEmiratesDirham"] = "AED";
  CurrencyCode2["UkraineHryvnia"] = "UAH";
  CurrencyCode2["UgandaShilling"] = "UGX";
  CurrencyCode2["UnitedKingdomPound"] = "GBP";
  CurrencyCode2["UnitedStatesDollar"] = "USD";
  CurrencyCode2["UruguayPeso"] = "UYU";
  CurrencyCode2["UzbekistanSom"] = "UZS";
  CurrencyCode2["VenezuelaBolivar"] = "VEF";
  CurrencyCode2["VietnamDong"] = "VND";
  CurrencyCode2["VanuatuVatu"] = "VUV";
  CurrencyCode2["SamoaTala"] = "WST";
  CurrencyCode2["YemenRial"] = "YER";
  CurrencyCode2["SouthAfricaRand"] = "ZAR";
  CurrencyCode2["ZambiaKwacha"] = "ZMW";
  CurrencyCode2["ZimbabweDollar"] = "ZWL";
})(CurrencyCode || (CurrencyCode = {}));
({
  AfghanistanAfghani: {
    code: CurrencyCode.AfghanistanAfghani,
    countries: [CountryCode.Afghanistan],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Afghan Afghani",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u060B",
    symbol_native: "\u060B",
    symbol_placement: "before",
    thousands_separator: ","
  },
  AlbaniaLek: {
    code: CurrencyCode.AlbaniaLek,
    countries: [CountryCode.Albania],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Albanian Lek",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Lek",
    symbol_native: "Lek",
    symbol_placement: "before",
    thousands_separator: "."
  },
  AlgeriaDinar: {
    code: CurrencyCode.AlgeriaDinar,
    countries: [CountryCode.Algeria],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Algerian Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u062F.\u062C",
    symbol_native: "\u062F.\u062C",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ArgentinaPeso: {
    code: CurrencyCode.ArgentinaPeso,
    countries: [CountryCode.Argentina],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Argentine Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ArmeniaDram: {
    code: CurrencyCode.ArmeniaDram,
    countries: [CountryCode.Armenia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Armenian Dram",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0564\u0580.",
    symbol_native: "\u0564\u0580.",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ArubaFlorin: {
    code: CurrencyCode.ArubaFlorin,
    countries: [CountryCode.Aruba],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Aruban Florin",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0192",
    symbol_native: "\u0192",
    symbol_placement: "before",
    thousands_separator: ","
  },
  AustraliaDollar: {
    code: CurrencyCode.AustraliaDollar,
    countries: [CountryCode.Australia],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Australian Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  AzerbaijanManat: {
    code: CurrencyCode.AzerbaijanNewManat,
    countries: [CountryCode.Azerbaijan],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Azerbaijani Manat",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u043C\u0430\u043D",
    symbol_native: "\u043C\u0430\u043D",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BahrainDinar: {
    code: CurrencyCode.BahrainDinar,
    countries: [CountryCode.Bahrain],
    decimal_digits: 3,
    decimal_separator: ".",
    name: "Bahraini Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: ".\u062F.\u0628",
    symbol_native: ".\u062F.\u0628",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BangladeshTaka: {
    code: CurrencyCode.BangladeshTaka,
    countries: [CountryCode.Bangladesh],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Bangladeshi Taka",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u09F3",
    symbol_native: "\u09F3",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BarbadosDollar: {
    code: CurrencyCode.BarbadosDollar,
    countries: [CountryCode.Barbados],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Barbadian Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BelarusRuble: {
    code: CurrencyCode.BelarusRuble,
    countries: [CountryCode.Belarus],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Belarusian Ruble",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Br",
    symbol_native: "Br",
    symbol_placement: "before",
    thousands_separator: "."
  },
  BelizeDollar: {
    code: CurrencyCode.BelizeDollar,
    countries: [CountryCode.Belize],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Belize Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "BZ$",
    symbol_native: "BZ$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BermudaDollar: {
    code: CurrencyCode.BermudaDollar,
    countries: [CountryCode.Bermuda],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Bermudian Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BoliviaBoliviano: {
    code: CurrencyCode.BoliviaBoliviano,
    countries: [CountryCode.Bolivia],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Bolivian Boliviano",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$b",
    symbol_native: "$b",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BosniaAndHerzegovinaConvertibleMarka: {
    code: CurrencyCode.BosniaAndHerzegovinaConvertibleMark,
    countries: [CountryCode.BosniaAndHerzegovina],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Bosnia and Herzegovina Convertible Marka",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "KM",
    symbol_native: "KM",
    symbol_placement: "before",
    thousands_separator: "."
  },
  BotswanaPula: {
    code: CurrencyCode.BotswanaPula,
    countries: [CountryCode.Botswana],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Botswana Pula",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "P",
    symbol_native: "P",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BrazilReal: {
    code: CurrencyCode.BrazilReal,
    countries: [CountryCode.Brazil],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Brazilian Real",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "R$",
    symbol_native: "R$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  BruneiDollar: {
    code: CurrencyCode.BruneiDollar,
    countries: [CountryCode.Brunei],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Brunei Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  BulgariaLev: {
    code: CurrencyCode.BulgariaLev,
    countries: [CountryCode.Bulgaria],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Bulgarian Lev",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u043B\u0432",
    symbol_native: "\u043B\u0432",
    symbol_placement: "before",
    thousands_separator: "."
  },
  BurundiFranc: {
    code: CurrencyCode.BurundiFranc,
    countries: [CountryCode.Burundi],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Burundian Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "FBu",
    symbol_native: "FBu",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CambodiaRiel: {
    code: CurrencyCode.CambodiaRiel,
    countries: [CountryCode.Cambodia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Cambodian Riel",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u17DB",
    symbol_native: "\u17DB",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CanadaDollar: {
    code: CurrencyCode.CanadaDollar,
    countries: [CountryCode.Canada],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Canadian Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CapeVerdeEscudo: {
    code: CurrencyCode.CapeVerdeEscudo,
    countries: [CountryCode.CapeVerde],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Cape Verde Escudo",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Esc",
    symbol_native: "Esc",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CaymanIslandsDollar: {
    code: CurrencyCode.CaymanIslandsDollar,
    countries: [CountryCode.CaymanIslands],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Cayman Islands Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ChilePeso: {
    code: CurrencyCode.ChilePeso,
    countries: [CountryCode.Chile],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Chilean Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ChinaYuanRenminbi: {
    code: CurrencyCode.ChinaYuan,
    countries: [CountryCode.China],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Chinese Yuan",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA5",
    symbol_native: "\xA5",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ColombiaPeso: {
    code: CurrencyCode.ColombiaPeso,
    countries: [CountryCode.Colombia],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Colombian Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ComorosFranc: {
    code: CurrencyCode.ComorosFranc,
    countries: [CountryCode.Comoros],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Comoros Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "CF",
    symbol_native: "CF",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CostaRicaColon: {
    code: CurrencyCode.CostaRicaColon,
    countries: [CountryCode.CostaRica],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Costa Rican Colon",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A1",
    symbol_native: "\u20A1",
    symbol_placement: "before",
    thousands_separator: ","
  },
  CroatiaKuna: {
    code: CurrencyCode.CroatiaKuna,
    countries: [CountryCode.Croatia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Croatian Kuna",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kn",
    symbol_native: "kn",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CubaConvertiblePeso: {
    code: CurrencyCode.CubaConvertiblePeso,
    countries: [CountryCode.Cuba],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Cuba Convertible Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CubaPeso: {
    code: CurrencyCode.CubaPeso,
    countries: [CountryCode.Cuba],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Cuba Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CyprusPound: {
    code: CurrencyCode.CyprusPound,
    countries: [CountryCode.Cyprus],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Cyprus Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  CzechRepublicKoruna: {
    code: CurrencyCode.CzechRepublicKoruna,
    countries: [CountryCode.CzechRepublic],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Czech Republic Koruna",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "K\u010D",
    symbol_native: "K\u010D",
    symbol_placement: "before",
    thousands_separator: "."
  },
  DenmarkKrone: {
    code: CurrencyCode.DenmarkKrone,
    countries: [CountryCode.Denmark],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Denmark Krone",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  DjiboutiFranc: {
    code: CurrencyCode.DjiboutiFranc,
    countries: [CountryCode.Djibouti],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Djibouti Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Fdj",
    symbol_native: "Fdj",
    symbol_placement: "before",
    thousands_separator: ","
  },
  DominicanRepublicPeso: {
    code: CurrencyCode.DominicanRepublicPeso,
    countries: [CountryCode.DominicanRepublic],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Dominican Republic Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "RD$",
    symbol_native: "RD$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  EastCaribbeanDollar: {
    code: CurrencyCode.EastCaribbeanDollar,
    countries: [
      CountryCode.AntiguaAndBarbuda,
      CountryCode.Dominica,
      CountryCode.Grenada,
      CountryCode.SaintKittsAndNevis,
      CountryCode.SaintLucia,
      CountryCode.SaintVincentAndTheGrenadines
    ],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "East Caribbean Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: ","
  },
  EgyptPound: {
    code: CurrencyCode.EgyptPound,
    countries: [CountryCode.Egypt],
    decimal_digits: 2,
    decimal_separator: ".",
    name: "Egypt Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: ","
  },
  ElSalvadorColon: {
    code: CurrencyCode.ElSalvadorColon,
    countries: [CountryCode.ElSalvador],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "El Salvador Colon",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A1",
    symbol_native: "\u20A1",
    symbol_placement: "before",
    thousands_separator: "."
  },
  EquatorialGuineaEkwele: {
    code: CurrencyCode.EquatorialGuineaEkwele,
    countries: [CountryCode.EquatorialGuinea],
    decimal_digits: 0,
    decimal_separator: ".",
    name: "Equatorial Guinea Ekwele",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "GQE",
    symbol_native: "GQE",
    symbol_placement: "before",
    thousands_separator: ","
  },
  EritreaNakfa: {
    code: CurrencyCode.EritreaNakfa,
    countries: [CountryCode.Eritrea],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Eritrea Nakfa",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Nfk",
    symbol_native: "Nfk",
    symbol_placement: "before",
    thousands_separator: "."
  },
  EstoniaKroon: {
    code: CurrencyCode.EstoniaKroon,
    countries: [CountryCode.Estonia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Estonia Kroon",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  EthiopiaBirr: {
    code: CurrencyCode.EthiopiaBirr,
    countries: [CountryCode.Ethiopia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Ethiopia Birr",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Br",
    symbol_native: "Br",
    symbol_placement: "before",
    thousands_separator: "."
  },
  Euro: {
    code: CurrencyCode.Euro,
    countries: [
      CountryCode.Andorra,
      CountryCode.Austria,
      CountryCode.Belgium,
      CountryCode.Cyprus,
      CountryCode.Estonia,
      CountryCode.Finland,
      CountryCode.France,
      CountryCode.Germany,
      CountryCode.Greece,
      CountryCode.Ireland,
      CountryCode.Italy,
      CountryCode.Latvia,
      CountryCode.Lithuania,
      CountryCode.Luxembourg,
      CountryCode.Malta,
      CountryCode.Monaco,
      CountryCode.Netherlands,
      CountryCode.Portugal,
      CountryCode.Spain,
      CountryCode.Sweden,
      CountryCode.UnitedKingdom
    ],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Euro",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AC",
    symbol_native: "\u20AC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  FalklandIslandsPound: {
    code: CurrencyCode.FalklandIslandsPound,
    countries: [CountryCode.FalklandIslands],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Equatorial Guinea Ekwele",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  FijiDollar: {
    code: CurrencyCode.FijiDollar,
    countries: [CountryCode.Fiji],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Fiji Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GambiaDalasi: {
    code: CurrencyCode.GambiaDalasi,
    countries: [CountryCode.Gambia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Gambia Dalasi",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "D",
    symbol_native: "D",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GeorgiaLari: {
    code: CurrencyCode.GeorgiaLari,
    countries: [CountryCode.Georgia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Georgia Lari",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20BE",
    symbol_native: "\u20BE",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GhanaCedi: {
    code: CurrencyCode.GhanaCedi,
    countries: [CountryCode.Ghana],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Ghana Cedi",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B5",
    symbol_native: "\u20B5",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GibraltarPound: {
    code: CurrencyCode.GibraltarPound,
    countries: [CountryCode.Gibraltar],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Gibraltar Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GuatemalaQuetzal: {
    code: CurrencyCode.GuatemalaQuetzal,
    countries: [CountryCode.Guatemala],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Guatemala Quetzal",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Q",
    symbol_native: "Q",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GuernseyPound: {
    code: CurrencyCode.GuernseyPound,
    countries: [CountryCode.Guernsey],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Guernsey Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GuineaBissauPeso: {
    code: CurrencyCode.GuineaBissauPeso,
    countries: [CountryCode.GuineaBissau],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Guinea-Bissau Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B5",
    symbol_native: "\u20B5",
    symbol_placement: "before",
    thousands_separator: "."
  },
  GuyanaDollar: {
    code: CurrencyCode.GuyanaDollar,
    countries: [CountryCode.Guyana],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Guyana Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  HaitiGourde: {
    code: CurrencyCode.HaitiGourde,
    countries: [CountryCode.Haiti],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Haiti Gourde",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "G",
    symbol_native: "G",
    symbol_placement: "before",
    thousands_separator: "."
  },
  HondurasLempira: {
    code: CurrencyCode.HondurasLempira,
    countries: [CountryCode.Honduras],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Honduras Lempira",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "L",
    symbol_native: "L",
    symbol_placement: "before",
    thousands_separator: "."
  },
  HongKongDollar: {
    code: CurrencyCode.HongKongDollar,
    countries: [CountryCode.HongKong],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Hong Kong Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  HungaryForint: {
    code: CurrencyCode.HungaryForint,
    countries: [CountryCode.Hungary],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Hungary Forint",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Ft",
    symbol_native: "Ft",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IcelandKrona: {
    code: CurrencyCode.IcelandKrona,
    countries: [CountryCode.Iceland],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Iceland Krona",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IndianRupee: {
    code: CurrencyCode.IndiaRupee,
    countries: [CountryCode.India, CountryCode.Bhutan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Indian Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B9",
    symbol_native: "\u20B9",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IndonesiaRupiah: {
    code: CurrencyCode.IndonesiaRupiah,
    countries: [CountryCode.Indonesia],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Indonesia Rupiah",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Rp",
    symbol_native: "Rp",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IranRial: {
    code: CurrencyCode.IranRial,
    countries: [CountryCode.Iran],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Iran Rial",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IsleOfManPound: {
    code: CurrencyCode.IsleOfManPound,
    countries: [CountryCode.IsleOfMan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Isle of Man Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  IsraeliShekel: {
    code: CurrencyCode.IsraelNewShekel,
    countries: [CountryCode.Israel],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Israeli Shekel",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AA",
    symbol_native: "\u20AA",
    symbol_placement: "before",
    thousands_separator: "."
  },
  JamaicaDollar: {
    code: CurrencyCode.JamaicaDollar,
    countries: [CountryCode.Jamaica],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Jamaica Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "J$",
    symbol_native: "J$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  JapanYen: {
    code: CurrencyCode.JapanYen,
    countries: [CountryCode.Japan],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Japan Yen",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA5",
    symbol_native: "\uFFE5",
    symbol_placement: "before",
    thousands_separator: "."
  },
  JerseyPound: {
    code: CurrencyCode.JerseyPound,
    countries: [CountryCode.Jersey],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Jersey Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  JordanDinar: {
    code: CurrencyCode.JordanDinar,
    countries: [CountryCode.Jordan],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Jordan Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "JD",
    symbol_native: "JD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  KazakhstanTenge: {
    code: CurrencyCode.KazakhstanTenge,
    countries: [CountryCode.Kazakhstan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Kazakhstan Tenge",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B8",
    symbol_native: "\u20B8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  KenyaShilling: {
    code: CurrencyCode.KenyaShilling,
    countries: [CountryCode.Kenya],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Kenya Shilling",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "KSh",
    symbol_native: "KSh",
    symbol_placement: "before",
    thousands_separator: "."
  },
  KuwaitDinar: {
    code: CurrencyCode.KuwaitDinar,
    countries: [CountryCode.Kuwait],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Kuwait Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "KD",
    symbol_native: "KD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  KyrgyzstanSom: {
    code: CurrencyCode.KyrgyzstanSom,
    countries: [CountryCode.Kyrgyzstan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Kyrgyzstan Som",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "KGS",
    symbol_native: "KGS",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LaosKip: {
    code: CurrencyCode.LaosKip,
    countries: [CountryCode.Laos],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Laos Kip",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AD",
    symbol_native: "\u20AD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LatviaLats: {
    code: CurrencyCode.LatviaLats,
    countries: [CountryCode.Latvia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Latvia Lat",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Ls",
    symbol_native: "Ls",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LebanonPound: {
    code: CurrencyCode.LebanonPound,
    countries: [CountryCode.Lebanon],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Lebanon Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LesothoLoti: {
    code: CurrencyCode.LesothoLoti,
    countries: [CountryCode.Lesotho],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Lesotho Loti",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "M",
    symbol_native: "M",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LiberiaDollar: {
    code: CurrencyCode.LiberiaDollar,
    countries: [CountryCode.Liberia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Liberia Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LibyanDinar: {
    code: CurrencyCode.LibyanDinar,
    countries: [CountryCode.Libya],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Libyan Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "LD",
    symbol_native: "LD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  LithuaniaLitas: {
    code: CurrencyCode.LithuaniaLitas,
    countries: [CountryCode.Lithuania],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Lithuania Litas",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Lt",
    symbol_native: "Lt",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MacauPataca: {
    code: CurrencyCode.MacauPataca,
    countries: [CountryCode.Macau],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Macau Pataca",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "MOP$",
    symbol_native: "MOP$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MacedoniaDenar: {
    code: CurrencyCode.MacedoniaDenar,
    countries: [CountryCode.NorthMacedonia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Macedonia Denar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0434\u0435\u043D",
    symbol_native: "\u0434\u0435\u043D",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MadagascarAriary: {
    code: CurrencyCode.MadagascarAriary,
    countries: [CountryCode.Madagascar],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Madagascar Ariary",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Ar",
    symbol_native: "Ar",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MalawiKwacha: {
    code: CurrencyCode.MalawiKwacha,
    countries: [CountryCode.Malawi],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Malawi Kwacha",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "MK",
    symbol_native: "MK",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MalaysiaRinggit: {
    code: CurrencyCode.MalaysiaRinggit,
    countries: [CountryCode.Malaysia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Malaysia Ringgit",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "RM",
    symbol_native: "RM",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MaldivesRufiyaa: {
    code: CurrencyCode.MaldivesRufiyaa,
    countries: [CountryCode.Maldives],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Maldives Rufiyaa",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Rf",
    symbol_native: "Rf",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MaltaLira: {
    code: CurrencyCode.MaltaLira,
    countries: [CountryCode.Malta],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Malta Lira",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Lm",
    symbol_native: "Lm",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MauritiusRupee: {
    code: CurrencyCode.MauritiusRupee,
    countries: [CountryCode.Mauritius],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Mauritius Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MexicoPeso: {
    code: CurrencyCode.MexicoPeso,
    countries: [CountryCode.Mexico],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Mexico Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MoldovaLeu: {
    code: CurrencyCode.MoldovaLeu,
    countries: [CountryCode.Moldova],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Moldova Leu",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "L",
    symbol_native: "L",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MongoliaTughrik: {
    code: CurrencyCode.MongoliaTughrik,
    countries: [CountryCode.Mongolia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Mongolia Tughrik",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AE",
    symbol_native: "\u20AE",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MoroccoDirham: {
    code: CurrencyCode.MoroccoDirham,
    countries: [CountryCode.Morocco],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Morocco Dirham",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "DH",
    symbol_native: "DH",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MozambiqueMetical: {
    code: CurrencyCode.MozambiqueMetical,
    countries: [CountryCode.Mozambique],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Mozambique Metical",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "MT",
    symbol_native: "MT",
    symbol_placement: "before",
    thousands_separator: "."
  },
  MyanmarKyat: {
    code: CurrencyCode.MyanmarKyat,
    countries: [CountryCode.Myanmar],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Myanmar Kyat",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "K",
    symbol_native: "K",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NamibiaDollar: {
    code: CurrencyCode.NamibiaDollar,
    countries: [CountryCode.Namibia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Namibia Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NepalRupee: {
    code: CurrencyCode.NepalRupee,
    countries: [CountryCode.Nepal],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Nepal Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NetherlandsAntillesGuilder: {
    code: CurrencyCode.NetherlandsAntillesGuilder,
    countries: [CountryCode.NetherlandsAntilles],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Netherlands Antilles Guilder",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0192",
    symbol_native: "\u0192",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NewCaledoniaFranc: {
    code: CurrencyCode.NewCaledoniaFranc,
    countries: [CountryCode.NewCaledonia],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "New Caledonia Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A3",
    symbol_native: "\u20A3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NewZealandDollar: {
    code: CurrencyCode.NewZealandDollar,
    countries: [CountryCode.NewZealand],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "New Zealand Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NicaraguaCordoba: {
    code: CurrencyCode.NicaraguaCordoba,
    countries: [CountryCode.Nicaragua],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Nicaragua Cordoba",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "C$",
    symbol_native: "C$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NigerCFAFranc: {
    code: CurrencyCode.NigerCFAFranc,
    countries: [CountryCode.Niger],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Niger CFA Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "CFA",
    symbol_native: "CFA",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NigeriaNaira: {
    code: CurrencyCode.NigeriaNaira,
    countries: [CountryCode.Nigeria],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Nigeria Naira",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A6",
    symbol_native: "\u20A6",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NorthKoreaWon: {
    code: CurrencyCode.NorthKoreaWon,
    countries: [CountryCode.NorthKorea],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "North Korea Won",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A9",
    symbol_native: "\u20A9",
    symbol_placement: "before",
    thousands_separator: "."
  },
  NorwayKrone: {
    code: CurrencyCode.NorwayKrone,
    countries: [CountryCode.Norway],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Norway Krone",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  OmanRial: {
    code: CurrencyCode.OmanRial,
    countries: [CountryCode.Oman],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Oman Rial",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PakistanRupee: {
    code: CurrencyCode.PakistanRupee,
    countries: [CountryCode.Pakistan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Pakistan Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PanamaBalboa: {
    code: CurrencyCode.PanamaBalboa,
    countries: [CountryCode.Panama],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Panama Balboa",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "B/.",
    symbol_native: "B/.",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ParaguayGuarani: {
    code: CurrencyCode.ParaguayGuarani,
    countries: [CountryCode.Paraguay],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Paraguay Guarani",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Gs",
    symbol_native: "Gs",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PeruvianNuevo: {
    code: CurrencyCode.PeruNuevo,
    countries: [CountryCode.Peru],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Peruvian Nuevo",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "S/.",
    symbol_native: "S/.",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PhilippinesPeso: {
    code: CurrencyCode.PhilippinesPeso,
    countries: [CountryCode.Philippines],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Philippines Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B1",
    symbol_native: "\u20B1",
    symbol_placement: "before",
    thousands_separator: "."
  },
  PolandZloty: {
    code: CurrencyCode.PolandZloty,
    countries: [CountryCode.Poland],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Poland Zloty",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "z\u0142",
    symbol_native: "z\u0142",
    symbol_placement: "before",
    thousands_separator: "."
  },
  QatarRial: {
    code: CurrencyCode.QatarRial,
    countries: [CountryCode.Qatar],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Qatar Rial",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  RomaniaNewLeu: {
    code: CurrencyCode.RomaniaNewLeu,
    countries: [CountryCode.Romania],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Romania New Leu",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "lei",
    symbol_native: "lei",
    symbol_placement: "before",
    thousands_separator: "."
  },
  RussiaRuble: {
    code: CurrencyCode.RussiaRuble,
    countries: [CountryCode.RussianFederation],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Russia Ruble",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20BD",
    symbol_native: "\u20BD",
    symbol_placement: "before",
    thousands_separator: "."
  },
  RwandaFranc: {
    code: CurrencyCode.RwandaFranc,
    countries: [CountryCode.Rwanda],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Rwanda Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "RF",
    symbol_native: "RF",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SaudiArabiaRiyal: {
    code: CurrencyCode.SaudiArabiaRiyal,
    countries: [CountryCode.SaudiArabia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Saudi Arabia Riyal",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SerbiaDinar: {
    code: CurrencyCode.SerbiaDinar,
    countries: [CountryCode.Serbia],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Serbia Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0414\u0438\u043D.",
    symbol_native: "\u0414\u0438\u043D.",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SeychellesRupee: {
    code: CurrencyCode.SeychellesRupee,
    countries: [CountryCode.Seychelles],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Seychelles Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SingaporeDollar: {
    code: CurrencyCode.SingaporeDollar,
    countries: [CountryCode.Singapore],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Singapore Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SlovakiaKoruna: {
    code: CurrencyCode.SlovakiaKoruna,
    countries: [CountryCode.Slovakia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Slovakia Koruna",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Sk",
    symbol_native: "Sk",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SloveniaTolar: {
    code: CurrencyCode.SloveniaTolar,
    countries: [CountryCode.Slovenia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Slovenia Tolar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "SIT",
    symbol_native: "SIT",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SolomonIslandsDollar: {
    code: CurrencyCode.SolomonIslandsDollar,
    countries: [CountryCode.SolomonIslands],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Solomon Islands Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SomaliaShilling: {
    code: CurrencyCode.SomaliaShilling,
    countries: [CountryCode.Somalia],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Somalia Shilling",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "S",
    symbol_native: "S",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SouthAfricaRand: {
    code: CurrencyCode.SouthAfricaRand,
    countries: [CountryCode.SouthAfrica],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "South Africa Rand",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "R",
    symbol_native: "R",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SouthKoreaWon: {
    code: CurrencyCode.SouthKoreaWon,
    countries: [CountryCode.SouthKorea],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "South Korea Won",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A9",
    symbol_native: "\u20A9",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SriLankaRupee: {
    code: CurrencyCode.SriLankaRupee,
    countries: [CountryCode.SriLanka],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Sri Lanka Rupee",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20A8",
    symbol_native: "\u20A8",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SudanPound: {
    code: CurrencyCode.SudanPound,
    countries: [CountryCode.Sudan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Sudan Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SurinameDollar: {
    code: CurrencyCode.SurinameDollar,
    countries: [CountryCode.Suriname],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Suriname Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SwazilandLilangeni: {
    code: CurrencyCode.SwazilandLilangeni,
    countries: [CountryCode.Swaziland],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Swaziland Lilangeni",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "E",
    symbol_native: "E",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SwedenKrona: {
    code: CurrencyCode.SwedenKrona,
    countries: [CountryCode.Sweden],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Sweden Krona",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "kr",
    symbol_native: "kr",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SwitzerlandFranc: {
    code: CurrencyCode.SwitzerlandFranc,
    countries: [CountryCode.Switzerland],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Switzerland Franc",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "CHF",
    symbol_native: "CHF",
    symbol_placement: "before",
    thousands_separator: "."
  },
  SyriaPound: {
    code: CurrencyCode.SyriaPound,
    countries: [CountryCode.Syria],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Syria Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TaiwanNewDollar: {
    code: CurrencyCode.TaiwanNewDollar,
    countries: [CountryCode.Taiwan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Taiwan New Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "NT$",
    symbol_native: "NT$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TajikistanSomoni: {
    code: CurrencyCode.TajikistanSomoni,
    countries: [CountryCode.Tajikistan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Tajikistan Somoni",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "TJS",
    symbol_native: "TJS",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TanzaniaShilling: {
    code: CurrencyCode.TanzaniaShilling,
    countries: [CountryCode.Tanzania],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Tanzania Shilling",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "TSh",
    symbol_native: "TSh",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ThailandBaht: {
    code: CurrencyCode.ThailandBaht,
    countries: [CountryCode.Thailand],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Thailand Baht",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u0E3F",
    symbol_native: "\u0E3F",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TunisiaDinar: {
    code: CurrencyCode.TunisiaDinar,
    countries: [CountryCode.Tunisia],
    decimal_digits: 3,
    decimal_separator: ",",
    name: "Tunisia Dinar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u062F.\u062A",
    symbol_native: "\u062F.\u062A",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TurkeyLira: {
    code: CurrencyCode.TurkeyLira,
    countries: [CountryCode.Turkey],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Turkey Lira",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20BA",
    symbol_native: "\u20BA",
    symbol_placement: "before",
    thousands_separator: "."
  },
  TurkmenistanManat: {
    code: CurrencyCode.TurkmenistanManat,
    countries: [CountryCode.Turkmenistan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Turkmenistan Manat",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "m",
    symbol_native: "m",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UgandaShilling: {
    code: CurrencyCode.UgandaShilling,
    countries: [CountryCode.Uganda],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Uganda Shilling",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "USh",
    symbol_native: "USh",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UkraineHryvnia: {
    code: CurrencyCode.UkraineHryvnia,
    countries: [CountryCode.Ukraine],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Ukraine Hryvnia",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20B4",
    symbol_native: "\u20B4",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UnitedArabEmiratesDirham: {
    code: CurrencyCode.UnitedArabEmiratesDirham,
    countries: [CountryCode.UnitedArabEmirates],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "United Arab Emirates Dirham",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u062F.\u0625",
    symbol_native: "\u062F.\u0625",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UnitedKingdomPound: {
    code: CurrencyCode.UnitedKingdomPound,
    countries: [CountryCode.UnitedKingdom],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "United Kingdom Pound",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\xA3",
    symbol_native: "\xA3",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UnitedStatesDollar: {
    code: CurrencyCode.UnitedStatesDollar,
    countries: [CountryCode.UnitedStates],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "United States Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$",
    symbol_native: "$",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UruguayPeso: {
    code: CurrencyCode.UruguayPeso,
    countries: [CountryCode.Uruguay],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Uruguay Peso",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "$U",
    symbol_native: "$U",
    symbol_placement: "before",
    thousands_separator: "."
  },
  UzbekistanSom: {
    code: CurrencyCode.UzbekistanSom,
    countries: [CountryCode.Uzbekistan],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Uzbekistan Som",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "UZS",
    symbol_native: "UZS",
    symbol_placement: "before",
    thousands_separator: "."
  },
  VanuatuVatu: {
    code: CurrencyCode.VanuatuVatu,
    countries: [CountryCode.Vanuatu],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Vanuatu Vatu",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "VT",
    symbol_native: "VT",
    symbol_placement: "before",
    thousands_separator: "."
  },
  VenezuelaBolivar: {
    code: CurrencyCode.VenezuelaBolivar,
    countries: [CountryCode.Venezuela],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Venezuela Bolivar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "Bs. F",
    symbol_native: "Bs. F",
    symbol_placement: "before",
    thousands_separator: "."
  },
  VietnamDong: {
    code: CurrencyCode.VietnamDong,
    countries: [CountryCode.Vietnam],
    decimal_digits: 0,
    decimal_separator: ",",
    name: "Vietnam Dong",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AB",
    symbol_native: "\u20AB",
    symbol_placement: "before",
    thousands_separator: "."
  },
  YemenRial: {
    code: CurrencyCode.YemenRial,
    countries: [CountryCode.Yemen],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Yemen Rial",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\uFDFC",
    symbol_native: "\uFDFC",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ZambiaKwacha: {
    code: CurrencyCode.ZambiaKwacha,
    countries: [CountryCode.Zambia],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Zambia Kwacha",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "ZK",
    symbol_native: "ZK",
    symbol_placement: "before",
    thousands_separator: "."
  },
  ZimbabweDollar: {
    code: CurrencyCode.ZimbabweDollar,
    countries: [CountryCode.Zimbabwe],
    decimal_digits: 2,
    decimal_separator: ",",
    name: "Zimbabwe Dollar",
    negative_sign: "-",
    positive_sign: "",
    rounding: 0,
    symbol: "\u20AB",
    symbol_native: "\u20AB",
    symbol_placement: "before",
    thousands_separator: "."
  }
});
var CryptoCurrency;
(function(CryptoCurrency2) {
  CryptoCurrency2["Bitcoin"] = "BTC";
  CryptoCurrency2["Ethereum"] = "ETH";
  CryptoCurrency2["Litecoin"] = "LTC";
  CryptoCurrency2["Ripple"] = "XRP";
  CryptoCurrency2["Dash"] = "DASH";
  CryptoCurrency2["Zcash"] = "ZEC";
  CryptoCurrency2["Dogecoin"] = "DOGE";
  CryptoCurrency2["Monero"] = "XMR";
  CryptoCurrency2["BitcoinCash"] = "BCH";
  CryptoCurrency2["EOS"] = "EOS";
  CryptoCurrency2["Binance"] = "BNB";
  CryptoCurrency2["Stellar"] = "XLM";
  CryptoCurrency2["Cardano"] = "ADA";
  CryptoCurrency2["IOTA"] = "IOTA";
  CryptoCurrency2["Tezos"] = "XTZ";
  CryptoCurrency2["NEO"] = "NEO";
  CryptoCurrency2["TRON"] = "TRX";
  CryptoCurrency2["EOSClassic"] = "EOSC";
  CryptoCurrency2["Ontology"] = "ONT";
  CryptoCurrency2["VeChain"] = "VEN";
  CryptoCurrency2["QTUM"] = "QTUM";
  CryptoCurrency2["Lisk"] = "LSK";
  CryptoCurrency2["Waves"] = "WAVES";
  CryptoCurrency2["OmiseGO"] = "OMG";
  CryptoCurrency2["Zilliqa"] = "ZIL";
  CryptoCurrency2["BitcoinGold"] = "BTG";
  CryptoCurrency2["Decred"] = "DCR";
  CryptoCurrency2["Stratis"] = "STRAT";
  CryptoCurrency2["Populous"] = "PPT";
  CryptoCurrency2["Augur"] = "REP";
  CryptoCurrency2["Golem"] = "GNT";
  CryptoCurrency2["Siacoin"] = "SC";
  CryptoCurrency2["BasicAttentionToken"] = "BAT";
  CryptoCurrency2["ZCoin"] = "XZC";
  CryptoCurrency2["StratisHedged"] = "SNT";
  CryptoCurrency2["VeChainHedged"] = "VEN";
  CryptoCurrency2["PowerLedger"] = "POWR";
  CryptoCurrency2["WavesHedged"] = "WAVE";
  CryptoCurrency2["ZilliqaHedged"] = "ZRX";
  CryptoCurrency2["BitcoinDiamond"] = "BCD";
  CryptoCurrency2["DigiByte"] = "DGB";
  CryptoCurrency2["DigiByteHedged"] = "DGB";
  CryptoCurrency2["Bytecoin"] = "BCN";
  CryptoCurrency2["BytecoinHedged"] = "BCN";
})(CryptoCurrency || (CryptoCurrency = {}));
var LanguageCode;
(function(LanguageCode2) {
  LanguageCode2["Afrikaans"] = "af";
  LanguageCode2["Albanian"] = "sq";
  LanguageCode2["Amharic"] = "am";
  LanguageCode2["Arabic"] = "ar";
  LanguageCode2["Armenian"] = "hy";
  LanguageCode2["Azerbaijani"] = "az";
  LanguageCode2["Bashkir"] = "ba";
  LanguageCode2["Basque"] = "eu";
  LanguageCode2["Belarusian"] = "be";
  LanguageCode2["Bengali"] = "bn";
  LanguageCode2["Berber"] = "ber";
  LanguageCode2["Bhutani"] = "dz";
  LanguageCode2["Bihari"] = "bh";
  LanguageCode2["Bislama"] = "bi";
  LanguageCode2["Bosnian"] = "bs";
  LanguageCode2["Breten"] = "br";
  LanguageCode2["Bulgarian"] = "bg";
  LanguageCode2["Burmese"] = "my";
  LanguageCode2["Cantonese"] = "yue";
  LanguageCode2["Catalan"] = "ca";
  LanguageCode2["Chinese"] = "zh";
  LanguageCode2["Chuvash"] = "cv";
  LanguageCode2["Corsican"] = "co";
  LanguageCode2["Croatian"] = "hr";
  LanguageCode2["Czech"] = "cs";
  LanguageCode2["Danish"] = "da";
  LanguageCode2["Dari"] = "prs";
  LanguageCode2["Divehi"] = "dv";
  LanguageCode2["Dutch"] = "nl";
  LanguageCode2["English"] = "en";
  LanguageCode2["Esperanto"] = "eo";
  LanguageCode2["Estonian"] = "et";
  LanguageCode2["Faroese"] = "fo";
  LanguageCode2["Farsi"] = "fa";
  LanguageCode2["Filipino"] = "fil";
  LanguageCode2["Finnish"] = "fi";
  LanguageCode2["French"] = "fr";
  LanguageCode2["Frisian"] = "fy";
  LanguageCode2["Galician"] = "gl";
  LanguageCode2["Georgian"] = "ka";
  LanguageCode2["German"] = "de";
  LanguageCode2["Greek"] = "el";
  LanguageCode2["Greenlandic"] = "kl";
  LanguageCode2["Gujarati"] = "gu";
  LanguageCode2["Haitian"] = "ht";
  LanguageCode2["Hausa"] = "ha";
  LanguageCode2["Hebrew"] = "he";
  LanguageCode2["Hindi"] = "hi";
  LanguageCode2["Hungarian"] = "hu";
  LanguageCode2["Icelandic"] = "is";
  LanguageCode2["Igbo"] = "ig";
  LanguageCode2["Indonesian"] = "id";
  LanguageCode2["Irish"] = "ga";
  LanguageCode2["Italian"] = "it";
  LanguageCode2["Japanese"] = "ja";
  LanguageCode2["Javanese"] = "jv";
  LanguageCode2["Kannada"] = "kn";
  LanguageCode2["Karelian"] = "krl";
  LanguageCode2["Kazakh"] = "kk";
  LanguageCode2["Khmer"] = "km";
  LanguageCode2["Komi"] = "kv";
  LanguageCode2["Konkani"] = "kok";
  LanguageCode2["Korean"] = "ko";
  LanguageCode2["Kurdish"] = "ku";
  LanguageCode2["Kyrgyz"] = "ky";
  LanguageCode2["Lao"] = "lo";
  LanguageCode2["Latin"] = "la";
  LanguageCode2["Latvian"] = "lv";
  LanguageCode2["Lithuanian"] = "lt";
  LanguageCode2["Luxembourgish"] = "lb";
  LanguageCode2["Ossetian"] = "os";
  LanguageCode2["Macedonian"] = "mk";
  LanguageCode2["Malagasy"] = "mg";
  LanguageCode2["Malay"] = "ms";
  LanguageCode2["Malayalam"] = "ml";
  LanguageCode2["Maltese"] = "mt";
  LanguageCode2["Maori"] = "mi";
  LanguageCode2["Marathi"] = "mr";
  LanguageCode2["Mari"] = "mhr";
  LanguageCode2["Mongolian"] = "mn";
  LanguageCode2["Montenegrin"] = "me";
  LanguageCode2["Nepali"] = "ne";
  LanguageCode2["NorthernSotho"] = "nso";
  LanguageCode2["Norwegian"] = "no";
  LanguageCode2["NorwegianBokmal"] = "nb";
  LanguageCode2["NorwegianNynorsk"] = "nn";
  LanguageCode2["Oriya"] = "or";
  LanguageCode2["Pashto"] = "ps";
  LanguageCode2["Persian"] = "fa";
  LanguageCode2["Polish"] = "pl";
  LanguageCode2["Portuguese"] = "pt";
  LanguageCode2["Punjabi"] = "pa";
  LanguageCode2["Quechua"] = "qu";
  LanguageCode2["Romanian"] = "ro";
  LanguageCode2["Russian"] = "ru";
  LanguageCode2["Sakha"] = "sah";
  LanguageCode2["Sami"] = "se";
  LanguageCode2["Samoan"] = "sm";
  LanguageCode2["Sanskrit"] = "sa";
  LanguageCode2["Scots"] = "gd";
  LanguageCode2["Serbian"] = "sr";
  LanguageCode2["SerbianCyrillic"] = "sr-Cyrl";
  LanguageCode2["Sesotho"] = "st";
  LanguageCode2["Shona"] = "sn";
  LanguageCode2["Sindhi"] = "sd";
  LanguageCode2["Sinhala"] = "si";
  LanguageCode2["Slovak"] = "sk";
  LanguageCode2["Slovenian"] = "sl";
  LanguageCode2["Somali"] = "so";
  LanguageCode2["Spanish"] = "es";
  LanguageCode2["Sudanese"] = "su";
  LanguageCode2["Sutu"] = "sx";
  LanguageCode2["Swahili"] = "sw";
  LanguageCode2["Swedish"] = "sv";
  LanguageCode2["Syriac"] = "syr";
  LanguageCode2["Tagalog"] = "tl";
  LanguageCode2["Tajik"] = "tg";
  LanguageCode2["Tamazight"] = "tmh";
  LanguageCode2["Tamil"] = "ta";
  LanguageCode2["Tatar"] = "tt";
  LanguageCode2["Telugu"] = "te";
  LanguageCode2["Thai"] = "th";
  LanguageCode2["Tibetan"] = "bo";
  LanguageCode2["Tsonga"] = "ts";
  LanguageCode2["Tswana"] = "tn";
  LanguageCode2["Turkish"] = "tr";
  LanguageCode2["Turkmen"] = "tk";
  LanguageCode2["Ukrainian"] = "uk";
  LanguageCode2["Urdu"] = "ur";
  LanguageCode2["Uzbek"] = "uz";
  LanguageCode2["Vietnamese"] = "vi";
  LanguageCode2["Welsh"] = "cy";
  LanguageCode2["Xhosa"] = "xh";
  LanguageCode2["Yiddish"] = "yi";
  LanguageCode2["Yoruba"] = "yo";
  LanguageCode2["Zulu"] = "zu";
})(LanguageCode || (LanguageCode = {}));
var LocaleCode;
(function(LocaleCode2) {
  LocaleCode2["Afrikaans"] = "af";
  LocaleCode2["AfrikaansSouthAfrica"] = "af-ZA";
  LocaleCode2["Albanian"] = "sq";
  LocaleCode2["AlbanianAlbania"] = "sq-AL";
  LocaleCode2["Amharic"] = "am";
  LocaleCode2["AmharicEthiopia"] = "am-ET";
  LocaleCode2["Arabic"] = "ar";
  LocaleCode2["ArabicAlgeria"] = "ar-DZ";
  LocaleCode2["ArabicBahrain"] = "ar-BH";
  LocaleCode2["ArabicEgypt"] = "ar-EG";
  LocaleCode2["ArabicIraq"] = "ar-IQ";
  LocaleCode2["ArabicJordan"] = "ar-JO";
  LocaleCode2["ArabicKuwait"] = "ar-KW";
  LocaleCode2["ArabicLebanon"] = "ar-LB";
  LocaleCode2["ArabicLibya"] = "ar-LY";
  LocaleCode2["ArabicMorocco"] = "ar-MA";
  LocaleCode2["ArabicOman"] = "ar-OM";
  LocaleCode2["ArabicQatar"] = "ar-QA";
  LocaleCode2["ArabicSaudiArabia"] = "ar-SA";
  LocaleCode2["ArabicSyria"] = "ar-SY";
  LocaleCode2["ArabicTunisia"] = "ar-TN";
  LocaleCode2["ArabicUnitedArabEmirates"] = "ar-AE";
  LocaleCode2["ArabicYemen"] = "ar-YE";
  LocaleCode2["Armenian"] = "hy";
  LocaleCode2["ArmenianArmenia"] = "hy-AM";
  LocaleCode2["Azerbaijani"] = "az";
  LocaleCode2["AzerbaijaniAzerbaijan"] = "az-AZ";
  LocaleCode2["AzerbaijaniCyrillicAzerbaijan"] = "az-Cyrl-AZ";
  LocaleCode2["Bashkir"] = "ba";
  LocaleCode2["Basque"] = "eu";
  LocaleCode2["BasqueSpain"] = "eu-ES";
  LocaleCode2["Belarusian"] = "be";
  LocaleCode2["BelarusianBelarus"] = "be-BY";
  LocaleCode2["Bengali"] = "bn";
  LocaleCode2["BengaliBangladesh"] = "bn-BD";
  LocaleCode2["BengaliIndia"] = "bn-IN";
  LocaleCode2["Berber"] = "ber";
  LocaleCode2["Bhutani"] = "dz";
  LocaleCode2["BhutaniBhutan"] = "dz-BT";
  LocaleCode2["Bosnian"] = "bs";
  LocaleCode2["BosnianBosniaAndHerzegovina"] = "bs-BA";
  LocaleCode2["Breton"] = "br";
  LocaleCode2["Bulgarian"] = "bg";
  LocaleCode2["BulgarianBosniaAndHerzegovina"] = "bg-BG";
  LocaleCode2["BulgarianBulgaria"] = "bg-BG";
  LocaleCode2["Burmese"] = "my";
  LocaleCode2["BurmeseMyanmar"] = "my-MM";
  LocaleCode2["Cantonese"] = "yue";
  LocaleCode2["CantoneseHongKong"] = "yue-HK";
  LocaleCode2["Catalan"] = "ca";
  LocaleCode2["CatalanSpain"] = "ca-ES";
  LocaleCode2["Chechen"] = "ce";
  LocaleCode2["Cherokee"] = "chr";
  LocaleCode2["Chinese"] = "zh";
  LocaleCode2["ChineseSimplified"] = "zh-Hans";
  LocaleCode2["ChineseSimplifiedChina"] = "zh-Hans-CN";
  LocaleCode2["ChineseSimplifiedHongKong"] = "zh-Hans-HK";
  LocaleCode2["ChineseSimplifiedMacau"] = "zh-Hans-MO";
  LocaleCode2["ChineseSimplifiedSingapore"] = "zh-Hans-SG";
  LocaleCode2["ChineseTraditional"] = "zh-Hant";
  LocaleCode2["ChineseTraditionalHongKong"] = "zh-Hant-HK";
  LocaleCode2["ChineseTraditionalMacau"] = "zh-Hant-MO";
  LocaleCode2["ChineseTraditionalSingapore"] = "zh-Hant-SG";
  LocaleCode2["ChineseTraditionalTaiwan"] = "zh-Hant-TW";
  LocaleCode2["Chuvash"] = "cv";
  LocaleCode2["CorsicanFrance"] = "co-FR";
  LocaleCode2["Croatian"] = "hr";
  LocaleCode2["CroatianBosniaAndHerzegovina"] = "hr-BA";
  LocaleCode2["CroatianCroatia"] = "hr-HR";
  LocaleCode2["Czech"] = "cs";
  LocaleCode2["CzechCzechRepublic"] = "cs-CZ";
  LocaleCode2["Danish"] = "da";
  LocaleCode2["DanishDenmark"] = "da-DK";
  LocaleCode2["Dari"] = "prs";
  LocaleCode2["DariAfghanistan"] = "prs-AF";
  LocaleCode2["Divehi"] = "dv";
  LocaleCode2["DivehiMaldives"] = "dv-MV";
  LocaleCode2["Dutch"] = "nl";
  LocaleCode2["DutchBelgium"] = "nl-BE";
  LocaleCode2["DutchNetherlands"] = "nl-NL";
  LocaleCode2["English"] = "en";
  LocaleCode2["EnglishAustralia"] = "en-AU";
  LocaleCode2["EnglishBelgium"] = "en-BE";
  LocaleCode2["EnglishBelize"] = "en-BZ";
  LocaleCode2["EnglishCanada"] = "en-CA";
  LocaleCode2["EnglishCaribbean"] = "en-029";
  LocaleCode2["EnglishIreland"] = "en-IE";
  LocaleCode2["EnglishJamaica"] = "en-JM";
  LocaleCode2["EnglishNewZealand"] = "en-NZ";
  LocaleCode2["EnglishPhilippines"] = "en-PH";
  LocaleCode2["EnglishSingapore"] = "en-SG";
  LocaleCode2["EnglishSouthAfrica"] = "en-ZA";
  LocaleCode2["EnglishTrinidadAndTobago"] = "en-TT";
  LocaleCode2["EnglishUnitedKingdom"] = "en-GB";
  LocaleCode2["EnglishUnitedStates"] = "en-US";
  LocaleCode2["EnglishZimbabwe"] = "en-ZW";
  LocaleCode2["Esperanto"] = "eo";
  LocaleCode2["Estonian"] = "et";
  LocaleCode2["EstonianEstonia"] = "et-EE";
  LocaleCode2["Faroese"] = "fo";
  LocaleCode2["FaroeseFaroeIslands"] = "fo-FO";
  LocaleCode2["Farsi"] = "fa";
  LocaleCode2["FarsiIran"] = "fa-IR";
  LocaleCode2["Filipino"] = "fil";
  LocaleCode2["FilipinoPhilippines"] = "fil-PH";
  LocaleCode2["Finnish"] = "fi";
  LocaleCode2["FinnishFinland"] = "fi-FI";
  LocaleCode2["French"] = "fr";
  LocaleCode2["FrenchBelgium"] = "fr-BE";
  LocaleCode2["FrenchCanada"] = "fr-CA";
  LocaleCode2["FrenchFrance"] = "fr-FR";
  LocaleCode2["FrenchLuxembourg"] = "fr-LU";
  LocaleCode2["FrenchMonaco"] = "fr-MC";
  LocaleCode2["FrenchReunion"] = "fr-RE";
  LocaleCode2["FrenchSwitzerland"] = "fr-CH";
  LocaleCode2["Frisian"] = "fy";
  LocaleCode2["FrisianNetherlands"] = "fy-NL";
  LocaleCode2["Galician"] = "gl";
  LocaleCode2["GalicianSpain"] = "gl-ES";
  LocaleCode2["Georgian"] = "ka";
  LocaleCode2["GeorgianGeorgia"] = "ka-GE";
  LocaleCode2["German"] = "de";
  LocaleCode2["GermanAustria"] = "de-AT";
  LocaleCode2["GermanBelgium"] = "de-BE";
  LocaleCode2["GermanGermany"] = "de-DE";
  LocaleCode2["GermanLiechtenstein"] = "de-LI";
  LocaleCode2["GermanLuxembourg"] = "de-LU";
  LocaleCode2["GermanSwitzerland"] = "de-CH";
  LocaleCode2["Greenlandic"] = "kl";
  LocaleCode2["GreenlandicGreenland"] = "kl-GL";
  LocaleCode2["Greek"] = "el";
  LocaleCode2["GreekGreece"] = "el-GR";
  LocaleCode2["Gujarati"] = "gu";
  LocaleCode2["GujaratiIndia"] = "gu-IN";
  LocaleCode2["Haitian"] = "ht";
  LocaleCode2["Hausa"] = "ha";
  LocaleCode2["HausaGhana"] = "ha-GH";
  LocaleCode2["HausaNiger"] = "ha-NE";
  LocaleCode2["HausaNigeria"] = "ha-NG";
  LocaleCode2["Hebrew"] = "he";
  LocaleCode2["HebrewIsrael"] = "he-IL";
  LocaleCode2["Hindi"] = "hi";
  LocaleCode2["HindiIndia"] = "hi-IN";
  LocaleCode2["Hungarian"] = "hu";
  LocaleCode2["HungarianHungary"] = "hu-HU";
  LocaleCode2["Icelandic"] = "is";
  LocaleCode2["IcelandicIceland"] = "is-IS";
  LocaleCode2["Igbo"] = "ig";
  LocaleCode2["IgboNigeria"] = "ig-NG";
  LocaleCode2["Indonesian"] = "id";
  LocaleCode2["IndonesianIndonesia"] = "id-ID";
  LocaleCode2["Irish"] = "ga";
  LocaleCode2["IrishIreland"] = "ga-IE";
  LocaleCode2["Italian"] = "it";
  LocaleCode2["ItalianItaly"] = "it-IT";
  LocaleCode2["ItalianSwitzerland"] = "it-CH";
  LocaleCode2["Japanese"] = "ja";
  LocaleCode2["JapaneseJapan"] = "ja-JP";
  LocaleCode2["Javanese"] = "jv";
  LocaleCode2["Kannada"] = "kn";
  LocaleCode2["KannadaIndia"] = "kn-IN";
  LocaleCode2["Karelian"] = "krl";
  LocaleCode2["Kazakh"] = "kk";
  LocaleCode2["KazakhKazakhstan"] = "kk-KZ";
  LocaleCode2["Khmer"] = "km";
  LocaleCode2["KhmerCambodia"] = "km-KH";
  LocaleCode2["KinyarwandaRwanda"] = "rw-RW";
  LocaleCode2["Komi"] = "kv";
  LocaleCode2["Konkani"] = "kok";
  LocaleCode2["KonkaniIndia"] = "kok-IN";
  LocaleCode2["Korean"] = "ko";
  LocaleCode2["KoreanSouthKorea"] = "ko-KR";
  LocaleCode2["Kurdish"] = "ku";
  LocaleCode2["KurdishIraq"] = "ku-IQ";
  LocaleCode2["KurdishTurkey"] = "ku-TR";
  LocaleCode2["Kyrgyz"] = "ky";
  LocaleCode2["KyrgyzKyrgyzstan"] = "ky-KG";
  LocaleCode2["Lao"] = "lo";
  LocaleCode2["LaoLaos"] = "lo-LA";
  LocaleCode2["Latin"] = "la";
  LocaleCode2["Latvian"] = "lv";
  LocaleCode2["LatvianLatvia"] = "lv-LV";
  LocaleCode2["Lithuanian"] = "lt";
  LocaleCode2["LithuanianLithuania"] = "lt-LT";
  LocaleCode2["Luxembourgish"] = "lb";
  LocaleCode2["LuxembourgishBelgium"] = "lb-LU";
  LocaleCode2["LuxembourgishLuxembourg"] = "lb-LU";
  LocaleCode2["Macedonian"] = "mk";
  LocaleCode2["MacedonianNorthMacedonia"] = "mk-MK";
  LocaleCode2["Malagasy"] = "mg";
  LocaleCode2["Malay"] = "ms";
  LocaleCode2["MalayBrunei"] = "ms-BN";
  LocaleCode2["MalayIndia"] = "ms-IN";
  LocaleCode2["MalayMalaysia"] = "ms-MY";
  LocaleCode2["MalaySingapore"] = "ms-SG";
  LocaleCode2["Malayalam"] = "ml";
  LocaleCode2["MalayalamIndia"] = "ml-IN";
  LocaleCode2["Maltese"] = "mt";
  LocaleCode2["MalteseMalta"] = "mt-MT";
  LocaleCode2["Maori"] = "mi";
  LocaleCode2["MaoriNewZealand"] = "mi-NZ";
  LocaleCode2["Marathi"] = "mr";
  LocaleCode2["MarathiIndia"] = "mr-IN";
  LocaleCode2["Mari"] = "chm";
  LocaleCode2["Mongolian"] = "mn";
  LocaleCode2["MongolianMongolia"] = "mn-MN";
  LocaleCode2["Montenegrin"] = "me";
  LocaleCode2["MontenegrinMontenegro"] = "me-ME";
  LocaleCode2["Nepali"] = "ne";
  LocaleCode2["NepaliNepal"] = "ne-NP";
  LocaleCode2["NorthernSotho"] = "ns";
  LocaleCode2["NorthernSothoSouthAfrica"] = "ns-ZA";
  LocaleCode2["Norwegian"] = "nb";
  LocaleCode2["NorwegianBokmalNorway"] = "nb-NO";
  LocaleCode2["NorwegianNynorskNorway"] = "nn-NO";
  LocaleCode2["Oriya"] = "or";
  LocaleCode2["OriyaIndia"] = "or-IN";
  LocaleCode2["Ossetian"] = "os";
  LocaleCode2["Pashto"] = "ps";
  LocaleCode2["PashtoAfghanistan"] = "ps-AF";
  LocaleCode2["Persian"] = "fa";
  LocaleCode2["PersianIran"] = "fa-IR";
  LocaleCode2["Polish"] = "pl";
  LocaleCode2["PolishPoland"] = "pl-PL";
  LocaleCode2["Portuguese"] = "pt";
  LocaleCode2["PortugueseBrazil"] = "pt-BR";
  LocaleCode2["PortuguesePortugal"] = "pt-PT";
  LocaleCode2["Punjabi"] = "pa";
  LocaleCode2["PunjabiIndia"] = "pa-IN";
  LocaleCode2["PunjabiPakistan"] = "pa-PK";
  LocaleCode2["Quechua"] = "qu";
  LocaleCode2["QuechuaBolivia"] = "qu-BO";
  LocaleCode2["QuechuaEcuador"] = "qu-EC";
  LocaleCode2["QuechuaPeru"] = "qu-PE";
  LocaleCode2["Romanian"] = "ro";
  LocaleCode2["RomanianRomania"] = "ro-RO";
  LocaleCode2["Russian"] = "ru";
  LocaleCode2["RussianKazakhstan"] = "ru-KZ";
  LocaleCode2["RussianKyrgyzstan"] = "ru-KG";
  LocaleCode2["RussianRussia"] = "ru-RU";
  LocaleCode2["RussianUkraine"] = "ru-UA";
  LocaleCode2["Sakha"] = "sah";
  LocaleCode2["Sanskrit"] = "sa";
  LocaleCode2["SanskritIndia"] = "sa-IN";
  LocaleCode2["Sami"] = "se";
  LocaleCode2["SamiNorway"] = "se-NO";
  LocaleCode2["SamiSweden"] = "se-SE";
  LocaleCode2["SamiFinland"] = "se-FI";
  LocaleCode2["Samoan"] = "sm";
  LocaleCode2["SamoanSamoa"] = "sm-WS";
  LocaleCode2["Scots"] = "gd";
  LocaleCode2["Serbian"] = "sr";
  LocaleCode2["SerbianBosniaAndHerzegovina"] = "sr-BA";
  LocaleCode2["SerbianSerbiaAndMontenegro"] = "sr-SP";
  LocaleCode2["SerbianCyrillic"] = "sr-SP-Cyrl";
  LocaleCode2["SerbianCyrillicBosniaAndHerzegovina"] = "sr-Cyrl-BA";
  LocaleCode2["SerbianCyrillicSerbiaAndMontenegro"] = "sr-Cyrl-SP";
  LocaleCode2["Sesotho"] = "st";
  LocaleCode2["SesothoSouthAfrica"] = "st-ZA";
  LocaleCode2["Shona"] = "sn";
  LocaleCode2["ShonaZimbabwe"] = "sn-ZW";
  LocaleCode2["Sindhi"] = "sd";
  LocaleCode2["SindhiPakistan"] = "sd-PK";
  LocaleCode2["Sinhala"] = "si";
  LocaleCode2["SinhalaSriLanka"] = "si-LK";
  LocaleCode2["Slovak"] = "sk";
  LocaleCode2["SlovakSlovakia"] = "sk-SK";
  LocaleCode2["Slovenian"] = "sl";
  LocaleCode2["SlovenianSlovenia"] = "sl-SI";
  LocaleCode2["Somali"] = "so";
  LocaleCode2["SomaliSomalia"] = "so-SO";
  LocaleCode2["Spanish"] = "es";
  LocaleCode2["SpanishArgentina"] = "es-AR";
  LocaleCode2["SpanishBolivia"] = "es-BO";
  LocaleCode2["SpanishChile"] = "es-CL";
  LocaleCode2["SpanishColombia"] = "es-CO";
  LocaleCode2["SpanishCostaRica"] = "es-CR";
  LocaleCode2["SpanishCuba"] = "es-CU";
  LocaleCode2["SpanishDominicanRepublic"] = "es-DO";
  LocaleCode2["SpanishEcuador"] = "es-EC";
  LocaleCode2["SpanishEquatorialGuinea"] = "es-GQ";
  LocaleCode2["SpanishElSalvador"] = "es-SV";
  LocaleCode2["SpanishGuatemala"] = "es-GT";
  LocaleCode2["SpanishHonduras"] = "es-HN";
  LocaleCode2["SpanishMexico"] = "es-MX";
  LocaleCode2["SpanishNicaragua"] = "es-NI";
  LocaleCode2["SpanishPanama"] = "es-PA";
  LocaleCode2["SpanishParaguay"] = "es-PY";
  LocaleCode2["SpanishPeru"] = "es-PE";
  LocaleCode2["SpanishPuertoRico"] = "es-PR";
  LocaleCode2["SpanishSpain"] = "es-ES";
  LocaleCode2["SpanishUnitedStates"] = "es-US";
  LocaleCode2["SpanishUruguay"] = "es-UY";
  LocaleCode2["SpanishVenezuela"] = "es-VE";
  LocaleCode2["Sudanese"] = "su";
  LocaleCode2["Sutu"] = "st";
  LocaleCode2["SutuSouthAfrica"] = "st-ZA";
  LocaleCode2["Swahili"] = "sw";
  LocaleCode2["SwahiliKenya"] = "sw-KE";
  LocaleCode2["Swedish"] = "sv";
  LocaleCode2["SwedishFinland"] = "sv-FI";
  LocaleCode2["SwedishSweden"] = "sv-SE";
  LocaleCode2["Syriac"] = "syr";
  LocaleCode2["SyriacSyria"] = "syr-SY";
  LocaleCode2["Tajik"] = "tg";
  LocaleCode2["TajikTajikistan"] = "tg-TJ";
  LocaleCode2["Tagalog"] = "tl";
  LocaleCode2["TagalogPhilippines"] = "tl-PH";
  LocaleCode2["Tamazight"] = "tmh";
  LocaleCode2["Tamil"] = "ta";
  LocaleCode2["TamilIndia"] = "ta-IN";
  LocaleCode2["Tatar"] = "tt";
  LocaleCode2["Telugu"] = "te";
  LocaleCode2["TeluguIndia"] = "te-IN";
  LocaleCode2["Thai"] = "th";
  LocaleCode2["ThaiThailand"] = "th-TH";
  LocaleCode2["Tibetan"] = "bo";
  LocaleCode2["TibetanBhutan"] = "bo-BT";
  LocaleCode2["TibetanChina"] = "bo-CN";
  LocaleCode2["TibetanIndia"] = "bo-IN";
  LocaleCode2["Tsonga"] = "ts";
  LocaleCode2["Tswana"] = "tn";
  LocaleCode2["TswanaSouthAfrica"] = "tn-ZA";
  LocaleCode2["Turkish"] = "tr";
  LocaleCode2["TurkishTurkey"] = "tr-TR";
  LocaleCode2["Turkmen"] = "tk";
  LocaleCode2["Ukrainian"] = "uk";
  LocaleCode2["UkrainianUkraine"] = "uk-UA";
  LocaleCode2["Urdu"] = "ur";
  LocaleCode2["UrduAfghanistan"] = "ur-AF";
  LocaleCode2["UrduIndia"] = "ur-IN";
  LocaleCode2["UrduPakistan"] = "ur-PK";
  LocaleCode2["Uzbek"] = "uz";
  LocaleCode2["UzbekCyrillic"] = "uz-Cyrl-UZ";
  LocaleCode2["UzbekLatin"] = "uz-Latn-UZ";
  LocaleCode2["UzbekUzbekistan"] = "uz-UZ";
  LocaleCode2["Vietnamese"] = "vi";
  LocaleCode2["VietnameseVietnam"] = "vi-VN";
  LocaleCode2["Welsh"] = "cy";
  LocaleCode2["WelshUnitedKingdom"] = "cy-GB";
  LocaleCode2["Xhosa"] = "xh";
  LocaleCode2["XhosaSouthAfrica"] = "xh-ZA";
  LocaleCode2["Yiddish"] = "yi";
  LocaleCode2["Yoruba"] = "yo";
  LocaleCode2["YorubaNigeria"] = "yo-NG";
  LocaleCode2["ZhuyinMandarinChina"] = "yue-Hant-CN";
  LocaleCode2["Zulu"] = "zu";
  LocaleCode2["ZuluSouthAfrica"] = "zu-ZA";
})(LocaleCode || (LocaleCode = {}));
var TimezoneRegions;
(function(TimezoneRegions2) {
  TimezoneRegions2["AfricaAbidjan"] = "Africa/Abidjan";
  TimezoneRegions2["AfricaAccra"] = "Africa/Accra";
  TimezoneRegions2["AfricaAddisAbaba"] = "Africa/Addis_Ababa";
  TimezoneRegions2["AfricaAlgiers"] = "Africa/Algiers";
  TimezoneRegions2["AfricaAsmara"] = "Africa/Asmara";
  TimezoneRegions2["AfricaBamako"] = "Africa/Bamako";
  TimezoneRegions2["AfricaBangui"] = "Africa/Bangui";
  TimezoneRegions2["AfricaBanjul"] = "Africa/Banjul";
  TimezoneRegions2["AfricaBissau"] = "Africa/Bissau";
  TimezoneRegions2["AfricaBlantyre"] = "Africa/Blantyre";
  TimezoneRegions2["AfricaBrazzaville"] = "Africa/Brazzaville";
  TimezoneRegions2["AfricaBujumbura"] = "Africa/Bujumbura";
  TimezoneRegions2["AfricaCairo"] = "Africa/Cairo";
  TimezoneRegions2["AfricaCasablanca"] = "Africa/Casablanca";
  TimezoneRegions2["AfricaCeuta"] = "Africa/Ceuta";
  TimezoneRegions2["AfricaConakry"] = "Africa/Conakry";
  TimezoneRegions2["AfricaDakar"] = "Africa/Dakar";
  TimezoneRegions2["AfricaDarEsSalaam"] = "Africa/Dar_es_Salaam";
  TimezoneRegions2["AfricaDjibouti"] = "Africa/Djibouti";
  TimezoneRegions2["AfricaDouala"] = "Africa/Douala";
  TimezoneRegions2["AfricaElAaiun"] = "Africa/El_Aaiun";
  TimezoneRegions2["AfricaFreetown"] = "Africa/Freetown";
  TimezoneRegions2["AfricaGaborone"] = "Africa/Gaborone";
  TimezoneRegions2["AfricaHarare"] = "Africa/Harare";
  TimezoneRegions2["AfricaJohannesburg"] = "Africa/Johannesburg";
  TimezoneRegions2["AfricaJuba"] = "Africa/Juba";
  TimezoneRegions2["AfricaKampala"] = "Africa/Kampala";
  TimezoneRegions2["AfricaKhartoum"] = "Africa/Khartoum";
  TimezoneRegions2["AfricaKigali"] = "Africa/Kigali";
  TimezoneRegions2["AfricaKinshasa"] = "Africa/Kinshasa";
  TimezoneRegions2["AfricaLagos"] = "Africa/Lagos";
  TimezoneRegions2["AfricaLibreville"] = "Africa/Libreville";
  TimezoneRegions2["AfricaLome"] = "Africa/Lome";
  TimezoneRegions2["AfricaLuanda"] = "Africa/Luanda";
  TimezoneRegions2["AfricaLubumbashi"] = "Africa/Lubumbashi";
  TimezoneRegions2["AfricaLusaka"] = "Africa/Lusaka";
  TimezoneRegions2["AfricaMalabo"] = "Africa/Malabo";
  TimezoneRegions2["AfricaMaputo"] = "Africa/Maputo";
  TimezoneRegions2["AfricaMaseru"] = "Africa/Maseru";
  TimezoneRegions2["AfricaMbabane"] = "Africa/Mbabane";
  TimezoneRegions2["AfricaMogadishu"] = "Africa/Mogadishu";
  TimezoneRegions2["AfricaMonrovia"] = "Africa/Monrovia";
  TimezoneRegions2["AfricaNairobi"] = "Africa/Nairobi";
  TimezoneRegions2["AfricaNdjamena"] = "Africa/Ndjamena";
  TimezoneRegions2["AfricaNiamey"] = "Africa/Niamey";
  TimezoneRegions2["AfricaNouakchott"] = "Africa/Nouakchott";
  TimezoneRegions2["AfricaOuagadougou"] = "Africa/Ouagadougou";
  TimezoneRegions2["AfricaPortoNovo"] = "Africa/Porto-Novo";
  TimezoneRegions2["AfricaSaoTome"] = "Africa/Sao_Tome";
  TimezoneRegions2["AfricaTripoli"] = "Africa/Tripoli";
  TimezoneRegions2["AfricaTunis"] = "Africa/Tunis";
  TimezoneRegions2["AfricaWindhoek"] = "Africa/Windhoek";
  TimezoneRegions2["AmericaAdak"] = "America/Adak";
  TimezoneRegions2["AmericaAnchorage"] = "America/Anchorage";
  TimezoneRegions2["AmericaAnguilla"] = "America/Anguilla";
  TimezoneRegions2["AmericaAntigua"] = "America/Antigua";
  TimezoneRegions2["AmericaAraguaina"] = "America/Araguaina";
  TimezoneRegions2["AmericaArgentinaBuenosAires"] = "America/Argentina/Buenos_Aires";
  TimezoneRegions2["AmericaArgentinaCatamarca"] = "America/Argentina/Catamarca";
  TimezoneRegions2["AmericaArgentinaCordoba"] = "America/Argentina/Cordoba";
  TimezoneRegions2["AmericaArgentinaJujuy"] = "America/Argentina/Jujuy";
  TimezoneRegions2["AmericaArgentinaLaRioja"] = "America/Argentina/La_Rioja";
  TimezoneRegions2["AmericaArgentinaMendoza"] = "America/Argentina/Mendoza";
  TimezoneRegions2["AmericaArgentinaRioGallegos"] = "America/Argentina/Rio_Gallegos";
  TimezoneRegions2["AmericaArgentinaSalta"] = "America/Argentina/Salta";
  TimezoneRegions2["AmericaArgentinaSanJuan"] = "America/Argentina/San_Juan";
  TimezoneRegions2["AmericaArgentinaSanLuis"] = "America/Argentina/San_Luis";
  TimezoneRegions2["AmericaArgentinaTucuman"] = "America/Argentina/Tucuman";
  TimezoneRegions2["AmericaArgentinaUshuaia"] = "America/Argentina/Ushuaia";
  TimezoneRegions2["AmericaAruba"] = "America/Aruba";
  TimezoneRegions2["AmericaAsuncion"] = "America/Asuncion";
  TimezoneRegions2["AmericaAtikokan"] = "America/Atikokan";
  TimezoneRegions2["AmericaAtka"] = "America/Atka";
  TimezoneRegions2["AmericaBahia"] = "America/Bahia";
  TimezoneRegions2["AmericaBahiaBanderas"] = "America/Bahia_Banderas";
  TimezoneRegions2["AmericaBarbados"] = "America/Barbados";
  TimezoneRegions2["AmericaBelem"] = "America/Belem";
  TimezoneRegions2["AmericaBelize"] = "America/Belize";
  TimezoneRegions2["AmericaBlancSablon"] = "America/Blanc-Sablon";
  TimezoneRegions2["AmericaBoaVista"] = "America/Boa_Vista";
  TimezoneRegions2["AmericaBogota"] = "America/Bogota";
  TimezoneRegions2["AmericaBoise"] = "America/Boise";
  TimezoneRegions2["AmericaCambridgeBay"] = "America/Cambridge_Bay";
  TimezoneRegions2["AmericaCampoGrande"] = "America/Campo_Grande";
  TimezoneRegions2["AmericaCancun"] = "America/Cancun";
  TimezoneRegions2["AmericaCaracas"] = "America/Caracas";
  TimezoneRegions2["AmericaCayenne"] = "America/Cayenne";
  TimezoneRegions2["AmericaCayman"] = "America/Cayman";
  TimezoneRegions2["AmericaChicago"] = "America/Chicago";
  TimezoneRegions2["AmericaChihuahua"] = "America/Chihuahua";
  TimezoneRegions2["AmericaCoralHarbour"] = "America/Coral_Harbour";
  TimezoneRegions2["AmericaCordoba"] = "America/Cordoba";
  TimezoneRegions2["AmericaCostaRica"] = "America/Costa_Rica";
  TimezoneRegions2["AmericaCreston"] = "America/Creston";
  TimezoneRegions2["AmericaCuiaba"] = "America/Cuiaba";
  TimezoneRegions2["AmericaCuracao"] = "America/Curacao";
  TimezoneRegions2["AmericaDanmarkshavn"] = "America/Danmarkshavn";
  TimezoneRegions2["AmericaDawson"] = "America/Dawson";
  TimezoneRegions2["AmericaDawsonCreek"] = "America/Dawson_Creek";
  TimezoneRegions2["AmericaDenver"] = "America/Denver";
  TimezoneRegions2["AmericaDetroit"] = "America/Detroit";
  TimezoneRegions2["AmericaDominica"] = "America/Dominica";
  TimezoneRegions2["AmericaEdmonton"] = "America/Edmonton";
  TimezoneRegions2["AmericaEirunepe"] = "America/Eirunepe";
  TimezoneRegions2["AmericaElSalvador"] = "America/El_Salvador";
  TimezoneRegions2["AmericaFortaleza"] = "America/Fortaleza";
  TimezoneRegions2["AmericaGlaceBay"] = "America/Glace_Bay";
  TimezoneRegions2["AmericaGodthab"] = "America/Godthab";
  TimezoneRegions2["AmericaGooseBay"] = "America/Goose_Bay";
  TimezoneRegions2["AmericaGrandTurk"] = "America/Grand_Turk";
  TimezoneRegions2["AmericaGrenada"] = "America/Grenada";
  TimezoneRegions2["AmericaGuadeloupe"] = "America/Guadeloupe";
  TimezoneRegions2["AmericaGuatemala"] = "America/Guatemala";
  TimezoneRegions2["AmericaGuayaquil"] = "America/Guayaquil";
  TimezoneRegions2["AmericaGuyana"] = "America/Guyana";
  TimezoneRegions2["AmericaHalifax"] = "America/Halifax";
  TimezoneRegions2["AmericaHavana"] = "America/Havana";
  TimezoneRegions2["AmericaHermosillo"] = "America/Hermosillo";
  TimezoneRegions2["AmericaIndianaIndianapolis"] = "America/Indiana/Indianapolis";
  TimezoneRegions2["AmericaIndianaKnox"] = "America/Indiana/Knox";
  TimezoneRegions2["AmericaIndianaMarengo"] = "America/Indiana/Marengo";
  TimezoneRegions2["AmericaIndianaPetersburg"] = "America/Indiana/Petersburg";
  TimezoneRegions2["AmericaIndianaTellCity"] = "America/Indiana/Tell_City";
  TimezoneRegions2["AmericaIndianaVevay"] = "America/Indiana/Vevay";
  TimezoneRegions2["AmericaIndianaVincennes"] = "America/Indiana/Vincennes";
  TimezoneRegions2["AmericaIndianaWinamac"] = "America/Indiana/Winamac";
  TimezoneRegions2["AmericaInuvik"] = "America/Inuvik";
  TimezoneRegions2["AmericaIqaluit"] = "America/Iqaluit";
  TimezoneRegions2["AmericaJamaica"] = "America/Jamaica";
  TimezoneRegions2["AmericaJuneau"] = "America/Juneau";
  TimezoneRegions2["AmericaKentuckyLouisville"] = "America/Kentucky/Louisville";
  TimezoneRegions2["AmericaKentuckyMonticello"] = "America/Kentucky/Monticello";
  TimezoneRegions2["AmericaKralendijk"] = "America/Kralendijk";
  TimezoneRegions2["AmericaLaPaz"] = "America/La_Paz";
  TimezoneRegions2["AmericaLima"] = "America/Lima";
  TimezoneRegions2["AmericaLosAngeles"] = "America/Los_Angeles";
  TimezoneRegions2["AmericaLouisville"] = "America/Louisville";
  TimezoneRegions2["AmericaLowerPrinces"] = "America/Lower_Princes";
  TimezoneRegions2["AmericaMaceio"] = "America/Maceio";
  TimezoneRegions2["AmericaManagua"] = "America/Managua";
  TimezoneRegions2["AmericaManaus"] = "America/Manaus";
  TimezoneRegions2["AmericaMarigot"] = "America/Marigot";
  TimezoneRegions2["AmericaMartinique"] = "America/Martinique";
  TimezoneRegions2["AmericaMatamoros"] = "America/Matamoros";
  TimezoneRegions2["AmericaMazatlan"] = "America/Mazatlan";
  TimezoneRegions2["AmericaMenominee"] = "America/Menominee";
  TimezoneRegions2["AmericaMerida"] = "America/Merida";
  TimezoneRegions2["AmericaMetlakatla"] = "America/Metlakatla";
  TimezoneRegions2["AmericaMexicoCity"] = "America/Mexico_City";
  TimezoneRegions2["AmericaMiquelon"] = "America/Miquelon";
  TimezoneRegions2["AmericaMoncton"] = "America/Moncton";
  TimezoneRegions2["AmericaMonterrey"] = "America/Monterrey";
  TimezoneRegions2["AmericaMontevideo"] = "America/Montevideo";
  TimezoneRegions2["AmericaMontserrat"] = "America/Montserrat";
  TimezoneRegions2["AmericaMontreal"] = "America/Montreal";
  TimezoneRegions2["AmericaNassau"] = "America/Nassau";
  TimezoneRegions2["AmericaNewYork"] = "America/New_York";
  TimezoneRegions2["AmericaNipigon"] = "America/Nipigon";
  TimezoneRegions2["AmericaNome"] = "America/Nome";
  TimezoneRegions2["AmericaNoronha"] = "America/Noronha";
  TimezoneRegions2["AmericaNorthDakotaBeulah"] = "America/North_Dakota/Beulah";
  TimezoneRegions2["AmericaNorthDakotaCenter"] = "America/North_Dakota/Center";
  TimezoneRegions2["AmericaNorthDakotaNewSalem"] = "America/North_Dakota/New_Salem";
  TimezoneRegions2["AmericaOjinaga"] = "America/Ojinaga";
  TimezoneRegions2["AmericaPanama"] = "America/Panama";
  TimezoneRegions2["AmericaPangnirtung"] = "America/Pangnirtung";
  TimezoneRegions2["AmericaParamaribo"] = "America/Paramaribo";
  TimezoneRegions2["AmericaPhoenix"] = "America/Phoenix";
  TimezoneRegions2["AmericaPortAuPrince"] = "America/Port-au-Prince";
  TimezoneRegions2["AmericaPortOfSpain"] = "America/Port_of_Spain";
  TimezoneRegions2["AmericaPortoVelho"] = "America/Porto_Velho";
  TimezoneRegions2["AmericaPuertoRico"] = "America/Puerto_Rico";
  TimezoneRegions2["AmericaRainyRiver"] = "America/Rainy_River";
  TimezoneRegions2["AmericaRankinInlet"] = "America/Rankin_Inlet";
  TimezoneRegions2["AmericaRecife"] = "America/Recife";
  TimezoneRegions2["AmericaRegina"] = "America/Regina";
  TimezoneRegions2["AmericaResolute"] = "America/Resolute";
  TimezoneRegions2["AmericaRioBranco"] = "America/Rio_Branco";
  TimezoneRegions2["AmericaSantaIsabel"] = "America/Santa_Isabel";
  TimezoneRegions2["AmericaSantarem"] = "America/Santarem";
  TimezoneRegions2["AmericaSantiago"] = "America/Santiago";
  TimezoneRegions2["AmericaSantoDomingo"] = "America/Santo_Domingo";
  TimezoneRegions2["AmericaSaoPaulo"] = "America/Sao_Paulo";
  TimezoneRegions2["AmericaScoresbysund"] = "America/Scoresbysund";
  TimezoneRegions2["AmericaShiprock"] = "America/Shiprock";
  TimezoneRegions2["AmericaSitka"] = "America/Sitka";
  TimezoneRegions2["AmericaStBarthelemy"] = "America/St_Barthelemy";
  TimezoneRegions2["AmericaStJohns"] = "America/St_Johns";
  TimezoneRegions2["AmericaStKitts"] = "America/St_Kitts";
  TimezoneRegions2["AmericaStLucia"] = "America/St_Lucia";
  TimezoneRegions2["AmericaStThomas"] = "America/St_Thomas";
  TimezoneRegions2["AmericaStVincent"] = "America/St_Vincent";
  TimezoneRegions2["AmericaSwiftCurrent"] = "America/Swift_Current";
  TimezoneRegions2["AmericaTegucigalpa"] = "America/Tegucigalpa";
  TimezoneRegions2["AmericaThule"] = "America/Thule";
  TimezoneRegions2["AmericaThunderBay"] = "America/Thunder_Bay";
  TimezoneRegions2["AmericaTijuana"] = "America/Tijuana";
  TimezoneRegions2["AmericaToronto"] = "America/Toronto";
  TimezoneRegions2["AmericaTortola"] = "America/Tortola";
  TimezoneRegions2["AmericaVancouver"] = "America/Vancouver";
  TimezoneRegions2["AmericaWhitehorse"] = "America/Whitehorse";
  TimezoneRegions2["AmericaWinnipeg"] = "America/Winnipeg";
  TimezoneRegions2["AmericaYakutat"] = "America/Yakutat";
  TimezoneRegions2["AmericaYellowknife"] = "America/Yellowknife";
  TimezoneRegions2["AntarcticaCasey"] = "Antarctica/Casey";
  TimezoneRegions2["AntarcticaDavis"] = "Antarctica/Davis";
  TimezoneRegions2["AntarcticaDumontDUrville"] = "Antarctica/DumontDUrville";
  TimezoneRegions2["AntarcticaMacquarie"] = "Antarctica/Macquarie";
  TimezoneRegions2["AntarcticaMawson"] = "Antarctica/Mawson";
  TimezoneRegions2["AntarcticaMcMurdo"] = "Antarctica/McMurdo";
  TimezoneRegions2["AntarcticaPalmer"] = "Antarctica/Palmer";
  TimezoneRegions2["AntarcticaRothera"] = "Antarctica/Rothera";
  TimezoneRegions2["AntarcticaSyowa"] = "Antarctica/Syowa";
  TimezoneRegions2["AntarcticaTroll"] = "Antarctica/Troll";
  TimezoneRegions2["AntarcticaVostok"] = "Antarctica/Vostok";
  TimezoneRegions2["ArcticLongyearbyen"] = "Arctic/Longyearbyen";
  TimezoneRegions2["AsiaAden"] = "Asia/Aden";
  TimezoneRegions2["AsiaAlmaty"] = "Asia/Almaty";
  TimezoneRegions2["AsiaAmman"] = "Asia/Amman";
  TimezoneRegions2["AsiaAnadyr"] = "Asia/Anadyr";
  TimezoneRegions2["AsiaAqtau"] = "Asia/Aqtau";
  TimezoneRegions2["AsiaAqtobe"] = "Asia/Aqtobe";
  TimezoneRegions2["AsiaAshgabat"] = "Asia/Ashgabat";
  TimezoneRegions2["AsiaBaghdad"] = "Asia/Baghdad";
  TimezoneRegions2["AsiaBahrain"] = "Asia/Bahrain";
  TimezoneRegions2["AsiaBaku"] = "Asia/Baku";
  TimezoneRegions2["AsiaBangkok"] = "Asia/Bangkok";
  TimezoneRegions2["AsiaBarnaul"] = "Asia/Barnaul";
  TimezoneRegions2["AsiaBeirut"] = "Asia/Beirut";
  TimezoneRegions2["AsiaBishkek"] = "Asia/Bishkek";
  TimezoneRegions2["AsiaBrunei"] = "Asia/Brunei";
  TimezoneRegions2["AsiaChita"] = "Asia/Chita";
  TimezoneRegions2["AsiaChoibalsan"] = "Asia/Choibalsan";
  TimezoneRegions2["AsiaColombo"] = "Asia/Colombo";
  TimezoneRegions2["AsiaDamascus"] = "Asia/Damascus";
  TimezoneRegions2["AsiaDhaka"] = "Asia/Dhaka";
  TimezoneRegions2["AsiaDili"] = "Asia/Dili";
  TimezoneRegions2["AsiaDubai"] = "Asia/Dubai";
  TimezoneRegions2["AsiaDushanbe"] = "Asia/Dushanbe";
  TimezoneRegions2["AsiaFamagusta"] = "Asia/Famagusta";
  TimezoneRegions2["AsiaGaza"] = "Asia/Gaza";
  TimezoneRegions2["AsiaHebron"] = "Asia/Hebron";
  TimezoneRegions2["AsiaHoChiMinh"] = "Asia/Ho_Chi_Minh";
  TimezoneRegions2["AsiaHongKong"] = "Asia/Hong_Kong";
  TimezoneRegions2["AsiaHovd"] = "Asia/Hovd";
  TimezoneRegions2["AsiaIrkutsk"] = "Asia/Irkutsk";
  TimezoneRegions2["AsiaJakarta"] = "Asia/Jakarta";
  TimezoneRegions2["AsiaJayapura"] = "Asia/Jayapura";
  TimezoneRegions2["AsiaJerusalem"] = "Asia/Jerusalem";
  TimezoneRegions2["AsiaKabul"] = "Asia/Kabul";
  TimezoneRegions2["AsiaKamchatka"] = "Asia/Kamchatka";
  TimezoneRegions2["AsiaKarachi"] = "Asia/Karachi";
  TimezoneRegions2["AsiaKathmandu"] = "Asia/Kathmandu";
  TimezoneRegions2["AsiaKhandyga"] = "Asia/Khandyga";
  TimezoneRegions2["AsiaKolkata"] = "Asia/Kolkata";
  TimezoneRegions2["AsiaKrasnoyarsk"] = "Asia/Krasnoyarsk";
  TimezoneRegions2["AsiaKualaLumpur"] = "Asia/Kuala_Lumpur";
  TimezoneRegions2["AsiaKuching"] = "Asia/Kuching";
  TimezoneRegions2["AsiaKuwait"] = "Asia/Kuwait";
  TimezoneRegions2["AsiaMacau"] = "Asia/Macau";
  TimezoneRegions2["AsiaMagadan"] = "Asia/Magadan";
  TimezoneRegions2["AsiaMakassar"] = "Asia/Makassar";
  TimezoneRegions2["AsiaManila"] = "Asia/Manila";
  TimezoneRegions2["AsiaMuscat"] = "Asia/Muscat";
  TimezoneRegions2["AsiaNicosia"] = "Asia/Nicosia";
  TimezoneRegions2["AsiaNovokuznetsk"] = "Asia/Novokuznetsk";
  TimezoneRegions2["AsiaNovosibirsk"] = "Asia/Novosibirsk";
  TimezoneRegions2["AsiaOmsk"] = "Asia/Omsk";
  TimezoneRegions2["AsiaOral"] = "Asia/Oral";
  TimezoneRegions2["AsiaPhnomPenh"] = "Asia/Phnom_Penh";
  TimezoneRegions2["AsiaPontianak"] = "Asia/Pontianak";
  TimezoneRegions2["AsiaPyongyang"] = "Asia/Pyongyang";
  TimezoneRegions2["AsiaQatar"] = "Asia/Qatar";
  TimezoneRegions2["AsiaQyzylorda"] = "Asia/Qyzylorda";
  TimezoneRegions2["AsiaRangoon"] = "Asia/Rangoon";
  TimezoneRegions2["AsiaRiyadh"] = "Asia/Riyadh";
  TimezoneRegions2["AsiaSakhalin"] = "Asia/Sakhalin";
  TimezoneRegions2["AsiaSamarkand"] = "Asia/Samarkand";
  TimezoneRegions2["AsiaSeoul"] = "Asia/Seoul";
  TimezoneRegions2["AsiaShanghai"] = "Asia/Shanghai";
  TimezoneRegions2["AsiaSingapore"] = "Asia/Singapore";
  TimezoneRegions2["AsiaSrednekolymsk"] = "Asia/Srednekolymsk";
  TimezoneRegions2["AsiaTaipei"] = "Asia/Taipei";
  TimezoneRegions2["AsiaTashkent"] = "Asia/Tashkent";
  TimezoneRegions2["AsiaTbilisi"] = "Asia/Tbilisi";
  TimezoneRegions2["AsiaTehran"] = "Asia/Tehran";
  TimezoneRegions2["AsiaThimphu"] = "Asia/Thimphu";
  TimezoneRegions2["AsiaTokyo"] = "Asia/Tokyo";
  TimezoneRegions2["AsiaTomsk"] = "Asia/Tomsk";
  TimezoneRegions2["AsiaUlaanbaatar"] = "Asia/Ulaanbaatar";
  TimezoneRegions2["AsiaUrumqi"] = "Asia/Urumqi";
  TimezoneRegions2["AsiaUstNera"] = "Asia/Ust-Nera";
  TimezoneRegions2["AsiaVientiane"] = "Asia/Vientiane";
  TimezoneRegions2["AsiaVladivostok"] = "Asia/Vladivostok";
  TimezoneRegions2["AsiaYakutsk"] = "Asia/Yakutsk";
  TimezoneRegions2["AsiaYekaterinburg"] = "Asia/Yekaterinburg";
  TimezoneRegions2["AsiaYerevan"] = "Asia/Yerevan";
  TimezoneRegions2["AtlanticAzores"] = "Atlantic/Azores";
  TimezoneRegions2["AtlanticBermuda"] = "Atlantic/Bermuda";
  TimezoneRegions2["AtlanticCanary"] = "Atlantic/Canary";
  TimezoneRegions2["AtlanticCapeVerde"] = "Atlantic/Cape_Verde";
  TimezoneRegions2["AtlanticFaroe"] = "Atlantic/Faroe";
  TimezoneRegions2["AtlanticMadeira"] = "Atlantic/Madeira";
  TimezoneRegions2["AtlanticReykjavik"] = "Atlantic/Reykjavik";
  TimezoneRegions2["AtlanticSouthGeorgia"] = "Atlantic/South_Georgia";
  TimezoneRegions2["AtlanticStHelena"] = "Atlantic/St_Helena";
  TimezoneRegions2["AtlanticStanley"] = "Atlantic/Stanley";
  TimezoneRegions2["AustraliaAdelaide"] = "Australia/Adelaide";
  TimezoneRegions2["AustraliaBrisbane"] = "Australia/Brisbane";
  TimezoneRegions2["AustraliaBrokenHill"] = "Australia/Broken_Hill";
  TimezoneRegions2["AustraliaCanberra"] = "Australia/Canberra";
  TimezoneRegions2["AustraliaCurrie"] = "Australia/Currie";
  TimezoneRegions2["AustraliaDarwin"] = "Australia/Darwin";
  TimezoneRegions2["AustraliaEucla"] = "Australia/Eucla";
  TimezoneRegions2["AustraliaHobart"] = "Australia/Hobart";
  TimezoneRegions2["AustraliaLindeman"] = "Australia/Lindeman";
  TimezoneRegions2["AustraliaLordHowe"] = "Australia/Lord_Howe";
  TimezoneRegions2["AustraliaMelbourne"] = "Australia/Melbourne";
  TimezoneRegions2["AustraliaPerth"] = "Australia/Perth";
  TimezoneRegions2["AustraliaSydney"] = "Australia/Sydney";
  TimezoneRegions2["EuropeAmsterdam"] = "Europe/Amsterdam";
  TimezoneRegions2["EuropeAndorra"] = "Europe/Andorra";
  TimezoneRegions2["EuropeAthens"] = "Europe/Athens";
  TimezoneRegions2["EuropeBelgrade"] = "Europe/Belgrade";
  TimezoneRegions2["EuropeBerlin"] = "Europe/Berlin";
  TimezoneRegions2["EuropeBratislava"] = "Europe/Bratislava";
  TimezoneRegions2["EuropeBrussels"] = "Europe/Brussels";
  TimezoneRegions2["EuropeBucharest"] = "Europe/Bucharest";
  TimezoneRegions2["EuropeBudapest"] = "Europe/Budapest";
  TimezoneRegions2["EuropeBusingen"] = "Europe/Busingen";
  TimezoneRegions2["EuropeChisinau"] = "Europe/Chisinau";
  TimezoneRegions2["EuropeCopenhagen"] = "Europe/Copenhagen";
  TimezoneRegions2["EuropeDublin"] = "Europe/Dublin";
  TimezoneRegions2["EuropeGibraltar"] = "Europe/Gibraltar";
  TimezoneRegions2["EuropeGuernsey"] = "Europe/Guernsey";
  TimezoneRegions2["EuropeHelsinki"] = "Europe/Helsinki";
  TimezoneRegions2["EuropeIsleOfMan"] = "Europe/Isle_of_Man";
  TimezoneRegions2["EuropeIstanbul"] = "Europe/Istanbul";
  TimezoneRegions2["EuropeJersey"] = "Europe/Jersey";
  TimezoneRegions2["EuropeKaliningrad"] = "Europe/Kaliningrad";
  TimezoneRegions2["EuropeKiev"] = "Europe/Kiev";
  TimezoneRegions2["EuropeKirov"] = "Europe/Kirov";
  TimezoneRegions2["EuropeLisbon"] = "Europe/Lisbon";
  TimezoneRegions2["EuropeLjubljana"] = "Europe/Ljubljana";
  TimezoneRegions2["EuropeLondon"] = "Europe/London";
  TimezoneRegions2["EuropeLuxembourg"] = "Europe/Luxembourg";
  TimezoneRegions2["EuropeMadrid"] = "Europe/Madrid";
  TimezoneRegions2["EuropeMalta"] = "Europe/Malta";
  TimezoneRegions2["EuropeMariehamn"] = "Europe/Mariehamn";
  TimezoneRegions2["EuropeMinsk"] = "Europe/Minsk";
  TimezoneRegions2["EuropeMonaco"] = "Europe/Monaco";
  TimezoneRegions2["EuropeMoscow"] = "Europe/Moscow";
  TimezoneRegions2["EuropeOslo"] = "Europe/Oslo";
  TimezoneRegions2["EuropeParis"] = "Europe/Paris";
  TimezoneRegions2["EuropePodgorica"] = "Europe/Podgorica";
  TimezoneRegions2["EuropePrague"] = "Europe/Prague";
  TimezoneRegions2["EuropeRiga"] = "Europe/Riga";
  TimezoneRegions2["EuropeRome"] = "Europe/Rome";
  TimezoneRegions2["EuropeSamara"] = "Europe/Samara";
  TimezoneRegions2["EuropeSanMarino"] = "Europe/San_Marino";
  TimezoneRegions2["EuropeSarajevo"] = "Europe/Sarajevo";
  TimezoneRegions2["EuropeSimferopol"] = "Europe/Simferopol";
  TimezoneRegions2["EuropeSkopje"] = "Europe/Skopje";
  TimezoneRegions2["EuropeSofia"] = "Europe/Sofia";
  TimezoneRegions2["EuropeStockholm"] = "Europe/Stockholm";
  TimezoneRegions2["EuropeTallinn"] = "Europe/Tallinn";
  TimezoneRegions2["EuropeTirane"] = "Europe/Tirane";
  TimezoneRegions2["EuropeUzhgorod"] = "Europe/Uzhgorod";
  TimezoneRegions2["EuropeVaduz"] = "Europe/Vaduz";
  TimezoneRegions2["EuropeVatican"] = "Europe/Vatican";
  TimezoneRegions2["EuropeVienna"] = "Europe/Vienna";
  TimezoneRegions2["EuropeVilnius"] = "Europe/Vilnius";
  TimezoneRegions2["EuropeVolgograd"] = "Europe/Volgograd";
  TimezoneRegions2["EuropeWarsaw"] = "Europe/Warsaw";
  TimezoneRegions2["EuropeZagreb"] = "Europe/Zagreb";
  TimezoneRegions2["EuropeZaporozhye"] = "Europe/Zaporozhye";
  TimezoneRegions2["EuropeZurich"] = "Europe/Zurich";
  TimezoneRegions2["GMT"] = "GMT";
  TimezoneRegions2["IndianAntananarivo"] = "Indian/Antananarivo";
  TimezoneRegions2["IndianChagos"] = "Indian/Chagos";
  TimezoneRegions2["IndianChristmas"] = "Indian/Christmas";
  TimezoneRegions2["IndianCocos"] = "Indian/Cocos";
  TimezoneRegions2["IndianComoro"] = "Indian/Comoro";
  TimezoneRegions2["IndianKerguelen"] = "Indian/Kerguelen";
  TimezoneRegions2["IndianMahe"] = "Indian/Mahe";
  TimezoneRegions2["IndianMaldives"] = "Indian/Maldives";
  TimezoneRegions2["IndianMauritius"] = "Indian/Mauritius";
  TimezoneRegions2["IndianMayotte"] = "Indian/Mayotte";
  TimezoneRegions2["IndianReunion"] = "Indian/Reunion";
  TimezoneRegions2["PacificApia"] = "Pacific/Apia";
  TimezoneRegions2["PacificAuckland"] = "Pacific/Auckland";
  TimezoneRegions2["PacificBougainville"] = "Pacific/Bougainville";
  TimezoneRegions2["PacificChatham"] = "Pacific/Chatham";
  TimezoneRegions2["PacificChuuk"] = "Pacific/Chuuk";
  TimezoneRegions2["PacificEaster"] = "Pacific/Easter";
  TimezoneRegions2["PacificEfate"] = "Pacific/Efate";
  TimezoneRegions2["PacificEnderbury"] = "Pacific/Enderbury";
  TimezoneRegions2["PacificFakaofo"] = "Pacific/Fakaofo";
  TimezoneRegions2["PacificFiji"] = "Pacific/Fiji";
  TimezoneRegions2["PacificFunafuti"] = "Pacific/Funafuti";
  TimezoneRegions2["PacificGalapagos"] = "Pacific/Galapagos";
  TimezoneRegions2["PacificGambier"] = "Pacific/Gambier";
  TimezoneRegions2["PacificGuadalcanal"] = "Pacific/Guadalcanal";
  TimezoneRegions2["PacificGuam"] = "Pacific/Guam";
  TimezoneRegions2["PacificHonolulu"] = "Pacific/Honolulu";
  TimezoneRegions2["PacificJohnston"] = "Pacific/Johnston";
  TimezoneRegions2["PacificKiritimati"] = "Pacific/Kiritimati";
  TimezoneRegions2["PacificKosrae"] = "Pacific/Kosrae";
  TimezoneRegions2["PacificKwajalein"] = "Pacific/Kwajalein";
  TimezoneRegions2["PacificMajuro"] = "Pacific/Majuro";
  TimezoneRegions2["PacificMarquesas"] = "Pacific/Marquesas";
  TimezoneRegions2["PacificMidway"] = "Pacific/Midway";
  TimezoneRegions2["PacificNauru"] = "Pacific/Nauru";
  TimezoneRegions2["PacificNiue"] = "Pacific/Niue";
  TimezoneRegions2["PacificNorfolk"] = "Pacific/Norfolk";
  TimezoneRegions2["PacificNoumea"] = "Pacific/Noumea";
  TimezoneRegions2["PacificPagoPago"] = "Pacific/Pago_Pago";
  TimezoneRegions2["PacificPalau"] = "Pacific/Palau";
  TimezoneRegions2["PacificPitcairn"] = "Pacific/Pitcairn";
  TimezoneRegions2["PacificPohnpei"] = "Pacific/Pohnpei";
  TimezoneRegions2["PacificPonape"] = "Pacific/Ponape";
  TimezoneRegions2["PacificPortMoresby"] = "Pacific/Port_Moresby";
  TimezoneRegions2["PacificRarotonga"] = "Pacific/Rarotonga";
  TimezoneRegions2["PacificSaipan"] = "Pacific/Saipan";
  TimezoneRegions2["PacificSamoa"] = "Pacific/Samoa";
  TimezoneRegions2["PacificTahiti"] = "Pacific/Tahiti";
  TimezoneRegions2["PacificTarawa"] = "Pacific/Tarawa";
  TimezoneRegions2["PacificTongatapu"] = "Pacific/Tongatapu";
  TimezoneRegions2["PacificTruk"] = "Pacific/Truk";
  TimezoneRegions2["PacificWake"] = "Pacific/Wake";
  TimezoneRegions2["PacificWallis"] = "Pacific/Wallis";
  TimezoneRegions2["PacificYap"] = "Pacific/Yap";
})(TimezoneRegions || (TimezoneRegions = {}));
var TimezoneOffset;
(function(TimezoneOffset2) {
  TimezoneOffset2["UTC_MINUS_12"] = "UTC-12";
  TimezoneOffset2["UTC_MINUS_11_30"] = "UTC-11:30";
  TimezoneOffset2["UTC_MINUS_11"] = "UTC-11";
  TimezoneOffset2["UTC_MINUS_10_30"] = "UTC-10:30";
  TimezoneOffset2["UTC_MINUS_10"] = "UTC-10";
  TimezoneOffset2["UTC_MINUS_9_30"] = "UTC-9:30";
  TimezoneOffset2["UTC_MINUS_9"] = "UTC-09";
  TimezoneOffset2["UTC_MINUS_8_45"] = "UTC-8:45";
  TimezoneOffset2["UTC_MINUS_8"] = "UTC-08";
  TimezoneOffset2["UTC_MINUS_7"] = "UTC-07";
  TimezoneOffset2["UTC_MINUS_6_30"] = "UTC-6:30";
  TimezoneOffset2["UTC_MINUS_6"] = "UTC-06";
  TimezoneOffset2["UTC_MINUS_5_45"] = "UTC-5:45";
  TimezoneOffset2["UTC_MINUS_5_30"] = "UTC-5:30";
  TimezoneOffset2["UTC_MINUS_5"] = "UTC-05";
  TimezoneOffset2["UTC_MINUS_4_30"] = "UTC-4:30";
  TimezoneOffset2["UTC_MINUS_4"] = "UTC-04";
  TimezoneOffset2["UTC_MINUS_3_30"] = "UTC-3:30";
  TimezoneOffset2["UTC_MINUS_3"] = "UTC-03";
  TimezoneOffset2["UTC_MINUS_2_30"] = "UTC-2:30";
  TimezoneOffset2["UTC_MINUS_2"] = "UTC-02";
  TimezoneOffset2["UTC_MINUS_1"] = "UTC-01";
  TimezoneOffset2["UTC_0"] = "UTC+00";
  TimezoneOffset2["UTC_PLUS_1"] = "UTC+01";
  TimezoneOffset2["UTC_PLUS_2"] = "UTC+02";
  TimezoneOffset2["UTC_PLUS_3"] = "UTC+03";
  TimezoneOffset2["UTC_PLUS_3_30"] = "UTC+3:30";
  TimezoneOffset2["UTC_PLUS_4"] = "UTC+04";
  TimezoneOffset2["UTC_PLUS_4_30"] = "UTC+4:30";
  TimezoneOffset2["UTC_PLUS_5"] = "UTC+05";
  TimezoneOffset2["UTC_PLUS_5_30"] = "UTC+5:30";
  TimezoneOffset2["UTC_PLUS_5_45"] = "UTC+5:45";
  TimezoneOffset2["UTC_PLUS_6"] = "UTC+06";
  TimezoneOffset2["UTC_PLUS_6_30"] = "UTC+6:30";
  TimezoneOffset2["UTC_PLUS_7"] = "UTC+07";
  TimezoneOffset2["UTC_PLUS_8"] = "UTC+08";
  TimezoneOffset2["UTC_PLUS_8_45"] = "UTC+8:45";
  TimezoneOffset2["UTC_PLUS_9"] = "UTC+09";
  TimezoneOffset2["UTC_PLUS_9_30"] = "UTC+9:30";
  TimezoneOffset2["UTC_PLUS_10"] = "UTC+10";
  TimezoneOffset2["UTC_PLUS_10_30"] = "UTC+10:30";
  TimezoneOffset2["UTC_PLUS_11"] = "UTC+11";
  TimezoneOffset2["UTC_PLUS_11_30"] = "UTC+11:30";
  TimezoneOffset2["UTC_PLUS_12"] = "UTC+12";
  TimezoneOffset2["UTC_PLUS_12_45"] = "UTC+12:45";
  TimezoneOffset2["UTC_PLUS_13"] = "UTC+13";
  TimezoneOffset2["UTC_PLUS_13_45"] = "UTC+13:45";
  TimezoneOffset2["UTC_PLUS_14"] = "UTC+14";
})(TimezoneOffset || (TimezoneOffset = {}));
var Timezones;
(function(Timezones2) {
  Timezones2["AcreTime"] = "ACT";
  Timezones2["AfghanistanTime"] = "AFT";
  Timezones2["AIXCentralEuropeanTime"] = "DFT";
  Timezones2["AlaskaDaylightTime"] = "AKDT";
  Timezones2["AlaskaStandardTime"] = "AKST";
  Timezones2["AlmaAtaTime"] = "ALMT";
  Timezones2["AmazonSummerTime"] = "AMST";
  Timezones2["AmazonTime"] = "AMT";
  Timezones2["AnadyrTime"] = "ANAT";
  Timezones2["AqtobeTime"] = "AQTT";
  Timezones2["ArabiaStandardTime"] = "AST";
  Timezones2["ArgentinaTime"] = "ART";
  Timezones2["ArmeniaTime"] = "AMT";
  Timezones2["ASEANCommonTime"] = "ASEAN";
  Timezones2["AtlanticDaylightTime"] = "ADT";
  Timezones2["AtlanticStandardTime"] = "AST";
  Timezones2["AustralianCentralDaylightSavingTime"] = "ACDT";
  Timezones2["AustralianCentralStandardTime"] = "ACST";
  Timezones2["AustralianCentralWesternStandardTime"] = "ACWST";
  Timezones2["AustralianEasternDaylightSavingTime"] = "AEDT";
  Timezones2["AustralianEasternStandardTime"] = "AEST";
  Timezones2["AustralianEasternTime"] = "AET";
  Timezones2["AustralianWesternStandardTime"] = "AWST";
  Timezones2["AzerbaijanTime"] = "AZT";
  Timezones2["AzoresStandardTime"] = "AZOT";
  Timezones2["AzoresSummerTime"] = "AZOST";
  Timezones2["BakerIslandTime"] = "BIT";
  Timezones2["BangladeshStandardTime"] = "BST";
  Timezones2["BhutanTime"] = "BTT";
  Timezones2["BoliviaTime"] = "BOT";
  Timezones2["BougainvilleStandardTime"] = "BST";
  Timezones2["BrasiliaSummerTime"] = "BRST";
  Timezones2["BrasiliaTime"] = "BRT";
  Timezones2["BritishIndianOceanTime"] = "BIOT";
  Timezones2["BritishSummerTime"] = "BST";
  Timezones2["BruneiTime"] = "BNT";
  Timezones2["CapeVerdeTime"] = "CVT";
  Timezones2["CentralAfricaTime"] = "CAT";
  Timezones2["CentralDaylightTime"] = "CDT";
  Timezones2["CentralEuropeanSummerTime"] = "CEST";
  Timezones2["CentralEuropeanTime"] = "CET";
  Timezones2["CentralIndonesiaTime"] = "WITA";
  Timezones2["CentralStandardTime"] = "CST";
  Timezones2["CentralTime"] = "CT";
  Timezones2["CentralWesternStandardTime"] = "CWST";
  Timezones2["ChamorroStandardTime"] = "CHST";
  Timezones2["ChathamDaylightTime"] = "CHADT";
  Timezones2["ChathamStandardTime"] = "CHAST";
  Timezones2["ChileStandardTime"] = "CLT";
  Timezones2["ChileSummerTime"] = "CLST";
  Timezones2["ChinaStandardTime"] = "CST";
  Timezones2["ChoibalsanStandardTime"] = "CHOT";
  Timezones2["ChoibalsanSummerTime"] = "CHOST";
  Timezones2["ChristmasIslandTime"] = "CXT";
  Timezones2["ChuukTime"] = "CHUT";
  Timezones2["ClipptertonIslandStandardTime"] = "CIST";
  Timezones2["CocosIslandsTime"] = "CCT";
  Timezones2["ColombiaSummerTime"] = "COST";
  Timezones2["ColombiaTime"] = "COT";
  Timezones2["CookIslandTime"] = "CKT";
  Timezones2["CoordinatedUniversalTime"] = "UTC";
  Timezones2["CubaDaylightTime"] = "CDT";
  Timezones2["CubaStandardTime"] = "CST";
  Timezones2["DavisTime"] = "DAVT";
  Timezones2["DumontDUrvilleTime"] = "DDUT";
  Timezones2["EastAfricaTime"] = "EAT";
  Timezones2["EasterIslandStandardTime"] = "EAST";
  Timezones2["EasterIslandSummerTime"] = "EASST";
  Timezones2["EasternCaribbeanTime"] = "ECT";
  Timezones2["EasternDaylightTime"] = "EDT";
  Timezones2["EasternEuropeanSummerTime"] = "EEST";
  Timezones2["EasternEuropeanTime"] = "EET";
  Timezones2["EasternGreenlandSummerTime"] = "EGST";
  Timezones2["EasternGreenlandTime"] = "EGT";
  Timezones2["EasternIndonesianTime"] = "WIT";
  Timezones2["EasternStandardTime"] = "EST";
  Timezones2["EasternTime"] = "ET";
  Timezones2["EcuadorTime"] = "ECT";
  Timezones2["FalklandIslandsSummerTime"] = "FKST";
  Timezones2["FalklandIslandsTime"] = "FKT";
  Timezones2["FernandoDeNoronhaTime"] = "FNT";
  Timezones2["FijiTime"] = "FJT";
  Timezones2["FrenchGuianaTime"] = "GFT";
  Timezones2["FrenchSouthernAndAntarcticTime"] = "TFT";
  Timezones2["FurtherEasternEuropeanTime"] = "FET";
  Timezones2["GalapagosTime"] = "GALT";
  Timezones2["GambierIslandTime"] = "GIT";
  Timezones2["GambierIslandsTime"] = "GAMT";
  Timezones2["GeorgiaStandardTime"] = "GET";
  Timezones2["GilbertIslandTime"] = "GILT";
  Timezones2["GreenwichMeanTime"] = "GMT";
  Timezones2["GulfStandardTime"] = "GST";
  Timezones2["GuyanaTime"] = "GYT";
  Timezones2["HawaiiAleutianDaylightTime"] = "HDT";
  Timezones2["HawaiiAleutianStandardTime"] = "HST";
  Timezones2["HeardAndMcDonaldIslandsTime"] = "HMT";
  Timezones2["HeureAvanceeDEuropeCentraleTime"] = "HAEC";
  Timezones2["HongKongTime"] = "HKT";
  Timezones2["HovdSummerTime"] = "HOVST";
  Timezones2["HovdTime"] = "HOVT";
  Timezones2["IndianOceanTime"] = "IOT";
  Timezones2["IndianStandardTime"] = "IST";
  Timezones2["IndochinaTime"] = "ICT";
  Timezones2["InternationalDayLineWestTime"] = "IDLW";
  Timezones2["IranDaylightTime"] = "IRDT";
  Timezones2["IranStandardTime"] = "IRST";
  Timezones2["IrishStandardTime"] = "IST";
  Timezones2["IrkutskSummerTime"] = "IRKST";
  Timezones2["IrkutskTime"] = "IRKT";
  Timezones2["IsraelDaylightTime"] = "IDT";
  Timezones2["IsraelStandardTime"] = "IST";
  Timezones2["JapanStandardTime"] = "JST";
  Timezones2["KaliningradTime"] = "KALT";
  Timezones2["KamchatkaTime"] = "KAMT";
  Timezones2["KoreaStandardTime"] = "KST";
  Timezones2["KosraeTime"] = "KOST";
  Timezones2["KrasnoyarskSummerTime"] = "KRAST";
  Timezones2["KrasnoyarskTime"] = "KRAT";
  Timezones2["KyrgyzstanTime"] = "KGT";
  Timezones2["LineIslandsTime"] = "LINT";
  Timezones2["KazakhstanStandardTime"] = "KAST";
  Timezones2["LordHoweStandardTime"] = "LHST";
  Timezones2["LordHoweSummerTime"] = "LHST";
  Timezones2["MacquarieIslandStationTime"] = "MIST";
  Timezones2["MagadanTime"] = "MAGT";
  Timezones2["MalaysiaStandardTime"] = "MST";
  Timezones2["MalaysiaTime"] = "MYT";
  Timezones2["MaldivesTime"] = "MVT";
  Timezones2["MarquesasIslandsTime"] = "MART";
  Timezones2["MarshallIslandsTime"] = "MHT";
  Timezones2["MauritiusTime"] = "MUT";
  Timezones2["MawsonStationTime"] = "MAWT";
  Timezones2["MiddleEuropeanSummerTime"] = "MEDT";
  Timezones2["MiddleEuropeanTime"] = "MET";
  Timezones2["MoscowTime"] = "MSK";
  Timezones2["MountainDaylightTime"] = "MDT";
  Timezones2["MountainStandardTime"] = "MST";
  Timezones2["MyanmarStandardTime"] = "MMT";
  Timezones2["NepalTime"] = "NCT";
  Timezones2["NauruTime"] = "NRT";
  Timezones2["NewCaledoniaTime"] = "NCT";
  Timezones2["NewZealandDaylightTime"] = "NZDT";
  Timezones2["NewZealandStandardTime"] = "NZST";
  Timezones2["NewfoundlandDaylightTime"] = "NDT";
  Timezones2["NewfoundlandStandardTime"] = "NST";
  Timezones2["NewfoundlandTime"] = "NT";
  Timezones2["NiueTime"] = "NUT";
  Timezones2["NorfolkIslandTime"] = "NFT";
  Timezones2["NovosibirskTime"] = "NOVT";
  Timezones2["OmskTime"] = "OMST";
  Timezones2["OralTime"] = "ORAT";
  Timezones2["PacificDaylightTime"] = "PDT";
  Timezones2["PacificStandardTime"] = "PST";
  Timezones2["PakistanStandardTime"] = "PKT";
  Timezones2["PalauTime"] = "PWT";
  Timezones2["PapuaNewGuineaTime"] = "PGT";
  Timezones2["ParaguaySummerTime"] = "PYST";
  Timezones2["ParaguayTime"] = "PYT";
  Timezones2["PeruTime"] = "PET";
  Timezones2["PhilippineStandardTime"] = "PHST";
  Timezones2["PhilippineTime"] = "PHT";
  Timezones2["PhoenixIslandTime"] = "PHOT";
  Timezones2["PitcairnTime"] = "PST";
  Timezones2["PohnpeiStandardTime"] = "PONT";
  Timezones2["ReunionTime"] = "RET";
  Timezones2["RotheraResearchStationTime"] = "ROTT";
  Timezones2["SaintPierreAndMiquelonDaylightTime"] = "PMDT";
  Timezones2["SaintPierreAndMiquelonStandardTime"] = "PMST";
  Timezones2["SakhalinIslandTime"] = "SAKT";
  Timezones2["SamaraTime"] = "SAMT";
  Timezones2["SamoaDaylightTime"] = "SDT";
  Timezones2["SamoaStandardTime"] = "SST";
  Timezones2["SeychellesTime"] = "SCT";
  Timezones2["ShowaStationTime"] = "SYOT";
  Timezones2["SingaporeStandardTime"] = "SST";
  Timezones2["SingaporeTime"] = "SGT";
  Timezones2["SolomonIslandsTime"] = "SBT";
  Timezones2["SouthAfricanStandardTime"] = "SAST";
  Timezones2["SouthGeorgiaAndTheSouthSandwichIslandsTime"] = "GST";
  Timezones2["SrednekolymskTime"] = "SRET";
  Timezones2["SriLankaStandardTime"] = "SLST";
  Timezones2["SurinameTime"] = "SRT";
  Timezones2["TahitiTime"] = "TAHT";
  Timezones2["TajikistanTime"] = "TJT";
  Timezones2["ThailandStandardTime"] = "THA";
  Timezones2["TimorLesteTime"] = "TLT";
  Timezones2["TokelauTime"] = "TKT";
  Timezones2["TongaTime"] = "TOT";
  Timezones2["TurkeyTime"] = "TRT";
  Timezones2["TurkmenistanTime"] = "TMT";
  Timezones2["TuvaluTime"] = "TVT";
  Timezones2["UlaanbaatarStandardTime"] = "ULAT";
  Timezones2["UlaanbaatarSummerTime"] = "ULAST";
  Timezones2["UruguayStandardTime"] = "UYT";
  Timezones2["UruguaySummerTime"] = "UYST";
  Timezones2["UzbekistanTime"] = "UZT";
  Timezones2["VanuatuTime"] = "VUT";
  Timezones2["VenezuelaStandardTime"] = "VET";
  Timezones2["VladivostokTime"] = "VLAT";
  Timezones2["VolgogradTime"] = "VOLT";
  Timezones2["VostokStationTime"] = "VOST";
  Timezones2["WakeIslandTime"] = "WAKT";
  Timezones2["WestAfricaSummerTime"] = "WAST";
  Timezones2["WestAfricaTime"] = "WAT";
  Timezones2["WestGreenlandSummerTime"] = "WGST";
  Timezones2["WestGreenlandTime"] = "WGT";
  Timezones2["WestKazakhstanTime"] = "WKT";
  Timezones2["WesternEuropeanSummerTime"] = "WEDT";
  Timezones2["WesternEuropeanTime"] = "WET";
  Timezones2["WesternIndonesianTime"] = "WIT";
  Timezones2["WesternStandardTime"] = "WST";
  Timezones2["YakutskTime"] = "YAKT";
  Timezones2["YekaterinburgTime"] = "YEKT";
})(Timezones || (Timezones = {}));
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AcreTime,
  name: "Acre Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AfghanistanTime,
  name: "Afghanistan Time",
  offset: TimezoneOffset.UTC_PLUS_4_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AIXCentralEuropeanTime,
  name: "AIX Central European Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.AlaskaDaylightTime,
  name: "Alaska Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AlaskaStandardTime,
  name: "Alaska Standard Time",
  offset: TimezoneOffset.UTC_MINUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AlmaAtaTime,
  name: "Alma-Ata Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AmazonSummerTime,
  name: "Amazon Summer Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AmazonTime,
  name: "Amazon Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AnadyrTime,
  name: "Anadyr Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AqtobeTime,
  name: "Aqtobe Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ArabiaStandardTime,
  name: "Arabia Standard Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ArgentinaTime,
  name: "Argentina Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ArmeniaTime,
  name: "Armenia Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.AtlanticDaylightTime,
  name: "Atlantic Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AtlanticStandardTime,
  name: "Atlantic Standard Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.AustralianCentralDaylightSavingTime,
  name: "Australian Central Daylight Saving Time",
  offset: TimezoneOffset.UTC_PLUS_10_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AustralianCentralStandardTime,
  name: "Australian Central Standard Time",
  offset: TimezoneOffset.UTC_PLUS_9_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AustralianCentralWesternStandardTime,
  name: "Australian Central Western Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8_45
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.AustralianEasternDaylightSavingTime,
  name: "Australian Eastern Daylight Saving Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AustralianEasternStandardTime,
  name: "Australian Eastern Standard Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AustralianEasternTime,
  name: "Australian Eastern Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AustralianWesternStandardTime,
  name: "Australian Western Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AzerbaijanTime,
  name: "Azerbaijan Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.AzoresStandardTime,
  name: "Azores Standard Time",
  offset: TimezoneOffset.UTC_MINUS_1
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.AzoresSummerTime,
  name: "Azores Summer Time",
  offset: TimezoneOffset.UTC_0
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BakerIslandTime,
  name: "Baker Island Time",
  offset: TimezoneOffset.UTC_MINUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BangladeshStandardTime,
  name: "Bangladesh Standard Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BhutanTime,
  name: "Bhutan Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BoliviaTime,
  name: "Bolivia Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BougainvilleStandardTime,
  name: "Bougainville Standard Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.BrasiliaSummerTime,
  name: "Brasilia Summer Time",
  offset: TimezoneOffset.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BrasiliaTime,
  name: "Brasilia Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BritishIndianOceanTime,
  name: "British Indian Ocean Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.BritishSummerTime,
  name: "British Summer Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.BruneiTime,
  name: "Brunei Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CapeVerdeTime,
  name: "Cape Verde Time",
  offset: TimezoneOffset.UTC_MINUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CentralAfricaTime,
  name: "Central Africa Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.CentralDaylightTime,
  name: "Central Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.CentralEuropeanSummerTime,
  name: "Central European Summer Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CentralEuropeanTime,
  name: "Central European Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CentralIndonesiaTime,
  name: "Central Indonesia Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CentralStandardTime,
  name: "Central Standard Time",
  offset: TimezoneOffset.UTC_MINUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CentralTime,
  name: "Central Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CentralWesternStandardTime,
  name: "Central Western Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8_45
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChamorroStandardTime,
  name: "Chamorro Standard Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.ChathamDaylightTime,
  name: "Chatham Daylight Time",
  offset: TimezoneOffset.UTC_PLUS_13_45
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChathamStandardTime,
  name: "Chatham Standard Time",
  offset: TimezoneOffset.UTC_PLUS_12_45
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChileStandardTime,
  name: "Chile Standard Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.ChileSummerTime,
  name: "Chile Summer Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChinaStandardTime,
  name: "China Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChoibalsanStandardTime,
  name: "Choibalsan Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.ChoibalsanSummerTime,
  name: "Choibalsan Summer Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChristmasIslandTime,
  name: "Christmas Island Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ChuukTime,
  name: "Chuuk Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ClipptertonIslandStandardTime,
  name: "Clippterton Island Standard Time",
  offset: TimezoneOffset.UTC_MINUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CocosIslandsTime,
  name: "Cocos Standard Time",
  offset: TimezoneOffset.UTC_PLUS_6_30
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.ColombiaSummerTime,
  name: "Colombia Summer Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ColombiaTime,
  name: "Colombia Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CookIslandTime,
  name: "Cook Island Time",
  offset: TimezoneOffset.UTC_MINUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CoordinatedUniversalTime,
  name: "Coordinated Universal Time",
  offset: TimezoneOffset.UTC_0
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.CubaDaylightTime,
  name: "Cuba Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.CubaStandardTime,
  name: "Cuba Standard Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.DavisTime,
  name: "Davis Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.DumontDUrvilleTime,
  name: "Dumont D'Urville Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EastAfricaTime,
  name: "East Africa Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasterIslandStandardTime,
  name: "Easter Island Standard Time",
  offset: TimezoneOffset.UTC_MINUS_6
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.EasterIslandSummerTime,
  name: "Easter Island Summer Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasternCaribbeanTime,
  name: "Eastern Caribbean Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.EasternDaylightTime,
  name: "Eastern Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.EasternEuropeanSummerTime,
  name: "Eastern European Summer Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasternEuropeanTime,
  name: "Eastern European Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.EasternGreenlandSummerTime,
  name: "Eastern Greenland Summer Time",
  offset: TimezoneOffset.UTC_0
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasternGreenlandTime,
  name: "Eastern Greenland Time",
  offset: TimezoneOffset.UTC_MINUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasternIndonesianTime,
  name: "Eastern Indonesian Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasternStandardTime,
  name: "Eastern Standard Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EasternTime,
  name: "Eastern Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.EcuadorTime,
  name: "Ecuador Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.FalklandIslandsSummerTime,
  name: "Falkland Islands Summer Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.FalklandIslandsTime,
  name: "Falkland Islands Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.FernandoDeNoronhaTime,
  name: "Fernando de Noronha Time",
  offset: TimezoneOffset.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.FijiTime,
  name: "Fiji Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.FrenchGuianaTime,
  name: "French Guiana Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.FrenchSouthernAndAntarcticTime,
  name: "French Southern and Antarctic Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.FurtherEasternEuropeanTime,
  name: "Further Eastern European Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GalapagosTime,
  name: "Galapagos Time",
  offset: TimezoneOffset.UTC_MINUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GambierIslandTime,
  name: "Gambier Island Time",
  offset: TimezoneOffset.UTC_MINUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GambierIslandsTime,
  name: "Gambier Islands Time",
  offset: TimezoneOffset.UTC_MINUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GeorgiaStandardTime,
  name: "Georgia Standard Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GilbertIslandTime,
  name: "Gilbert Island Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GreenwichMeanTime,
  name: "Greenwich Mean Time",
  offset: TimezoneOffset.UTC_0
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GulfStandardTime,
  name: "Gulf Standard Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.GuyanaTime,
  name: "Guyana Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.HawaiiAleutianDaylightTime,
  name: "Hawaii-Aleutian Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.HawaiiAleutianStandardTime,
  name: "Hawaii-Aleutian Standard Time",
  offset: TimezoneOffset.UTC_MINUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.HeardAndMcDonaldIslandsTime,
  name: "Heard and McDonald Islands Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.HongKongTime,
  name: "Hong Kong Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.HovdSummerTime,
  name: "Hovd Summer Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.HovdTime,
  name: "Hovd Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IndianOceanTime,
  name: "Indian Ocean Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IndianStandardTime,
  name: "Indian Standard Time",
  offset: TimezoneOffset.UTC_PLUS_5_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IndochinaTime,
  name: "Indochina Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.InternationalDayLineWestTime,
  name: "International Day Line West Time",
  offset: TimezoneOffset.UTC_MINUS_12
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.IranDaylightTime,
  name: "Iran Daylight Time",
  offset: TimezoneOffset.UTC_PLUS_4_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IranStandardTime,
  name: "Iran Standard Time",
  offset: TimezoneOffset.UTC_PLUS_3_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IrishStandardTime,
  name: "Irish Standard Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IrkutskTime,
  name: "Irkutsk Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: true,
    uses: true
  },
  id: Timezones.IsraelDaylightTime,
  name: "Israel Daylight Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.IsraelStandardTime,
  name: "Israel Standard Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.JapanStandardTime,
  name: "Japan Standard Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.KaliningradTime,
  name: "Kaliningrad Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.KamchatkaTime,
  name: "Kamchatka Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.KoreaStandardTime,
  name: "Korea Standard Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.KosraeTime,
  name: "Kosrae Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.KrasnoyarskTime,
  name: "Krasnoyarsk Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.KyrgyzstanTime,
  name: "Kyrgyzstan Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.LineIslandsTime,
  name: "Line Islands Time",
  offset: TimezoneOffset.UTC_PLUS_14
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.LordHoweStandardTime,
  name: "Lord Howe Standard Time",
  offset: TimezoneOffset.UTC_PLUS_10_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.LordHoweSummerTime,
  name: "Lord Howe Summer Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MacquarieIslandStationTime,
  name: "Macquarie Island Station Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MagadanTime,
  name: "Magadan Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MalaysiaStandardTime,
  name: "Malaysia Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MalaysiaTime,
  name: "Malaysia Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MaldivesTime,
  name: "Maldives Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MarquesasIslandsTime,
  name: "Marquesas Islands Time",
  offset: TimezoneOffset.UTC_PLUS_9_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MarshallIslandsTime,
  name: "Marshall Islands Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MauritiusTime,
  name: "Mauritius Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MawsonStationTime,
  name: "Mawson Station Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MiddleEuropeanSummerTime,
  name: "Middle European Summer Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MiddleEuropeanTime,
  name: "Middle European Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MoscowTime,
  name: "Moscow Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MountainDaylightTime,
  name: "Mountain Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MountainStandardTime,
  name: "Mountain Standard Time",
  offset: TimezoneOffset.UTC_MINUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.MyanmarStandardTime,
  name: "Myanmar Standard Time",
  offset: TimezoneOffset.UTC_PLUS_6_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NepalTime,
  name: "Nepal Time",
  offset: TimezoneOffset.UTC_PLUS_5_45
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NauruTime,
  name: "Nauru Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NewCaledoniaTime,
  name: "New Caledonia Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NewZealandDaylightTime,
  name: "New Zealand Daylight Time",
  offset: TimezoneOffset.UTC_PLUS_13
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NewZealandStandardTime,
  name: "New Zealand Standard Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NewfoundlandDaylightTime,
  name: "Newfoundland Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_2_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NewfoundlandTime,
  name: "Newfoundland Time",
  offset: TimezoneOffset.UTC_MINUS_3_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NiueTime,
  name: "Niue Time",
  offset: TimezoneOffset.UTC_MINUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NorfolkIslandTime,
  name: "Norfolk Island Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.NovosibirskTime,
  name: "Novosibirsk Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.OmskTime,
  name: "Omsk Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.OralTime,
  name: "Oral Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PacificDaylightTime,
  name: "Pacific Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PacificStandardTime,
  name: "Pacific Standard Time",
  offset: TimezoneOffset.UTC_MINUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PakistanStandardTime,
  name: "Pakistan Standard Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PalauTime,
  name: "Palau Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PapuaNewGuineaTime,
  name: "Papua New Guinea Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ParaguaySummerTime,
  name: "Paraguay Summer Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ParaguayTime,
  name: "Paraguay Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PeruTime,
  name: "Peru Time",
  offset: TimezoneOffset.UTC_MINUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PhilippineStandardTime,
  name: "Philippine Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PhilippineTime,
  name: "Philippine Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PhoenixIslandTime,
  name: "Phoenix Island Time",
  offset: TimezoneOffset.UTC_PLUS_13
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PitcairnTime,
  name: "Pitcairn Time",
  offset: TimezoneOffset.UTC_MINUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.PohnpeiStandardTime,
  name: "Pohnpei Standard Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ReunionTime,
  name: "Reunion Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.RotheraResearchStationTime,
  name: "Rothera Research Station Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SaintPierreAndMiquelonDaylightTime,
  name: "Saint Pierre and Miquelon Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SaintPierreAndMiquelonStandardTime,
  name: "Saint Pierre and Miquelon Standard Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SakhalinIslandTime,
  name: "Sakhalin Island Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SamaraTime,
  name: "Samara Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SamoaDaylightTime,
  name: "Samoa Daylight Time",
  offset: TimezoneOffset.UTC_MINUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SamoaStandardTime,
  name: "Samoa Standard Time",
  offset: TimezoneOffset.UTC_MINUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SeychellesTime,
  name: "Seychelles Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ShowaStationTime,
  name: "Showa Station Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SingaporeStandardTime,
  name: "Singapore Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SingaporeTime,
  name: "Singapore Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SolomonIslandsTime,
  name: "Solomon Islands Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SouthAfricanStandardTime,
  name: "South African Standard Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SouthGeorgiaAndTheSouthSandwichIslandsTime,
  name: "South Georgia and the South Sandwich Islands Time",
  offset: TimezoneOffset.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SrednekolymskTime,
  name: "Srednekolymsk Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SriLankaStandardTime,
  name: "Sri Lanka Standard Time",
  offset: TimezoneOffset.UTC_PLUS_5_30
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.SurinameTime,
  name: "Suriname Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TahitiTime,
  name: "Tahiti Time",
  offset: TimezoneOffset.UTC_MINUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TajikistanTime,
  name: "Tajikistan Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.ThailandStandardTime,
  name: "Thailand Standard Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TimorLesteTime,
  name: "Timor-Leste Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TokelauTime,
  name: "Tokelau Time",
  offset: TimezoneOffset.UTC_PLUS_13
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TongaTime,
  name: "Tonga Time",
  offset: TimezoneOffset.UTC_PLUS_13
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TurkeyTime,
  name: "Turkey Time",
  offset: TimezoneOffset.UTC_PLUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TurkmenistanTime,
  name: "Turkmenistan Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.TuvaluTime,
  name: "Tuvalu Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.UlaanbaatarStandardTime,
  name: "Ulaanbaatar Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.UlaanbaatarSummerTime,
  name: "Ulaanbaatar Summer Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.UruguayStandardTime,
  name: "Uruguay Standard Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.UruguaySummerTime,
  name: "Uruguay Summer Time",
  offset: TimezoneOffset.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.UzbekistanTime,
  name: "Uzbekistan Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.VanuatuTime,
  name: "Vanuatu Time",
  offset: TimezoneOffset.UTC_PLUS_11
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.VenezuelaStandardTime,
  name: "Venezuela Standard Time",
  offset: TimezoneOffset.UTC_MINUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.VladivostokTime,
  name: "Vladivostok Time",
  offset: TimezoneOffset.UTC_PLUS_10
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.VolgogradTime,
  name: "Volgograd Time",
  offset: TimezoneOffset.UTC_PLUS_4
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.VostokStationTime,
  name: "Vostok Station Time",
  offset: TimezoneOffset.UTC_PLUS_6
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WakeIslandTime,
  name: "Wake Island Time",
  offset: TimezoneOffset.UTC_PLUS_12
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WestAfricaSummerTime,
  name: "West Africa Summer Time",
  offset: TimezoneOffset.UTC_PLUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WestAfricaTime,
  name: "West Africa Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WestGreenlandSummerTime,
  name: "West Greenland Summer Time",
  offset: TimezoneOffset.UTC_MINUS_2
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WestGreenlandTime,
  name: "West Greenland Time",
  offset: TimezoneOffset.UTC_MINUS_3
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WestKazakhstanTime,
  name: "West Kazakhstan Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WesternEuropeanSummerTime,
  name: "Western European Summer Time",
  offset: TimezoneOffset.UTC_PLUS_1
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WesternEuropeanTime,
  name: "Western European Time",
  offset: TimezoneOffset.UTC_0
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WesternIndonesianTime,
  name: "Western Indonesian Time",
  offset: TimezoneOffset.UTC_PLUS_7
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.WesternStandardTime,
  name: "Western Standard Time",
  offset: TimezoneOffset.UTC_PLUS_8
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.YakutskTime,
  name: "Yakutsk Time",
  offset: TimezoneOffset.UTC_PLUS_9
});
({
  dst: {
    is: false,
    uses: true
  },
  id: Timezones.YekaterinburgTime,
  name: "Yekaterinburg Time",
  offset: TimezoneOffset.UTC_PLUS_5
});
var Region;
(function(Region2) {
  Region2["Africa"] = "Africa";
  Region2["Americas"] = "Americas";
  Region2["Asia"] = "Asia";
  Region2["Europe"] = "Europe";
  Region2["Oceania"] = "Oceania";
  Region2["Polar"] = "Polar";
})(Region || (Region = {}));
var SubRegion;
(function(SubRegion2) {
  SubRegion2["CentralAmerica"] = "Central America";
  SubRegion2["EasternAsia"] = "Eastern Asia";
  SubRegion2["EasternEurope"] = "Eastern Europe";
  SubRegion2["EasternAfrica"] = "Eastern Africa";
  SubRegion2["MiddleAfrica"] = "Middle Africa";
  SubRegion2["MiddleEast"] = "Middle East";
  SubRegion2["NorthernAfrica"] = "Northern Africa";
  SubRegion2["NorthernAmerica"] = "Northern America";
  SubRegion2["NorthernEurope"] = "Northern Europe";
  SubRegion2["Polynesia"] = "Polynesia";
  SubRegion2["SouthAmerica"] = "South America";
  SubRegion2["SouthernAfrica"] = "Southern Africa";
  SubRegion2["SouthernAsia"] = "Southern Asia";
  SubRegion2["SouthernEurope"] = "Southern Europe";
  SubRegion2["WesternAfrica"] = "Western Africa";
  SubRegion2["WesternAsia"] = "Western Asia";
  SubRegion2["WesternEurope"] = "Western Europe";
  SubRegion2["WesternAustralia"] = "Western Australia";
})(SubRegion || (SubRegion = {}));
({
  Afghanistan: {
    i18n: {
      calling_codes: [93],
      currencies: [CurrencyCode.AfghanistanAfghani],
      languages: [
        LocaleCode.Pashto,
        LocaleCode.Dari,
        LocaleCode.Turkmen,
        LocaleCode.Uzbek
      ],
      tz: {
        offsets: [TimezoneOffset.UTC_PLUS_4_30],
        regions: [TimezoneRegions.AsiaKabul],
        timezones: [Timezones.AfghanistanTime]
      }
    },
    id: CountryCode.Afghanistan,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1EB}",
        emoji_unicode: "U+1F1E6 U+1F1EB",
        svg: "https://www.countryflags.io/af/flat/64.svg"
      },
      tld: [".af"]
    },
    iso: {
      alpha2: CountryCode.Afghanistan,
      alpha3: "AFG",
      numeric: "004"
    },
    name: {
      alt_spellings: ["AF", "Af\u0121\u0101nist\u0101n"],
      demonym: "Afghan",
      native: {
        endonym: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
      },
      official: "Islamic Republic of Afghanistan",
      short: "Afghanistan",
      translations: {
        [LocaleCode.Afrikaans]: "Afghanistan",
        [LocaleCode.Albanian]: "Shqip\xEBri",
        [LocaleCode.Amharic]: "\u12A0\u134D\u130B\u1295",
        [LocaleCode.Arabic]: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576",
        [LocaleCode.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode.Bashkir]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Basque]: "Afganist\xE1n",
        [LocaleCode.Belarusian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Bengali]: "\u0986\u09AB\u0997\u09BE\u09A8\u09BF\u09B8\u09CD\u09A4\u09BE\u09A8",
        [LocaleCode.Berber]: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F51\u0F7C\u0F53\u0F0B\u0F63\u0F7A\u0F0B\u0F66\u0F90\u0F51\u0F0B\u0F46\u0F0D",
        [LocaleCode.Bosnian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Breton]: "Afganistan",
        [LocaleCode.Bulgarian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Burmese]: "\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A",
        [LocaleCode.Catalan]: "Afganistan",
        [LocaleCode.Chinese]: "\u963F\u5BCC\u6C57",
        [LocaleCode.Croatian]: "Afganistan",
        [LocaleCode.Czech]: "Afganistan",
        [LocaleCode.Danish]: "Afghanistan",
        [LocaleCode.Dutch]: "Afghanistan",
        [LocaleCode.English]: "Afghanistan",
        [LocaleCode.Esperanto]: "Afganistan",
        [LocaleCode.Estonian]: "Afganistan",
        [LocaleCode.Finnish]: "Afghanistan",
        [LocaleCode.French]: "Afghanistan",
        [LocaleCode.Frisian]: "Afghanistan",
        [LocaleCode.Galician]: "Afganist\xE1n",
        [LocaleCode.Georgian]: "\u10D0\u10D5\u10E6\u10D0\u10DC\u10D4\u10D7\u10D8",
        [LocaleCode.German]: "Afghanistan",
        [LocaleCode.Greenlandic]: "Afghanistan",
        [LocaleCode.Greek]: "\u0391\u03C6\u03B3\u03B1\u03BD\u03B9\u03C3\u03C4\u03AC\u03BD",
        [LocaleCode.Gujarati]: "\u0A85\u0AAB\u0A97\u0ABE\u0AA8\u0ABF\u0AB8\u0ACD\u0AA4\u0ABE\u0AA8",
        [LocaleCode.Haitian]: "Afghanistan",
        [LocaleCode.Hausa]: "Afghanistan",
        [LocaleCode.Hebrew]: "\u05D0\u05E4\u05D2\u05E0\u05D9\u05E1\u05D8\u05DF",
        [LocaleCode.Hindi]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928",
        [LocaleCode.Hungarian]: "Afganistan",
        [LocaleCode.Icelandic]: "Afghanistan",
        [LocaleCode.Igbo]: "Afghanistan",
        [LocaleCode.Indonesian]: "Afghanistan",
        [LocaleCode.Irish]: "Afghanistan",
        [LocaleCode.Italian]: "Afghanistan",
        [LocaleCode.Japanese]: "\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3",
        [LocaleCode.Javanese]: "Afghanistan",
        [LocaleCode.Kannada]: "\u0C85\u0CAB\u0C97\u0CBE\u0CA8\u0CBF\u0CB8\u0CCD\u0CA4\u0CBE\u0CA8",
        [LocaleCode.Kazakh]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Khmer]: "\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17B7\u1780",
        [LocaleCode.Korean]: "\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4",
        [LocaleCode.Kurdish]: "Afghanistan",
        [LocaleCode.Kyrgyz]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Lao]: "\u0EAD\u0EB2\u0E9F\u0EB2\u0EA5\u0EBD\u0E99",
        [LocaleCode.Latin]: "Afghanistan",
        [LocaleCode.Latvian]: "Afghanistan",
        [LocaleCode.Lithuanian]: "Afganistanas",
        [LocaleCode.Luxembourgish]: "Afghanistan",
        [LocaleCode.Macedonian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Malagasy]: "Afghanistan",
        [LocaleCode.Malay]: "Afghanistan",
        [LocaleCode.Malayalam]: "\u0D05\u0D2B\u0D17\u0D3E\u0D28\u0D3F\u0D38\u0D4D\u0D24\u0D3E\u0D28",
        [LocaleCode.Maltese]: "Afghanistan",
        [LocaleCode.Maori]: "Afghanistan",
        [LocaleCode.Marathi]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928",
        [LocaleCode.Mongolian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Nepali]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928",
        [LocaleCode.Norwegian]: "Afghanistan",
        [LocaleCode.Pashto]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Persian]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Polish]: "Afganistan",
        [LocaleCode.Portuguese]: "Afghanistan",
        [LocaleCode.Punjabi]: "Afghanistan",
        [LocaleCode.Romanian]: "Afghanistan",
        [LocaleCode.Polish]: "Afganistan",
        [LocaleCode.Russian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Samoan]: "Afghanistan",
        [LocaleCode.Sanskrit]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928",
        [LocaleCode.Scots]: "Afghanistan",
        [LocaleCode.Serbian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Sesotho]: "Afghanistan",
        [LocaleCode.Shona]: "Afghanistan",
        [LocaleCode.Sindhi]: "Afghanistan",
        [LocaleCode.Sinhala]: "\u0D86\u0D9C\u0DCA\u200D\u0DBB\u0DDC\u0D9A\u0DCA\u0D9A\u0DD2\u0DBA\u0DCF\u0DC0",
        [LocaleCode.Slovak]: "Afganistan",
        [LocaleCode.Slovenian]: "Afganistan",
        [LocaleCode.Somali]: "Afghanistan",
        [LocaleCode.Spanish]: "Afganist\xE1n",
        [LocaleCode.Sudanese]: "Afghanistan",
        [LocaleCode.Swahili]: "Afghanistan",
        [LocaleCode.Swedish]: "Afghanistan",
        [LocaleCode.Tagalog]: "Afghanistan",
        [LocaleCode.Tajik]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Tatar]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Tamil]: "\u0B86\u0BAA\u0BCD\u0BAA\u0B95\u0BBE\u0BA9\u0BBF\u0BB8\u0BCD\u0BA4\u0BBE\u0BA9\u0BCD",
        [LocaleCode.Telugu]: "\u0C06\u0C2B\u0C4D\u0C18\u0C28\u0C3F\u0C38\u0C4D\u0C24\u0C3E\u0C28\u0C4D",
        [LocaleCode.Thai]: "\u0E2D\u0E31\u0E1F\u0E01\u0E32\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19",
        [LocaleCode.Tibetan]: "\u0F68\u0F55\u0F0B\u0F42\u0F7A\u0F0B\u0F53\u0F72\u0F66\u0F72\u0F0B\u0F4F\u0F7A\u0F53\u0F66\u0F72\u0F0D",
        [LocaleCode.Turkish]: "Afganistan",
        [LocaleCode.Ukrainian]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Urdu]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Uzbek]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
        [LocaleCode.Vietnamese]: "Afghanistan",
        [LocaleCode.Welsh]: "Afghanistan",
        [LocaleCode.Xhosa]: "Afghanistan",
        [LocaleCode.Yiddish]: "Afghanistan",
        [LocaleCode.Yoruba]: "Afghanistan",
        [LocaleCode.Zulu]: "Afghanistan"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Kabul",
          total: 341e5
        }
      },
      geography: {
        area: 652230,
        region: Region.Asia,
        sub_region: SubRegion.SouthernAsia
      },
      government: {
        capital: "Kabul",
        type: "Islamic Emirate"
      }
    }
  },
  Albania: {
    i18n: {
      calling_codes: [355],
      currencies: [CurrencyCode.AlbaniaLek],
      languages: [LocaleCode.Albanian, LocaleCode.Greek, LocaleCode.Turkish],
      tz: {
        offsets: [TimezoneOffset.UTC_PLUS_1],
        regions: [TimezoneRegions.EuropeBrussels],
        timezones: [Timezones.CentralEuropeanTime]
      }
    },
    id: CountryCode.Albania,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F1}",
        emoji_unicode: "U+1F1E6 U+1F1F1",
        svg: "https://www.countryflags.io/al/flat/64.svg"
      },
      tld: [".al"]
    },
    iso: {
      alpha2: CountryCode.Albania,
      alpha3: "ALB",
      numeric: "008"
    },
    name: {
      alt_spellings: ["AL", "Shqip\xEBri", "Shqip\xEBria", "Shqipnia"],
      demonym: "Albanian",
      native: {
        endonym: "Shqip\xEBri"
      },
      official: "Republic of Albania",
      short: "Albania",
      translations: {
        [LocaleCode.Afrikaans]: "Albania",
        [LocaleCode.Albanian]: "Albania",
        [LocaleCode.Amharic]: "\u12A0\u120D\u1263\u1295\u12EB",
        [LocaleCode.Arabic]: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627",
        [LocaleCode.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576",
        [LocaleCode.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode.Bashkir]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Basque]: "Albania",
        [LocaleCode.Belarusian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Bengali]: "\u0986\u09B2\u09AC\u09BE\u09A8\u09BF\u09AF\u09BC\u09BE",
        [LocaleCode.Berber]: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627",
        [LocaleCode.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B",
        [LocaleCode.Bosnian]: "Albanija",
        [LocaleCode.Breton]: "Albania",
        [LocaleCode.Bulgarian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Burmese]: "\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A",
        [LocaleCode.Catalan]: "Alb\xE0nia",
        [LocaleCode.Chinese]: "\u963F\u5C14\u5DF4\u5C3C\u4E9A",
        [LocaleCode.Croatian]: "Albanija",
        [LocaleCode.Czech]: "Alb\xE1nie",
        [LocaleCode.Danish]: "Albanien",
        [LocaleCode.Dutch]: "Albani\xEB",
        [LocaleCode.English]: "Albania",
        [LocaleCode.Esperanto]: "Albanio",
        [LocaleCode.Estonian]: "Albaania",
        [LocaleCode.Finnish]: "Albania",
        [LocaleCode.French]: "Albanie",
        [LocaleCode.Frisian]: "Albani\xEB",
        [LocaleCode.Galician]: "Alb\xE2nia",
        [LocaleCode.Georgian]: "\u10D0\u10DA\u10D1\u10D0\u10DC\u10D8\u10D0",
        [LocaleCode.German]: "Albanien",
        [LocaleCode.Greenlandic]: "Albania",
        [LocaleCode.Greek]: "\u0391\u03BB\u03B2\u03B1\u03BD\u03AF\u03B1",
        [LocaleCode.Gujarati]: "\u0A85\u0AB2\u0AAC\u0AA8\u0ABF\u0AAF\u0ABE",
        [LocaleCode.Haitian]: "Albanais",
        [LocaleCode.Hausa]: "Albania",
        [LocaleCode.Hebrew]: "\u05D0\u05DC\u05D1\u05E0\u05D9\u05D4",
        [LocaleCode.Hindi]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E",
        [LocaleCode.Hungarian]: "Alb\xE1nia",
        [LocaleCode.Icelandic]: "Alb\xFAnir",
        [LocaleCode.Igbo]: "Albania",
        [LocaleCode.Indonesian]: "Albania",
        [LocaleCode.Irish]: "Alb\xE1in",
        [LocaleCode.Italian]: "Albania",
        [LocaleCode.Japanese]: "\u30A2\u30EB\u30D0\u30CB\u30A2",
        [LocaleCode.Javanese]: "Albania",
        [LocaleCode.Kannada]: "\u0C85\u0CB2\u0CCD\u0CAC\u0CBE\u0CA8\u0CBF\u0CAF\u0CBE",
        [LocaleCode.Kazakh]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Khmer]: "\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17C1\u179F\u17CA\u17B8",
        [LocaleCode.Korean]: "\uC54C\uBC14\uB2C8\uC544",
        [LocaleCode.Kurdish]: "\u0622\u0644\u0628\u0627\u0646\u06CC\u0627",
        [LocaleCode.Kyrgyz]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Lao]: "\u0EAD\u0EB2\u0EA5\u0EB2\u0E99\u0EB5",
        [LocaleCode.Latin]: "Albania",
        [LocaleCode.Latvian]: "Alb\u0101nija",
        [LocaleCode.Lithuanian]: "Albanija",
        [LocaleCode.Luxembourgish]: "Albani\xEB",
        [LocaleCode.Macedonian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430",
        [LocaleCode.Malagasy]: "Albania",
        [LocaleCode.Malay]: "Albania",
        [LocaleCode.Malayalam]: "\u0D05\u0D32\u0D4D\u0D2C\u0D3E\u0D28\u0D3F\u0D2F\u0D3E",
        [LocaleCode.Maltese]: "Albania",
        [LocaleCode.Maori]: "Albania",
        [LocaleCode.Marathi]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E",
        [LocaleCode.Mongolian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Nepali]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E",
        [LocaleCode.Norwegian]: "Albania",
        [LocaleCode.Pashto]: "\u0627\u0627\u0644\u0628\u0627\u0646\u06CC",
        [LocaleCode.Persian]: "\u0622\u0644\u0628\u0627\u0646\u06CC",
        [LocaleCode.Polish]: "Albania",
        [LocaleCode.Portuguese]: "Alb\xE2nia",
        [LocaleCode.Punjabi]: "\u0A05\u0A32\u0A2C\u0A28\u0A40\u0A06",
        [LocaleCode.Romanian]: "Alb\u0103n",
        [LocaleCode.Russian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Samoan]: "Albania",
        [LocaleCode.Sanskrit]: "Albani",
        [LocaleCode.Scots]: "Alb\xE0inia",
        [LocaleCode.Serbian]: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430",
        [LocaleCode.Sesotho]: "Albania",
        [LocaleCode.Shona]: "Albania",
        [LocaleCode.Sindhi]: "Albania",
        [LocaleCode.Sinhala]: "\u0D87\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA",
        [LocaleCode.Slovak]: "Alb\xE1nsko",
        [LocaleCode.Slovenian]: "Albanija",
        [LocaleCode.Somali]: "Albania",
        [LocaleCode.Spanish]: "Albania",
        [LocaleCode.Sudanese]: "Albania",
        [LocaleCode.Swahili]: "Albania",
        [LocaleCode.Swedish]: "Albanien",
        [LocaleCode.Tagalog]: "Albania",
        [LocaleCode.Tajik]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Tamil]: "\u0B85\u0BB2\u0BCD\u0BAA\u0BBE\u0BA9\u0BBF\u0BAF\u0BBE",
        [LocaleCode.Tatar]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Telugu]: "\u0C05\u0C32\u0C4D\u0C2C\u0C3E\u0C28\u0C3F\u0C2F\u0C3E",
        [LocaleCode.Thai]: "\u0E2D\u0E31\u0E25\u0E41\u0E1A\u0E19\u0E34\u0E19\u0E35",
        [LocaleCode.Tibetan]: "\u0F68\u0F63\u0F0B\u0F56\u0F72\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F72",
        [LocaleCode.Turkish]: "Albaniye",
        [LocaleCode.Ukrainian]: "\u0410\u043B\u0431\u0430\u043D\u0456\u044F",
        [LocaleCode.Urdu]: "\u0622\u0644\u0628\u0627\u0646\u06CC",
        [LocaleCode.Uzbek]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
        [LocaleCode.Vietnamese]: "Albanie",
        [LocaleCode.Welsh]: "Albania",
        [LocaleCode.Xhosa]: "Albania",
        [LocaleCode.Yiddish]: "\u05D0\u05DC\u05D1\u05E0\u05D9\u05E9",
        [LocaleCode.Yoruba]: "Albania",
        [LocaleCode.Zulu]: "Albania"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Tirana",
          total: 2853e3
        }
      },
      geography: {
        area: 28748,
        region: Region.Europe,
        sub_region: SubRegion.SouthernEurope
      },
      government: {
        capital: "Tirana",
        type: "Republic"
      }
    }
  },
  Algeria: {
    i18n: {
      calling_codes: [213],
      currencies: [CurrencyCode.AlgeriaDinar],
      languages: [
        LocaleCode.Arabic,
        LocaleCode.French,
        LocaleCode.Berber,
        LocaleCode.Tamazight
      ],
      tz: {
        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],
        regions: [TimezoneRegions.AfricaAlgiers],
        timezones: [Timezones.CentralEuropeanTime]
      }
    },
    id: CountryCode.Algeria,
    info: {
      flag: {
        emoji: "\u{1F1E9}\u{1F1FF}",
        emoji_unicode: "U+1F1E9 U+1F1FF",
        svg: "https://www.countryflags.io/dz/flat/64.svg"
      },
      tld: [".dz", ".\u062C\u0632\u0627\u0626\u0631"]
    },
    iso: {
      alpha2: CountryCode.Algeria,
      alpha3: "DZA",
      numeric: "012"
    },
    name: {
      alt_spellings: ["DZ", "Dzayer", "Alg\xE9rie"],
      demonym: "Algerian",
      native: {
        endonym: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631"
      },
      official: "People's Democratic Republic of Algeria",
      short: "Algeria",
      translations: {
        [LocaleCode.Afrikaans]: "Algerije",
        [LocaleCode.Albanian]: "Algeria",
        [LocaleCode.Amharic]: "\u12A0\u120D\u1300\u122D\u1235",
        [LocaleCode.Arabic]: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631",
        [LocaleCode.Armenian]: "\u0531\u056C\u0563\u0578\u0580\u056B\u0561",
        [LocaleCode.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode.Bashkir]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Basque]: "Algeria",
        [LocaleCode.Belarusian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Bengali]: "\u0986\u09B2\u099C\u09C7\u09B0",
        [LocaleCode.Berber]: "\u062C\u0632\u0627\u0626\u0631",
        [LocaleCode.Bhutani]: "\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41",
        [LocaleCode.Bosnian]: "Al\u017Eir",
        [LocaleCode.Breton]: "Algeria",
        [LocaleCode.Bulgarian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Burmese]: "\u1021\u102C\u101B\u1015\u103A",
        [LocaleCode.Catalan]: "Alg\xE8ria",
        [LocaleCode.Chinese]: "\u963F\u5C14\u53CA\u5229\u4E9A",
        [LocaleCode.Croatian]: "Al\u017Eir",
        [LocaleCode.Czech]: "Al\u017E\xEDrsko",
        [LocaleCode.Danish]: "Algeriet",
        [LocaleCode.Dutch]: "Algerije",
        [LocaleCode.English]: "Algeria",
        [LocaleCode.Esperanto]: "Al\u011Derio",
        [LocaleCode.Estonian]: "Al\u017Eira",
        [LocaleCode.Finnish]: "Algeria",
        [LocaleCode.French]: "Alg\xE9rie",
        [LocaleCode.Frisian]: "Algeri\xEB",
        [LocaleCode.Galician]: "Alxeria",
        [LocaleCode.Georgian]: "\u10D0\u10DA\u10D2\u10D8\u10E3\u10E0\u10D8",
        [LocaleCode.German]: "Algerien",
        [LocaleCode.Greenlandic]: "Algeria",
        [LocaleCode.Greek]: "\u0391\u03BB\u03B3\u03B5\u03C1\u03AF\u03B1",
        [LocaleCode.Gujarati]: "\u0A86\u0AB2\u0AC7\u0A97\u0AB0\u0ABF\u0AAF\u0ABE",
        [LocaleCode.Haitian]: "Alg\xE9rie",
        [LocaleCode.Hausa]: "Algeria",
        [LocaleCode.Hebrew]: "\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4",
        [LocaleCode.Hindi]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E",
        [LocaleCode.Hungarian]: "Alg\xE1r",
        [LocaleCode.Icelandic]: "Alg\xFAra",
        [LocaleCode.Igbo]: "Algeria",
        [LocaleCode.Indonesian]: "Aljir",
        [LocaleCode.Irish]: "Alg\xE9rie",
        [LocaleCode.Italian]: "Algeria",
        [LocaleCode.Japanese]: "\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2",
        [LocaleCode.Javanese]: "Aljir",
        [LocaleCode.Kannada]: "\u0C86\u0CB2\u0CCD\u0C97\u0CC7\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD",
        [LocaleCode.Kazakh]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Khmer]: "\u17A2\u17B6\u179B\u17CB\u1794\u17B6\u1793\u17B8",
        [LocaleCode.Korean]: "\uC54C\uC81C\uB9AC",
        [LocaleCode.Kurdish]: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u062C\u0632\u0627\u06CC\u0631",
        [LocaleCode.Kyrgyz]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Lao]: "\u0EAD\u0EB2\u0EA5\u0EB2\u0E88\u0EB5\u0E99",
        [LocaleCode.Latin]: "Algeria",
        [LocaleCode.Latvian]: "Al\u017E\u012Brija",
        [LocaleCode.Lithuanian]: "Al\u017Eyras",
        [LocaleCode.Luxembourgish]: "Algeria",
        [LocaleCode.Macedonian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Malagasy]: "Alg\xE9rie",
        [LocaleCode.Malay]: "Aljir",
        [LocaleCode.Malayalam]: "\u0D06\u0D32\u0D02\u0D17\u0D47\u0D30\u0D3F\u0D2F\u0D7B",
        [LocaleCode.Maltese]: "Alg\xE9rie",
        [LocaleCode.Maori]: "Algeria",
        [LocaleCode.Marathi]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E",
        [LocaleCode.Mongolian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Nepali]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E",
        [LocaleCode.Norwegian]: "Algeria",
        [LocaleCode.Pashto]: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631",
        [LocaleCode.Persian]: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0639\u0631\u0628",
        [LocaleCode.Polish]: "Algieria",
        [LocaleCode.Portuguese]: "Alg\xE9ria",
        [LocaleCode.Punjabi]: "\u0A06\u0A32\u0A47\u0A17\u0A40\u0A06",
        [LocaleCode.Romanian]: "Algeria",
        [LocaleCode.Russian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Samoan]: "Algeria",
        [LocaleCode.Sanskrit]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E",
        [LocaleCode.Scots]: "Algeria",
        [LocaleCode.Serbian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Sesotho]: "Algeria",
        [LocaleCode.Shona]: "Algeria",
        [LocaleCode.Sindhi]: "Algeria",
        [LocaleCode.Sinhala]: "\u0D86\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA",
        [LocaleCode.Slovak]: "Al\u017E\xEDrsko",
        [LocaleCode.Slovenian]: "Al\u017Eir",
        [LocaleCode.Somali]: "Algeria",
        [LocaleCode.Spanish]: "Algeria",
        [LocaleCode.Sudanese]: "Aljir",
        [LocaleCode.Swahili]: "Aljir",
        [LocaleCode.Swedish]: "Algeriet",
        [LocaleCode.Tagalog]: "Algeria",
        [LocaleCode.Tajik]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Tamil]: "\u0B86\u0BB2\u0BCD\u0B95\u0BC7\u0BB0\u0BBF\u0BAF\u0BBE",
        [LocaleCode.Tatar]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Telugu]: "\u0C06\u0C32\u0C4D\u0C17\u0C47\u0C30\u0C3F\u0C2F\u0C3E",
        [LocaleCode.Thai]: "\u0E2D\u0E32\u0E23\u0E32\u0E01\u0E2D\u0E19",
        [LocaleCode.Tibetan]: "\u0F68\u0F63\u0F9F\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F61\u0F72",
        [LocaleCode.Turkish]: "Cezayir",
        [LocaleCode.Ukrainian]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Urdu]: "\u0622\u0644\u062C\u06CC\u0631",
        [LocaleCode.Uzbek]: "\u0410\u043B\u0436\u0438\u0440",
        [LocaleCode.Vietnamese]: "\u1EA2\u0301\u1EA1\u1EA3\u1EAD\u1EB5",
        [LocaleCode.Welsh]: "Algeria",
        [LocaleCode.Xhosa]: "Algeria",
        [LocaleCode.Yiddish]: "\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4",
        [LocaleCode.Yoruba]: "Algeria",
        [LocaleCode.Zulu]: "Algeria"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Oran",
          total: 371e5
        }
      },
      geography: {
        area: 2381740,
        region: Region.Africa,
        sub_region: SubRegion.NorthernAfrica
      },
      government: {
        capital: "Algiers",
        type: "Republic"
      }
    }
  },
  AmericanSamoa: {
    i18n: {
      calling_codes: [1684],
      currencies: [CurrencyCode.AmericanSamoaTala],
      languages: [LocaleCode.English, LocaleCode.Samoan],
      tz: {
        offsets: [TimezoneOffset.UTC_MINUS_11],
        regions: [TimezoneRegions.PacificSamoa],
        timezones: [Timezones.SamoaStandardTime]
      }
    },
    id: CountryCode.AmericanSamoa,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F8}",
        emoji_unicode: "U+1F1E6 U+1F1F8",
        svg: "https://www.countryflags.io/as/flat/64.svg"
      },
      tld: [".as"]
    },
    iso: {
      alpha2: CountryCode.AmericanSamoa,
      alpha3: "ASM",
      numeric: "016"
    },
    name: {
      alt_spellings: ["AS", "Amerika S\u0101moa", "Amelika S\u0101moa", "S\u0101moa Amelika"],
      demonym: "American Samoan",
      native: {
        endonym: "American Samoa"
      },
      official: "American Samoa",
      short: "American Samoa",
      translations: {
        [LocaleCode.Afrikaans]: "Amerikaans Samoa",
        [LocaleCode.Albanian]: "Samoa Amerikane",
        [LocaleCode.Amharic]: "\u1233\u121E\u12A0\u122D",
        [LocaleCode.Arabic]: "\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629",
        [LocaleCode.Armenian]: "\u054D\u0561\u0570\u0561\u0574\u0561\u056C\u056B\u0561",
        [LocaleCode.Azerbaijani]: "Samoa Amerikana",
        [LocaleCode.Bashkir]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Basque]: "Samoa Amerikana",
        [LocaleCode.Belarusian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Bengali]: "\u0986\u09AE\u09C7\u09B0\u09BF\u0995\u09BE\u09A8 \u09B8\u09BE\u09AE\u09CB\u09AF\u09BC\u09BE",
        [LocaleCode.Berber]: "\u062C\u0632\u0631 \u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629",
        [LocaleCode.Bhutani]: "\u0F68\u0F62\u0F92\u0FB1\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F58\u0F44\u0F66\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F66\u0F90\u0F56\u0F66\u0F0B\u0F62\u0F92\u0FB1\u0F74\u0F51\u0F0B\u0F46\u0F7A\u0F53\u0F0B\u0F54\u0F7C\u0F0D",
        [LocaleCode.Bosnian]: "Ameri\u010Dka Samoa",
        [LocaleCode.Breton]: "Samoa Amerikan",
        [LocaleCode.Bulgarian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Burmese]: "\u1021\u1019\u1039\u1038\u1019\u101B\u102D\u102F\u1018\u102C\u101E\u102C",
        [LocaleCode.Catalan]: "Samoa Americana",
        [LocaleCode.Chinese]: "\u7F8E\u5C5E\u8428\u6469\u4E9A",
        [LocaleCode.Croatian]: "Ameri\u010Dka Samoa",
        [LocaleCode.Czech]: "Americk\xE1 Samoa",
        [LocaleCode.Danish]: "Amerikansk Samoa",
        [LocaleCode.Dutch]: "Amerikaans Samoa",
        [LocaleCode.English]: "American Samoa",
        [LocaleCode.Esperanto]: "Samoa Amerika",
        [LocaleCode.Estonian]: "Ameerika Samoa",
        [LocaleCode.Finnish]: "Amerikka Samoa",
        [LocaleCode.French]: "American Samoa",
        [LocaleCode.Frisian]: "Amerikaans Samoa",
        [LocaleCode.Galician]: "Samoa Americana",
        [LocaleCode.Georgian]: "\u10D0\u10DB\u10D4\u10E0\u10D8\u10D9\u10D8\u10E1 \u10E1\u10D0\u10DB\u10DD\u10D0",
        [LocaleCode.German]: "Amerikanisch-Samoa",
        [LocaleCode.Greenlandic]: "Amerikaans Samoa",
        [LocaleCode.Greek]: "\u0391\u03BC\u03B5\u03C1\u03B9\u03BA\u03B1\u03BD\u03B9\u03BA\u03AE \u03A3\u03B1\u03BC\u03CC\u03B1",
        [LocaleCode.Gujarati]: "\u0A86\u0AAE\u0AC7\u0AB0\u0ABF\u0A95\u0AA8 \u0AB8\u0ABE\u0AAE\u0ACB\u0AAF\u0ABE",
        [LocaleCode.Haitian]: "Amerikaans Samoa",
        [LocaleCode.Hausa]: "Amerikaans Samoa",
        [LocaleCode.Hebrew]: "\u05D0\u05DE\u05E8\u05D9\u05E7\u05E0\u05D9\u05D4 \u05E1\u05DE\u05D5\u05D0\u05D4",
        [LocaleCode.Hindi]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906",
        [LocaleCode.Hungarian]: "Amerikai Szamoa",
        [LocaleCode.Icelandic]: "Amerikai Szamoa",
        [LocaleCode.Igbo]: "Ikina Amerika",
        [LocaleCode.Indonesian]: "Samoa Amerika",
        [LocaleCode.Irish]: "Samoa Amerikana",
        [LocaleCode.Italian]: "Samoa Americane",
        [LocaleCode.Japanese]: "\u30A2\u30E1\u30EA\u30AB\u9818\u30B5\u30E2\u30A2",
        [LocaleCode.Javanese]: "Samoa Amerika",
        [LocaleCode.Kannada]: "\u0C85\u0CAE\u0CC7\u0CB0\u0CBF\u0C95\u0CA8\u0CCD \u0CB8\u0CAE\u0CCB\u0C86",
        [LocaleCode.Kazakh]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Khmer]: "\u17A2\u17B6\u1798\u17C9\u17B6\u179A\u17B8\u179F\u17D2\u178F\u1784\u17CB",
        [LocaleCode.Korean]: "\uC544\uBA54\uB9AC\uCE74 \uC0AC\uBAA8\uC544",
        [LocaleCode.Kurdish]: "Amerikaans Samoa",
        [LocaleCode.Kyrgyz]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Lao]: "\u0EAD\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94",
        [LocaleCode.Latin]: "Samoa Amerikana",
        [LocaleCode.Latvian]: "Amerikas Samoa",
        [LocaleCode.Lithuanian]: "Amerikos Samoa",
        [LocaleCode.Luxembourgish]: "Amerikaans Samoa",
        [LocaleCode.Macedonian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Malagasy]: "Samoa Amerika",
        [LocaleCode.Malay]: "Amerika Samo",
        [LocaleCode.Malayalam]: "\u0D05\u0D2E\u0D47\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D28\u0D4D\u0D31\u0D4D \u0D38\u0D2E\u0D4B\u0D06",
        [LocaleCode.Maltese]: "Samoa Amerika",
        [LocaleCode.Maori]: "Samoa Amerika",
        [LocaleCode.Marathi]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906",
        [LocaleCode.Mongolian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Nepali]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906",
        [LocaleCode.Norwegian]: "Amerikansk Samoa",
        [LocaleCode.Pashto]: "\u0627\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627",
        [LocaleCode.Persian]: "\u0622\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627",
        [LocaleCode.Polish]: "Samoa Ameryka\u0144skie",
        [LocaleCode.Portuguese]: "Samoa Americana",
        [LocaleCode.Punjabi]: "\u0A05\u0A2E\u0A30\u0A40\u0A15\u0A40 \u0A38\u0A3E\u0A2E\u0A4B\u0A06",
        [LocaleCode.Romanian]: "Samoa americane",
        [LocaleCode.Russian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Samoan]: "Samoa Amerika",
        [LocaleCode.Sanskrit]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906",
        [LocaleCode.Scots]: "Amerikaans Samoa",
        [LocaleCode.Serbian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Sesotho]: "Amerikaans Samoa",
        [LocaleCode.Shona]: "Amerikaans Samoa",
        [LocaleCode.Sindhi]: "Amerikaans Samoa",
        [LocaleCode.Sinhala]: "\u0D86\u0DBB\u0DCA\u0DA2\u0DD2\u0DB1\u0DCF\u0DB1\u0DD4 \u0DC3\u0DD0\u0DB8\u0DD0\u0DBD\u0DCA\u0DC0",
        [LocaleCode.Slovak]: "Amerikaans Samoa",
        [LocaleCode.Slovenian]: "Amerikaans Samoa",
        [LocaleCode.Somali]: "Amerikaans Samoa",
        [LocaleCode.Spanish]: "Samoa Americana",
        [LocaleCode.Sudanese]: "Amerikaans Samoa",
        [LocaleCode.Swahili]: "Amerikaans Samoa",
        [LocaleCode.Swedish]: "Amerikansk Samoa",
        [LocaleCode.Tagalog]: "Amerikaans Samoa",
        [LocaleCode.Tajik]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430",
        [LocaleCode.Tamil]: "\u0B85\u0BAE\u0BC6\u0BB0\u0BBF\u0B95\u0BCD \u0B9A\u0BAE\u0BCB\u0BB5\u0BBE",
        [LocaleCode.Tatar]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430",
        [LocaleCode.Telugu]: "\u0C05\u0C2E\u0C46\u0C30\u0C3F\u0C15\u0C4D \u0C38\u0C2E\u0C4B\u0C35\u0C3E",
        [LocaleCode.Thai]: "\u0E2A\u0E2B\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E41\u0E2D\u0E1F\u0E23\u0E34\u0E01\u0E32",
        [LocaleCode.Tibetan]: "\u0F68\u0F7A\u0F0B\u0F62\u0F72\u0F0B\u0F40\u0F0B\u0F68\u0F7A\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F74\u0F0B\u0F61\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F40",
        [LocaleCode.Turkish]: "Amerikan Samoas\u0131",
        [LocaleCode.Ukrainian]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
        [LocaleCode.Urdu]: "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0627",
        [LocaleCode.Uzbek]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430",
        [LocaleCode.Vietnamese]: "Amerikaans Samoa",
        [LocaleCode.Welsh]: "Amerikaans Samoa",
        [LocaleCode.Xhosa]: "Amerikaans Samoa",
        [LocaleCode.Yiddish]: "Amerikaans Samoa",
        [LocaleCode.Yoruba]: "Amerikaans Samoa",
        [LocaleCode.Zulu]: "Amerikaans Samoa"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Pago Pago",
          total: 558e3
        }
      },
      geography: {
        area: 199,
        region: Region.Oceania,
        sub_region: SubRegion.Polynesia
      },
      government: {
        capital: "Pago Pago",
        type: "Nonmetropolitan Territory of the US"
      }
    }
  },
  Andorra: {
    i18n: {
      calling_codes: [376],
      currencies: [CurrencyCode.Euro],
      languages: [LocaleCode.Catalan, LocaleCode.Spanish],
      tz: {
        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],
        regions: [TimezoneRegions.EuropeAndorra],
        timezones: [Timezones.CentralEuropeanTime]
      }
    },
    id: CountryCode.Andorra,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F4}",
        emoji_unicode: "U+1F1E6 U+1F1F4",
        svg: "https://www.countryflags.io/ad/flat/64.svg"
      },
      tld: [".ad"]
    },
    iso: {
      alpha2: CountryCode.Andorra,
      alpha3: "AND",
      numeric: "020"
    },
    name: {
      alt_spellings: ["AD", "Principality of Andorra", "Principat d'Andorra"],
      demonym: "Andorran",
      native: {
        endonym: "Andorra"
      },
      official: "Principality of Andorra",
      short: "Andorra",
      translations: {
        [LocaleCode.Afrikaans]: "Andorra",
        [LocaleCode.Albanian]: "Andorra",
        [LocaleCode.Amharic]: "\u12A0\u1295\u12F6\u122B",
        [LocaleCode.Arabic]: "\u0623\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode.Armenian]: "\u0540\u0561\u0576\u0564\u0561\u0580\u0561\u057E\u0561\u0575\u0584",
        [LocaleCode.Azerbaijani]: "Andorra",
        [LocaleCode.Bashkir]: "\u0410\u043D\u0434\u043E\u0440\u0430",
        [LocaleCode.Basque]: "Andorra",
        [LocaleCode.Belarusian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Bengali]: "\u0985\u09A8\u09CD\u09A1\u09CB\u09B0\u09BE",
        [LocaleCode.Berber]: "\u0623\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode.Bhutani]: "\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B",
        [LocaleCode.Bosnian]: "Andora",
        [LocaleCode.Breton]: "Andorra",
        [LocaleCode.Bulgarian]: "\u0410\u043D\u0434\u043E\u0440\u0430",
        [LocaleCode.Burmese]: "\u1021\u1014\u1039\u1010\u102C\u101B\u102D\u102F\u1038",
        [LocaleCode.Catalan]: "Andorra",
        [LocaleCode.Chinese]: "\u5B89\u9053\u5C14",
        [LocaleCode.Croatian]: "Andora",
        [LocaleCode.Czech]: "Andorra",
        [LocaleCode.Danish]: "Andorra",
        [LocaleCode.Dutch]: "Andorra",
        [LocaleCode.English]: "Andorra",
        [LocaleCode.Esperanto]: "Andora",
        [LocaleCode.Estonian]: "Andorra",
        [LocaleCode.Finnish]: "Andorra",
        [LocaleCode.French]: "Andorra",
        [LocaleCode.Frisian]: "Andorra",
        [LocaleCode.Galician]: "Andorra",
        [LocaleCode.Georgian]: "\u12A0\u1295\u12F6\u122B",
        [LocaleCode.German]: "Andorra",
        [LocaleCode.Greek]: "\u0391\u03BD\u03B4\u03CC\u03C1\u03B1",
        [LocaleCode.Hebrew]: "\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4",
        [LocaleCode.Hindi]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode.Hungarian]: "Andorra",
        [LocaleCode.Icelandic]: "Andorra",
        [LocaleCode.Igbo]: "Andorra",
        [LocaleCode.Indonesian]: "Andorra",
        [LocaleCode.Irish]: "Andorra",
        [LocaleCode.Italian]: "Andorra",
        [LocaleCode.Japanese]: "\u30A2\u30F3\u30C9\u30E9",
        [LocaleCode.Javanese]: "Andorra",
        [LocaleCode.Kannada]: "\u0C85\u0C82\u0CA1\u0CCB\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD",
        [LocaleCode.Kazakh]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Khmer]: "\u17A2\u1784\u17CB\u178A\u17B6\u179A\u17B6",
        [LocaleCode.Korean]: "\uC548\uB3C4\uB77C",
        [LocaleCode.Kurdish]: "Andorra",
        [LocaleCode.Kyrgyz]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Lao]: "\u0EAD\u0EB1\u0E99\u0EC2\u0E94\u0EA3\u0EB2",
        [LocaleCode.Latin]: "Andorra",
        [LocaleCode.Latvian]: "Andora",
        [LocaleCode.Lithuanian]: "Andora",
        [LocaleCode.Luxembourgish]: "Andorra",
        [LocaleCode.Macedonian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Malagasy]: "Andorra",
        [LocaleCode.Malay]: "Andorra",
        [LocaleCode.Malayalam]: "\u0D05\u0D02\u0D21\u0D4B\u0D30\u0D3F\u0D2F\u0D28\u0D4D",
        [LocaleCode.Maltese]: "Andorra",
        [LocaleCode.Maori]: "Andorra",
        [LocaleCode.Marathi]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode.Mongolian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Nepali]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode.Norwegian]: "Andorra",
        [LocaleCode.Pashto]: "\u0622\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode.Persian]: "\u0622\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode.Polish]: "Andora",
        [LocaleCode.Portuguese]: "Andorra",
        [LocaleCode.Punjabi]: "\u0A05\u0A70\u0A21\u0A4B\u0A30\u0A3E",
        [LocaleCode.Romanian]: "Andorra",
        [LocaleCode.Russian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Samoan]: "Andorra",
        [LocaleCode.Sanskrit]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode.Scots]: "Andorra",
        [LocaleCode.Serbian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Sesotho]: "Andorra",
        [LocaleCode.Shona]: "Andorra",
        [LocaleCode.Sindhi]: "\u0905\u0902\u0921\u094B\u0930\u093E",
        [LocaleCode.Sinhala]: "\u0D86\u0DB1\u0DCA\u0DAF\u0DDA",
        [LocaleCode.Slovak]: "Andorra",
        [LocaleCode.Slovenian]: "Andora",
        [LocaleCode.Somali]: "Andorra",
        [LocaleCode.Spanish]: "Andorra",
        [LocaleCode.Sudanese]: "Andorra",
        [LocaleCode.Swahili]: "Andorra",
        [LocaleCode.Swedish]: "Andorra",
        [LocaleCode.Tagalog]: "Andorra",
        [LocaleCode.Tajik]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Tamil]: "\u0B85\u0BA9\u0BCB\u0BB0\u0BCD\u0B9F\u0BBE",
        [LocaleCode.Tatar]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Telugu]: "\u0C05\u0C02\u0C21\u0C4B\u0C30\u0C4D\u0C30\u0C3E",
        [LocaleCode.Thai]: "\u0E2D\u0E31\u0E19\u0E14\u0E2D\u0E23\u0E4C\u0E23\u0E32",
        [LocaleCode.Tibetan]: "\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B",
        [LocaleCode.Turkish]: "Andora",
        [LocaleCode.Ukrainian]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Urdu]: "\u0622\u0646\u062F\u0648\u0631\u0627",
        [LocaleCode.Uzbek]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
        [LocaleCode.Vietnamese]: "Andorra",
        [LocaleCode.Welsh]: "Andorra",
        [LocaleCode.Xhosa]: "Andorra",
        [LocaleCode.Yiddish]: "\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4",
        [LocaleCode.Yoruba]: "Andorra",
        [LocaleCode.Zulu]: "Andorra"
      }
    },
    statistics: {
      demographics: {
        age: {
          distribution: [
            { age: "0 to 14 years", percentage: 15.3 },
            { age: "15 to 64 years", percentage: 66.7 },
            { age: "65 years and over", percentage: 14.6 }
          ],
          median_age: 35.5
        },
        population: {
          largest_city: "Andorra la Vella",
          total: 78e3
        }
      },
      geography: {
        area: 468,
        region: Region.Europe,
        sub_region: SubRegion.SouthernEurope
      },
      government: {
        capital: "Andorra la Vella",
        type: "Constitutional Monarchy"
      }
    }
  },
  Angola: {
    i18n: {
      calling_codes: [244],
      currencies: [CurrencyCode.AngolaKwanza],
      languages: [
        LocaleCode.Portuguese,
        LocaleCode.Spanish,
        LocaleCode.French,
        LocaleCode.Italian,
        LocaleCode.German,
        LocaleCode.English
      ],
      tz: {
        offsets: [
          TimezoneOffset.UTC_0,
          TimezoneOffset.UTC_PLUS_1,
          TimezoneOffset.UTC_PLUS_2
        ],
        regions: [TimezoneRegions.AfricaLuanda],
        timezones: [Timezones.WestAfricaTime]
      }
    },
    id: CountryCode.Angola,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1EC}",
        emoji_unicode: "U+1F1E6 U+1F1EC",
        svg: "https://www.countryflags.io/ao/flat/64.svg"
      },
      tld: [".ao"]
    },
    iso: {
      alpha2: CountryCode.Angola,
      alpha3: "AGO",
      numeric: "024"
    },
    name: {
      alt_spellings: ["AO", "Rep\xFAblica de Angola", "\u0281\u025Bpublika de an"],
      demonym: "Angolan",
      native: {
        endonym: "Angola"
      },
      official: "Republic of Angola",
      short: "Angola",
      translations: {
        [LocaleCode.Afrikaans]: "Angola",
        [LocaleCode.Albanian]: "Ang\xF2la",
        [LocaleCode.Amharic]: "\u12A0\u1295\u130E\u120A\u12EB",
        [LocaleCode.Arabic]: "\u0623\u0646\u063A\u0648\u0644\u0627",
        [LocaleCode.Armenian]: "\u0540\u0561\u0576\u0563\u0561\u056C\u0561\u056F\u0561",
        [LocaleCode.Azerbaijani]: "Ang\u0259l",
        [LocaleCode.Bashkir]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Basque]: "Angola",
        [LocaleCode.Belarusian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Bengali]: "\u0985\u0999\u09CD\u0997\u09B2\u09BE",
        [LocaleCode.Berber]: "Angola",
        [LocaleCode.Bhutani]: "\u0F60\u0F56\u0FB2\u0F74\u0F42",
        [LocaleCode.Bosnian]: "Angola",
        [LocaleCode.Breton]: "Angola",
        [LocaleCode.Bulgarian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Burmese]: "\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A",
        [LocaleCode.Catalan]: "Angola",
        [LocaleCode.Chinese]: "\u5B89\u54E5\u62C9",
        [LocaleCode.Croatian]: "Angola",
        [LocaleCode.Czech]: "Angola",
        [LocaleCode.Danish]: "Angola",
        [LocaleCode.Dutch]: "Angola",
        [LocaleCode.English]: "Angola",
        [LocaleCode.Esperanto]: "Angolo",
        [LocaleCode.Estonian]: "Angola",
        [LocaleCode.Finnish]: "Angola",
        [LocaleCode.French]: "Angola",
        [LocaleCode.Frisian]: "Angola",
        [LocaleCode.Galician]: "Angola",
        [LocaleCode.Georgian]: "\u10D0\u10DC\u10D2\u10DD\u10DA\u10D0",
        [LocaleCode.German]: "Angola",
        [LocaleCode.Greenlandic]: "Angola",
        [LocaleCode.Greek]: "\u0391\u03B3\u03BA\u03CC\u03BB\u03B1",
        [LocaleCode.Gujarati]: "\u0A85\u0A82\u0A97\u0ACB\u0AB2\u0ABE",
        [LocaleCode.Haitian]: "Angola",
        [LocaleCode.Hausa]: "Angola",
        [LocaleCode.Hebrew]: "\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4",
        [LocaleCode.Hindi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode.Hungarian]: "Angola",
        [LocaleCode.Icelandic]: "Angola",
        [LocaleCode.Igbo]: "Angola",
        [LocaleCode.Indonesian]: "Angola",
        [LocaleCode.Irish]: "Angola",
        [LocaleCode.Italian]: "Angola",
        [LocaleCode.Japanese]: "\u30A2\u30F3\u30B4\u30E9",
        [LocaleCode.Javanese]: "Anggol",
        [LocaleCode.Kannada]: "\u0C85\u0C82\u0C97\u0CCB\u0CB2\u0CBE",
        [LocaleCode.Kazakh]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Khmer]: "\u17A2\u1784\u17CB\u1780\u17B6\u179B\u17A2\u1784\u17CB\u1782\u17D2\u179B\u17C1\u179F",
        [LocaleCode.Korean]: "\uC559\uACE8\uB77C",
        [LocaleCode.Kurdish]: "Angola",
        [LocaleCode.Kyrgyz]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Lao]: "\u0EAD\u0EB0\u0E99\u0EB2\u0E94\u0EB2",
        [LocaleCode.Latin]: "Angola",
        [LocaleCode.Latvian]: "Angola",
        [LocaleCode.Lithuanian]: "Angola",
        [LocaleCode.Luxembourgish]: "Angola",
        [LocaleCode.Macedonian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Malagasy]: "Angola",
        [LocaleCode.Malay]: "Angola",
        [LocaleCode.Malayalam]: "\u0D05\u0D02\u0D17\u0D4B\u0D33\u0D3E",
        [LocaleCode.Maltese]: "Angola",
        [LocaleCode.Maori]: "Angola",
        [LocaleCode.Marathi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode.Mongolian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Nepali]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode.Norwegian]: "Angola",
        [LocaleCode.Pashto]: "\u0627\u0646\u06AB\u0648\u0644\u0627",
        [LocaleCode.Persian]: "\u0622\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode.Polish]: "Angola",
        [LocaleCode.Portuguese]: "Angola",
        [LocaleCode.Punjabi]: "\u0A05\u0A19\u0A4D\u0A17\u0A4B\u0A32\u0A3E",
        [LocaleCode.Romanian]: "Angole",
        [LocaleCode.Russian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Samoan]: "Angola",
        [LocaleCode.Sanskrit]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode.Scots]: "Angola",
        [LocaleCode.Serbian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Sesotho]: "Angola",
        [LocaleCode.Shona]: "Angola",
        [LocaleCode.Sindhi]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E",
        [LocaleCode.Sinhala]: "\u0D86\u0D9C\u0DBD\u0DD2\u0DBA\u0DCF\u0DC0",
        [LocaleCode.Slovak]: "Angola",
        [LocaleCode.Slovenian]: "Angola",
        [LocaleCode.Somali]: "Angola",
        [LocaleCode.Spanish]: "Angola",
        [LocaleCode.Sudanese]: "Angola",
        [LocaleCode.Swahili]: "Angola",
        [LocaleCode.Swedish]: "Angola",
        [LocaleCode.Tagalog]: "Angola",
        [LocaleCode.Tajik]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Tamil]: "\u0B85\u0B99\u0BCD\u0B95\u0BCB\u0BB2\u0BBE",
        [LocaleCode.Tatar]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Telugu]: "\u0C05\u0C02\u0C17\u0C4B\u0C32\u0C3E",
        [LocaleCode.Thai]: "\u0E2D\u0E07\u0E04\u0E4C\u0E01\u0E32\u0E23\u0E2D\u0E32\u0E19\u0E32\u0E21\u0E34\u0E2A\u0E16\u0E32\u0E19",
        [LocaleCode.Tibetan]: "\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B",
        [LocaleCode.Turkish]: "Angola",
        [LocaleCode.Ukrainian]: "\u0410\u043D\u0433\u043E\u043B\u0430",
        [LocaleCode.Urdu]: "\u0627\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode.Uzbek]: "Angola",
        [LocaleCode.Vietnamese]: "Angola",
        [LocaleCode.Xhosa]: "Angola",
        [LocaleCode.Welsh]: "Angola",
        [LocaleCode.Yiddish]: "\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4",
        [LocaleCode.Yoruba]: "Angola",
        [LocaleCode.Zulu]: "Angola"
      }
    }
  },
  Anguilla: {
    i18n: {
      calling_codes: [1264],
      currencies: [
        CurrencyCode.DominicaDollar,
        CurrencyCode.EastCaribbeanDollar,
        CurrencyCode.Euro,
        CurrencyCode.UnitedStatesDollar,
        CurrencyCode.BritishPound
      ],
      languages: [LocaleCode.English, LocaleCode.Spanish],
      tz: {
        offsets: [TimezoneOffset.UTC_MINUS_4],
        regions: [TimezoneRegions.AmericaAnguilla],
        timezones: [Timezones.AtlanticStandardTime]
      }
    },
    id: CountryCode.Anguilla,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1EC}",
        emoji_unicode: "U+1F1E6 U+1F1EC",
        svg: "https://www.countryflags.io/ai/flat/64.svg"
      },
      tld: [".ai"]
    },
    iso: {
      alpha2: CountryCode.Anguilla,
      alpha3: "AIA",
      numeric: "660"
    },
    name: {
      alt_spellings: ["AI"],
      demonym: "Anguillian",
      native: {
        endonym: "Anguilla"
      },
      official: "Anguilla",
      short: "Anguilla",
      translations: {
        [LocaleCode.Afrikaans]: "Anguilla",
        [LocaleCode.Albanian]: "Anguilla",
        [LocaleCode.Amharic]: "\u12A0\u1295\u1309\u120B",
        [LocaleCode.Arabic]: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627",
        [LocaleCode.Armenian]: "\u0531\u0576\u0563\u056B\u056C\u0561",
        [LocaleCode.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode.Bashkir]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Basque]: "Angila",
        [LocaleCode.Belarusian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Bengali]: "\u0985\u0999\u09CD\u0997\u09C0\u09B2\u09BE",
        [LocaleCode.Berber]: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627",
        [LocaleCode.Bhutani]: "\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B",
        [LocaleCode.Bosnian]: "Angila",
        [LocaleCode.Breton]: "Angila",
        [LocaleCode.Bulgarian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Burmese]: "\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A",
        [LocaleCode.Catalan]: "Angilla",
        [LocaleCode.Chinese]: "\u5B89\u572D\u62C9",
        [LocaleCode.Croatian]: "Angila",
        [LocaleCode.Czech]: "Anguilla",
        [LocaleCode.Danish]: "Anguilla",
        [LocaleCode.Dutch]: "Anguilla",
        [LocaleCode.English]: "Anguilla",
        [LocaleCode.Esperanto]: "Angila",
        [LocaleCode.Estonian]: "Anguilla",
        [LocaleCode.Finnish]: "Anguilla",
        [LocaleCode.French]: "Anguilla",
        [LocaleCode.Frisian]: "Angila",
        [LocaleCode.Galician]: "Anguilla",
        [LocaleCode.Georgian]: "\u10D0\u10DC\u10D2\u10D8\u10DA\u10D0",
        [LocaleCode.German]: "Anguilla",
        [LocaleCode.Greenlandic]: "Anguilla",
        [LocaleCode.Greek]: "\u0391\u03BD\u03B3\u03BA\u03C5\u03BB\u03AC",
        [LocaleCode.Gujarati]: "\u0A85\u0A82\u0A97\u0ACD\u0AAF\u0ABE\u0AB2\u0ABE",
        [LocaleCode.Haitian]: "Anguilla",
        [LocaleCode.Hausa]: "Anguilla",
        [LocaleCode.Hebrew]: "\u05D0\u05E0\u05D2\u05D5\u05D9\u05D0\u05DC\u05D4",
        [LocaleCode.Hindi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode.Hungarian]: "Anguilla",
        [LocaleCode.Icelandic]: "Anguilla",
        [LocaleCode.Igbo]: "Anguilla",
        [LocaleCode.Indonesian]: "Anguilla",
        [LocaleCode.Irish]: "Anguilla",
        [LocaleCode.Italian]: "Anguilla",
        [LocaleCode.Japanese]: "\u30A2\u30F3\u30AE\u30E9",
        [LocaleCode.Javanese]: "Anguilla",
        [LocaleCode.Kannada]: "\u0C85\u0C82\u0C97\u0CCD\u0CB5\u0CC7\u0CB2\u0CBE",
        [LocaleCode.Kazakh]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Khmer]: "\u17A2\u1784\u17CB\u1780\u17B6\u179A\u17A0\u17D2\u1782\u17B8\u1798",
        [LocaleCode.Korean]: "\uC575\uADC8\uB77C",
        [LocaleCode.Kurdish]: "Anguilla",
        [LocaleCode.Kyrgyz]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Lao]: "\u0EAD\u0EB0\u0E99\u0EB0\u0E88\u0EB3",
        [LocaleCode.Latin]: "Anguilla",
        [LocaleCode.Latvian]: "Anguilla",
        [LocaleCode.Lithuanian]: "Anguilla",
        [LocaleCode.Luxembourgish]: "Angilla",
        [LocaleCode.Macedonian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Malagasy]: "Angila",
        [LocaleCode.Malay]: "Anguilla",
        [LocaleCode.Malayalam]: "\u0D05\u0D02\u0D17\u0D4D\u0D35\u0D47\u0D32\u0D3E",
        [LocaleCode.Maltese]: "Anguilla",
        [LocaleCode.Maori]: "Anguilla",
        [LocaleCode.Marathi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode.Mongolian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Nepali]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode.Norwegian]: "Anguilla",
        [LocaleCode.Pashto]: "\u0622\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode.Persian]: "\u0622\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode.Polish]: "Anguilla",
        [LocaleCode.Portuguese]: "Anguilla",
        [LocaleCode.Punjabi]: "\u0A05\u0A02\u0A17\u0A40\u0A32\u0A3E",
        [LocaleCode.Romanian]: "Anguilla",
        [LocaleCode.Russian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Samoan]: "Anguilla",
        [LocaleCode.Sanskrit]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode.Scots]: "Anguilla",
        [LocaleCode.Serbian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Sesotho]: "Anguilla",
        [LocaleCode.Shona]: "Anguilla",
        [LocaleCode.Sindhi]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E",
        [LocaleCode.Sinhala]: "\u0D86\u0D82\u0D9C\u0DD2\u0DBD\u0DCF\u0DC0",
        [LocaleCode.Slovak]: "Anguilla",
        [LocaleCode.Slovenian]: "Anguilla",
        [LocaleCode.Somali]: "Anguilla",
        [LocaleCode.Spanish]: "Anguilla",
        [LocaleCode.Sudanese]: "Anguilla",
        [LocaleCode.Swahili]: "Anguilla",
        [LocaleCode.Swedish]: "Anguilla",
        [LocaleCode.Tagalog]: "Anguilla",
        [LocaleCode.Tajik]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Tamil]: "\u0B85\u0B99\u0BCD\u0B95\u0BC8\u0BB2\u0BBE",
        [LocaleCode.Tatar]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Telugu]: "\u0C05\u0C02\u0C17\u0C4D\u0C35\u0C47\u0C32\u0C3E",
        [LocaleCode.Thai]: "\u0E2D\u0E31\u0E07\u0E01\u0E32\u0E25\u0E32",
        [LocaleCode.Tibetan]: "\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B",
        [LocaleCode.Turkish]: "Anguilla",
        [LocaleCode.Ukrainian]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Urdu]: "\u0622\u0646\u06AF\u0648\u0644\u0627",
        [LocaleCode.Uzbek]: "\u0410\u043D\u0433\u0438\u043B\u0438",
        [LocaleCode.Vietnamese]: "Anguilla",
        [LocaleCode.Welsh]: "Anguilla",
        [LocaleCode.Xhosa]: "Anguilla",
        [LocaleCode.Yiddish]: "Anguilla",
        [LocaleCode.Yoruba]: "Anguilla",
        [LocaleCode.Zulu]: "Anguilla"
      }
    }
  },
  Antarctica: {
    i18n: {
      calling_codes: [672],
      currencies: [CurrencyCode.UnitedStatesDollar, CurrencyCode.Euro],
      languages: [
        LocaleCode.English,
        LocaleCode.Spanish,
        LocaleCode.French,
        LocaleCode.Portuguese,
        LocaleCode.Italian,
        LocaleCode.Dutch,
        LocaleCode.German,
        LocaleCode.Swedish,
        LocaleCode.Norwegian,
        LocaleCode.Danish,
        LocaleCode.Finnish
      ],
      tz: {
        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],
        regions: [
          TimezoneRegions.AntarcticaCasey,
          TimezoneRegions.AntarcticaDavis,
          TimezoneRegions.AntarcticaMcMurdo,
          TimezoneRegions.AntarcticaPalmer,
          TimezoneRegions.AntarcticaRothera
        ],
        timezones: [
          Timezones.AtlanticStandardTime,
          Timezones.CentralTime,
          Timezones.EasternTime,
          Timezones.AtlanticStandardTime,
          Timezones.AzoresStandardTime,
          Timezones.NewfoundlandStandardTime
        ]
      }
    },
    id: CountryCode.Antarctica,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F6}",
        emoji_unicode: "U+1F1E6 U+1F1F6",
        svg: "https://www.countryflags.io/aq/flat/64.svg"
      },
      tld: [".aq"]
    },
    iso: {
      alpha2: CountryCode.Antarctica,
      alpha3: "ATA",
      numeric: "010"
    },
    name: {
      alt_spellings: ["AQ"],
      demonym: "Antarctican",
      native: {
        endonym: "Antarctica"
      },
      official: "Antarctica",
      short: "Antarctica",
      translations: {
        [LocaleCode.Afrikaans]: "Antarctica",
        [LocaleCode.Albanian]: "Antarktika",
        [LocaleCode.Amharic]: "\u12A0\u1295\u1272\u120D\u12AB\u1293",
        [LocaleCode.Arabic]: "\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627",
        [LocaleCode.Armenian]: "\u0540\u0561\u0576\u0561\u0580\u0561\u057F\u056F\u0578",
        [LocaleCode.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode.Bashkir]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Basque]: "Antarktika",
        [LocaleCode.Belarusian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Bengali]: "\u0985\u09A8\u09CD\u09A4\u09B0\u09BE\u09B6\u09CD\u09AC\u09C0",
        [LocaleCode.Berber]: "\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627",
        [LocaleCode.Bhutani]: "\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B",
        [LocaleCode.Bosnian]: "Antarktika",
        [LocaleCode.Breton]: "Antarktika",
        [LocaleCode.Bulgarian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Burmese]: "\u1021\u1014\u1039\u1010\u102C\u101B\u102E\u1038\u101A\u102C\u1038",
        [LocaleCode.Catalan]: "Ant\xE0rtida",
        [LocaleCode.Chinese]: "\u5357\u6781\u6D32",
        [LocaleCode.Croatian]: "Antarktika",
        [LocaleCode.Czech]: "Antarktida",
        [LocaleCode.Danish]: "Antarktis",
        [LocaleCode.Dutch]: "Antarctica",
        [LocaleCode.English]: "Antarctica",
        [LocaleCode.Esperanto]: "Antarktika",
        [LocaleCode.Estonian]: "Antarktika",
        [LocaleCode.Finnish]: "Antarktis",
        [LocaleCode.French]: "Antarctica",
        [LocaleCode.Frisian]: "Antarktis",
        [LocaleCode.Galician]: "Ant\xE1rtida",
        [LocaleCode.Georgian]: "\u10D0\u10DC\u10E2\u10D0\u10E0\u10E5\u10E2\u10D8\u10D9\u10D0",
        [LocaleCode.German]: "Antarktis",
        [LocaleCode.Greenlandic]: "Antarktis",
        [LocaleCode.Greek]: "\u0391\u03BD\u03C4\u03B1\u03C1\u03BA\u03C4\u03B9\u03BA\u03AE",
        [LocaleCode.Gujarati]: "\u0A85\u0AA8\u0ACD\u0AA4\u0AB0\u0ABE\u0AB6\u0ACD\u0AB5\u0AC0",
        [LocaleCode.Haitian]: "Antarctica",
        [LocaleCode.Hausa]: "Antarktika",
        [LocaleCode.Hebrew]: "\u05D0\u05E0\u05D8\u05E8\u05E7\u05D8\u05D9\u05E7\u05D4",
        [LocaleCode.Hindi]: "\u0905\u0928\u094D\u0924\u0930\u0915\u094D\u0937\u0947\u0924\u094D\u0930",
        [LocaleCode.Hungarian]: "Antarktika",
        [LocaleCode.Icelandic]: "Antarktis",
        [LocaleCode.Igbo]: "Antarktika",
        [LocaleCode.Indonesian]: "Antarktika",
        [LocaleCode.Irish]: "Antarktika",
        [LocaleCode.Italian]: "Antartide",
        [LocaleCode.Japanese]: "\u5357\u6975",
        [LocaleCode.Javanese]: "Antarktika",
        [LocaleCode.Kannada]: "\u0C85\u0CA8\u0CCD\u0CA4\u0CB0\u0CBE\u0CB6\u0CCD\u0CB5\u0CBF",
        [LocaleCode.Kazakh]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Khmer]: "\u17A2\u1784\u17CB\u179F\u17D2\u1780\u179A\u17A2\u17B6\u1798\u17C9\u17BB\u1799",
        [LocaleCode.Korean]: "\uC564\uD2F0\uCE74\uD1A0\uB2C9",
        [LocaleCode.Kurdish]: "Antarktika",
        [LocaleCode.Kyrgyz]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Lao]: "\u0EAD\u0EB0\u0E99\u0EAD\u0EA5\u0EB2\u0E81\u0EB4\u0EAA\u0EB0",
        [LocaleCode.Latin]: "Antarctica",
        [LocaleCode.Latvian]: "Antarktika",
        [LocaleCode.Lithuanian]: "Antarktis",
        [LocaleCode.Luxembourgish]: "Antarktis",
        [LocaleCode.Macedonian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Malagasy]: "Antarctica",
        [LocaleCode.Malay]: "Antarktika",
        [LocaleCode.Malayalam]: "\u0D05\u0D28\u0D4D\u0D24\u0D30\u0D3E\u0D36\u0D4D\u0D35\u0D3F",
        [LocaleCode.Maltese]: "Antarktika",
        [LocaleCode.Maori]: "Antarktika",
        [LocaleCode.Marathi]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E",
        [LocaleCode.Mongolian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Nepali]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E",
        [LocaleCode.Norwegian]: "Antarktis",
        [LocaleCode.Pashto]: "\u0627\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627",
        [LocaleCode.Persian]: "\u0622\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627",
        [LocaleCode.Polish]: "Antarktyka",
        [LocaleCode.Portuguese]: "Ant\xE1rtida",
        [LocaleCode.Punjabi]: "\u0A05\u0A28\u0A4D\u0A24\u0A30\u0A3E\u0A36\u0A3F\u0A15\u0A3E",
        [LocaleCode.Romanian]: "Antarctica",
        [LocaleCode.Russian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Samoan]: "Antarktika",
        [LocaleCode.Sanskrit]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E",
        [LocaleCode.Scots]: "Antarktika",
        [LocaleCode.Serbian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Sesotho]: "Antarktika",
        [LocaleCode.Shona]: "Antarktika",
        [LocaleCode.Sindhi]: "Antarktika",
        [LocaleCode.Sinhala]: "\u0D86\u0DB1\u0DCA\u0DA7\u0DCA\u0DA7\u0DD2\u0D9A\u0DCF\u0DC0",
        [LocaleCode.Slovak]: "Antarktika",
        [LocaleCode.Slovenian]: "Antarktika",
        [LocaleCode.Somali]: "Antarktika",
        [LocaleCode.Spanish]: "Ant\xE1rtida",
        [LocaleCode.Sudanese]: "Antarktika",
        [LocaleCode.Swahili]: "Antarktika",
        [LocaleCode.Swedish]: "Antarktis",
        [LocaleCode.Tagalog]: "Antarktika",
        [LocaleCode.Tajik]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Tamil]: "\u0B85\u0BA9\u0BCD\u0BA4\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BBF\u0B95\u0BCD",
        [LocaleCode.Tatar]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Telugu]: "\u0C05\u0C28\u0C4D\u0C24\u0C30\u0C3E\u0C36\u0C4D\u0C35\u0C3F\u0C15\u0C3E",
        [LocaleCode.Thai]: "\u0E20\u0E39\u0E21\u0E34\u0E20\u0E32\u0E04\u0E2D\u0E32\u0E19\u0E31\u0E19\u0E15\u0E34\u0E01\u0E32",
        [LocaleCode.Tibetan]: "\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72\u0F0B\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72",
        [LocaleCode.Turkish]: "Antarktika",
        [LocaleCode.Ukrainian]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Urdu]: "\u0627\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627",
        [LocaleCode.Uzbek]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430",
        [LocaleCode.Vietnamese]: "\u0110\u1EA5t Antarktik",
        [LocaleCode.Welsh]: "Antarktika",
        [LocaleCode.Xhosa]: "Antarktika",
        [LocaleCode.Yiddish]: "Antarktika",
        [LocaleCode.Yoruba]: "Antarktika",
        [LocaleCode.Zulu]: "Antarktika"
      }
    }
  },
  Armenia: {
    i18n: {
      calling_codes: [374],
      currencies: [CurrencyCode.ArmeniaDram],
      languages: [LocaleCode.Armenian],
      tz: {
        offsets: [TimezoneOffset.UTC_PLUS_4],
        regions: [TimezoneRegions.AsiaJakarta],
        timezones: [Timezones.ArmeniaTime]
      }
    },
    id: CountryCode.Armenia,
    info: {
      flag: {
        emoji: "\u{1F1E6}\u{1F1F2}",
        emoji_unicode: "U+1F1E6 U+1F1F2",
        svg: "https://www.countryflags.io/am/flat/64.svg"
      },
      tld: [".am"]
    },
    iso: {
      alpha2: CountryCode.Armenia,
      alpha3: "ARM",
      numeric: "051"
    },
    name: {
      alt_spellings: ["AM", "Hayastan", "Republic of Armenia", "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576"],
      demonym: "Armenian",
      native: {
        endonym: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576"
      },
      official: "Republic of Armenia",
      short: "Armenia",
      translations: {
        [LocaleCode.Afrikaans]: "Armeni\xEB",
        [LocaleCode.Albanian]: "Armenia",
        [LocaleCode.Amharic]: "\u12A0\u121B\u122D\u129B",
        [LocaleCode.Arabic]: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627",
        [LocaleCode.Armenian]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576",
        [LocaleCode.Azerbaijani]: "Az\u0259rbaycan",
        [LocaleCode.Bashkir]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Basque]: "Arm\xE9nia",
        [LocaleCode.Belarusian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Bengali]: "\u0986\u09B0\u09CD\u09AE\u09C7\u09A8\u09BF",
        [LocaleCode.Berber]: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627",
        [LocaleCode.Bhutani]: "\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42",
        [LocaleCode.Bosnian]: "Armenija",
        [LocaleCode.Breton]: "Armeni\xEB",
        [LocaleCode.Bulgarian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Burmese]: "\u1021\u102C\u1019\u1010\u102D\u1010\u1039",
        [LocaleCode.Catalan]: "Arm\xE8nia",
        [LocaleCode.Chinese]: "\u4E9A\u7F8E\u5C3C\u4E9A",
        [LocaleCode.Croatian]: "Armenija",
        [LocaleCode.Czech]: "Arm\xE9nie",
        [LocaleCode.Danish]: "Armenien",
        [LocaleCode.Dutch]: "Armeni\xEB",
        [LocaleCode.English]: "Armenia",
        [LocaleCode.Esperanto]: "Armenia",
        [LocaleCode.Estonian]: "Armeenia",
        [LocaleCode.Finnish]: "Armenia",
        [LocaleCode.French]: "Armenia",
        [LocaleCode.Frisian]: "Armeenia",
        [LocaleCode.Galician]: "Arm\xE9nia",
        [LocaleCode.Georgian]: "\u10D0\u10E0\u10DB\u10DD\u10DC\u10D8",
        [LocaleCode.German]: "Armenien",
        [LocaleCode.Greenlandic]: "Armenia",
        [LocaleCode.Greek]: "\u0391\u03C1\u03BC\u03B5\u03BD\u03AF\u03B1",
        [LocaleCode.Gujarati]: "\u0A85\u0AB0\u0ACD\u0AAE\u0AC7\u0AA8\u0ABF",
        [LocaleCode.Haitian]: "Armenia",
        [LocaleCode.Hausa]: "Armenia",
        [LocaleCode.Hebrew]: "\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4",
        [LocaleCode.Hindi]: "\u0905\u05E8\u05DE\u05E0\u093F\u092F\u093E",
        [LocaleCode.Hungarian]: "\xD6rm\xE9nyorsz\xE1g",
        [LocaleCode.Icelandic]: "Armenia",
        [LocaleCode.Igbo]: "Armenia",
        [LocaleCode.Indonesian]: "Armenia",
        [LocaleCode.Irish]: "Armenia",
        [LocaleCode.Italian]: "Armenia",
        [LocaleCode.Japanese]: "\u30A2\u30EB\u30E1\u30CB\u30A2",
        [LocaleCode.Javanese]: "Armenia",
        [LocaleCode.Kannada]: "\u0C85\u0CB0\u0CCD\u0CAE\u0CC7\u0CA8\u0CBF",
        [LocaleCode.Kazakh]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Khmer]: "\u17A2\u17B6\u1798\u17C9\u17C1\u179A\u17B8",
        [LocaleCode.Korean]: "\uC544\uB974\uBA54\uB2C8\uC544",
        [LocaleCode.Kurdish]: "Armenia",
        [LocaleCode.Kyrgyz]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Lao]: "\u0EAD\u0EB2\u0EAB\u0EBC\u0E99\u0EB2",
        [LocaleCode.Latin]: "Armenia",
        [LocaleCode.Latvian]: "Armeenia",
        [LocaleCode.Lithuanian]: "Arm\u0117nija",
        [LocaleCode.Luxembourgish]: "Armenien",
        [LocaleCode.Macedonian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430",
        [LocaleCode.Malagasy]: "Armenia",
        [LocaleCode.Malay]: "Armenia",
        [LocaleCode.Malayalam]: "\u0D05\u0D30\u0D4D\u200D\u0D2E\u0D47\u0D28\u0D3F",
        [LocaleCode.Maltese]: "Armenia",
        [LocaleCode.Maori]: "Armenia",
        [LocaleCode.Marathi]: "\u0905\u0930\u094D\u092E\u0947\u0928\u093F",
        [LocaleCode.Mongolian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Nepali]: "\u0905\u0930\u094D\u092E\u0947\u0928\u093F",
        [LocaleCode.Norwegian]: "Armenia",
        [LocaleCode.Pashto]: "\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627",
        [LocaleCode.Persian]: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Polish]: "Armenia",
        [LocaleCode.Portuguese]: "Armenia",
        [LocaleCode.Punjabi]: "\u0A05\u0A30\u0A2E\u0A40\u0A28\u0A40",
        [LocaleCode.Romanian]: "Armenia",
        [LocaleCode.Russian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Samoan]: "Armenia",
        [LocaleCode.Sanskrit]: "Armenia",
        [LocaleCode.Scots]: "Armenia",
        [LocaleCode.Serbian]: "\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430",
        [LocaleCode.Sesotho]: "Armenia",
        [LocaleCode.Shona]: "Armenia",
        [LocaleCode.Sindhi]: "Armenia",
        [LocaleCode.Sinhala]: "\u0D86\u0DBB\u0DCA\u0DB8\u0DD3\u0DB1\u0DD2",
        [LocaleCode.Slovak]: "Armenia",
        [LocaleCode.Slovenian]: "Armenija",
        [LocaleCode.Somali]: "Armenia",
        [LocaleCode.Spanish]: "Armenia",
        [LocaleCode.Sudanese]: "Armenia",
        [LocaleCode.Swahili]: "Armenia",
        [LocaleCode.Swedish]: "Armenien",
        [LocaleCode.Tagalog]: "Armenia",
        [LocaleCode.Tajik]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Tamil]: "\u0B85\u0BB0\u0BCD\u0BAE\u0BC7\u0BA9\u0BBF\u0BAF\u0BA9\u0BCD",
        [LocaleCode.Tatar]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Telugu]: "\u0C05\u0C30\u0C4D\u0C2E\u0C47\u0C28\u0C3F",
        [LocaleCode.Thai]: "\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E21\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19",
        [LocaleCode.Tibetan]: "\u0F68\u0F62\u0F0B\u0F58\u0F7A\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F74\u0F0D",
        [LocaleCode.Turkish]: "Ermenistan",
        [LocaleCode.Ukrainian]: "\u0410\u0440\u043C\u0435\u043D\u0456\u044F",
        [LocaleCode.Urdu]: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646",
        [LocaleCode.Uzbek]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
        [LocaleCode.Vietnamese]: "Armenia",
        [LocaleCode.Welsh]: "Armenia",
        [LocaleCode.Xhosa]: "Armenia",
        [LocaleCode.Yiddish]: "\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4",
        [LocaleCode.Yoruba]: "Armenia",
        [LocaleCode.Zulu]: "Armenia"
      }
    }
  },
  SomeCountry: {
    i18n: {
      calling_codes: [],
      currencies: [],
      languages: [],
      tz: {
        offsets: [],
        regions: [],
        timezones: []
      }
    },
    id: CountryCode.AmericanSamoa,
    info: {
      flag: {
        emoji: "",
        emoji_unicode: "",
        svg: ""
      },
      tld: []
    },
    iso: {
      alpha2: CountryCode.AmericanSamoa,
      alpha3: "",
      numeric: ""
    },
    name: {
      alt_spellings: [],
      demonym: "",
      native: {
        endonym: ""
      },
      official: "",
      short: "",
      translations: {
        [LocaleCode.Afrikaans]: "",
        [LocaleCode.Albanian]: "",
        [LocaleCode.Amharic]: "",
        [LocaleCode.Arabic]: "",
        [LocaleCode.Armenian]: "",
        [LocaleCode.Azerbaijani]: "",
        [LocaleCode.Bashkir]: "",
        [LocaleCode.Basque]: "",
        [LocaleCode.Belarusian]: "",
        [LocaleCode.Bengali]: "",
        [LocaleCode.Berber]: "",
        [LocaleCode.Bhutani]: "",
        [LocaleCode.Bosnian]: "",
        [LocaleCode.Breton]: "",
        [LocaleCode.Bulgarian]: "",
        [LocaleCode.Burmese]: "",
        [LocaleCode.Catalan]: "",
        [LocaleCode.Chinese]: "",
        [LocaleCode.Croatian]: "",
        [LocaleCode.Czech]: "",
        [LocaleCode.Danish]: "",
        [LocaleCode.Dutch]: "",
        [LocaleCode.English]: "",
        [LocaleCode.Esperanto]: "",
        [LocaleCode.Estonian]: "",
        [LocaleCode.Finnish]: "",
        [LocaleCode.French]: "",
        [LocaleCode.Frisian]: "",
        [LocaleCode.Galician]: "",
        [LocaleCode.Georgian]: "",
        [LocaleCode.German]: "",
        [LocaleCode.Greenlandic]: "",
        [LocaleCode.Greek]: "",
        [LocaleCode.Gujarati]: "",
        [LocaleCode.Haitian]: "",
        [LocaleCode.Hausa]: "",
        [LocaleCode.Hebrew]: "",
        [LocaleCode.Hindi]: "",
        [LocaleCode.Hungarian]: "",
        [LocaleCode.Icelandic]: "",
        [LocaleCode.Igbo]: "",
        [LocaleCode.Indonesian]: "",
        [LocaleCode.Irish]: "",
        [LocaleCode.Italian]: "",
        [LocaleCode.Japanese]: "",
        [LocaleCode.Javanese]: "",
        [LocaleCode.Kannada]: "",
        [LocaleCode.Kazakh]: "",
        [LocaleCode.Khmer]: "",
        [LocaleCode.Korean]: "",
        [LocaleCode.Kurdish]: "",
        [LocaleCode.Kyrgyz]: "",
        [LocaleCode.Lao]: "",
        [LocaleCode.Latin]: "",
        [LocaleCode.Latvian]: "",
        [LocaleCode.Lithuanian]: "",
        [LocaleCode.Luxembourgish]: "",
        [LocaleCode.Macedonian]: "",
        [LocaleCode.Malagasy]: "",
        [LocaleCode.Malay]: "",
        [LocaleCode.Malayalam]: "",
        [LocaleCode.Maltese]: "",
        [LocaleCode.Maori]: "",
        [LocaleCode.Marathi]: "",
        [LocaleCode.Mongolian]: "",
        [LocaleCode.Nepali]: "",
        [LocaleCode.Norwegian]: "",
        [LocaleCode.Pashto]: "",
        [LocaleCode.Persian]: "",
        [LocaleCode.Polish]: "",
        [LocaleCode.Portuguese]: "",
        [LocaleCode.Punjabi]: "",
        [LocaleCode.Romanian]: "",
        [LocaleCode.Russian]: "",
        [LocaleCode.Samoan]: "",
        [LocaleCode.Sanskrit]: "",
        [LocaleCode.Scots]: "",
        [LocaleCode.Serbian]: "",
        [LocaleCode.Sesotho]: "",
        [LocaleCode.Shona]: "",
        [LocaleCode.Sindhi]: "",
        [LocaleCode.Sinhala]: "",
        [LocaleCode.Slovak]: "",
        [LocaleCode.Slovenian]: "",
        [LocaleCode.Somali]: "",
        [LocaleCode.Spanish]: "",
        [LocaleCode.Sudanese]: "",
        [LocaleCode.Swahili]: "",
        [LocaleCode.Swedish]: "",
        [LocaleCode.Tagalog]: "",
        [LocaleCode.Tajik]: "",
        [LocaleCode.Tamil]: "",
        [LocaleCode.Tatar]: "",
        [LocaleCode.Telugu]: "",
        [LocaleCode.Thai]: "",
        [LocaleCode.Tibetan]: "",
        [LocaleCode.Turkish]: "",
        [LocaleCode.Ukrainian]: "",
        [LocaleCode.Urdu]: "",
        [LocaleCode.Uzbek]: "",
        [LocaleCode.Vietnamese]: "",
        [LocaleCode.Welsh]: "",
        [LocaleCode.Xhosa]: "",
        [LocaleCode.Yiddish]: "",
        [LocaleCode.Yoruba]: "",
        [LocaleCode.Zulu]: ""
      }
    }
  }
});
({
  id: LocaleCode.Afrikaans,
  language: {
    code: LanguageCode.Afrikaans,
    name: "Afrikaans",
    native: "Afrikaans"
  },
  name: "Afrikaans",
  native_name: "Afrikaans",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.AfrikaansSouthAfrica,
  language: {
    code: LanguageCode.Afrikaans,
    name: "Afrikaans",
    native: "Afrikaans"
  },
  name: "Afrikaans (South Africa)",
  native_name: "Afrikaans (Suid-Afrika)",
  rtl: false
});
({
  id: LocaleCode.Albanian,
  language: {
    code: LanguageCode.Albanian,
    name: "Albanian",
    native: "Shqip"
  },
  name: "Albanian",
  native_name: "Shqip",
  rtl: false
});
({
  country: {
    code: CountryCode.Albania,
    name: "Albania",
    native: "Shqip\xEBria"
  },
  id: LocaleCode.AlbanianAlbania,
  language: {
    code: LanguageCode.Albanian,
    name: "Albanian",
    native: "Shqip"
  },
  name: "Albanian (Albania)",
  native_name: "Shqip (Shqip\xEBria)",
  rtl: false
});
({
  id: LocaleCode.Amharic,
  language: {
    code: LanguageCode.Amharic,
    name: "Amharic",
    native: "\u12A0\u121B\u122D\u129B"
  },
  name: "Amharic",
  native_name: "\u12A0\u121B\u122D\u129B",
  rtl: false
});
({
  country: {
    code: CountryCode.Ethiopia,
    name: "Ethiopia",
    native: "\u12A2\u1275\u12EE\u1335\u12EB"
  },
  id: LocaleCode.AmharicEthiopia,
  language: {
    code: LanguageCode.Amharic,
    name: "Amharic",
    native: "\u12A0\u121B\u122D\u129B"
  },
  name: "Amharic (Ethiopia)",
  native_name: "\u12A0\u121B\u122D\u129B (\u12A2\u1275\u12EE\u1335\u12EB)",
  rtl: false
});
({
  id: LocaleCode.Arabic,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
  rtl: true
});
({
  country: {
    code: CountryCode.Algeria,
    name: "Algeria",
    native: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631"
  },
  id: LocaleCode.ArabicAlgeria,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Algeria)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u062C\u0632\u0627\u0626\u0631)",
  rtl: true
});
({
  country: {
    code: CountryCode.Bahrain,
    name: "Bahrain",
    native: "\u0627\u0644\u0628\u062D\u0631\u064A\u0646"
  },
  id: LocaleCode.ArabicBahrain,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Bahrain)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0628\u062D\u0631\u064A\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode.Egypt,
    name: "Egypt",
    native: "\u0645\u0635\u0631"
  },
  id: LocaleCode.ArabicEgypt,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Egypt)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0645\u0635\u0631)",
  rtl: true
});
({
  country: {
    code: CountryCode.Iraq,
    name: "Iraq",
    native: "\u0627\u0644\u0639\u0631\u0627\u0642"
  },
  id: LocaleCode.ArabicIraq,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Iraq)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0639\u0631\u0627\u0642)",
  rtl: true
});
({
  country: {
    code: CountryCode.Jordan,
    name: "Jordan",
    native: "\u0627\u0644\u0623\u0631\u062F\u0646"
  },
  id: LocaleCode.ArabicJordan,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Jordan)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0623\u0631\u062F\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode.Kuwait,
    name: "Kuwait",
    native: "\u0627\u0644\u0643\u0648\u064A\u062A"
  },
  id: LocaleCode.ArabicKuwait,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Kuwait)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0643\u0648\u064A\u062A)",
  rtl: true
});
({
  country: {
    code: CountryCode.Lebanon,
    name: "Lebanon",
    native: "\u0644\u0628\u0646\u0627\u0646"
  },
  id: LocaleCode.ArabicLebanon,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Lebanon)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u0628\u0646\u0627\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode.Libya,
    name: "Libya",
    native: "\u0644\u064A\u0628\u064A\u0627"
  },
  id: LocaleCode.ArabicLibya,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Libya)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u064A\u0628\u064A\u0627)",
  rtl: true
});
({
  country: {
    code: CountryCode.Morocco,
    name: "Morocco",
    native: "\u0627\u0644\u0645\u063A\u0631\u0628"
  },
  id: LocaleCode.ArabicMorocco,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Morocco)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u063A\u0631\u0628)",
  rtl: true
});
({
  country: {
    code: CountryCode.Oman,
    name: "Oman",
    native: "\u0639\u0645\u0627\u0646"
  },
  id: LocaleCode.ArabicOman,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Oman)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0639\u0645\u0627\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode.Qatar,
    name: "Qatar",
    native: "\u0642\u0637\u0631"
  },
  id: LocaleCode.ArabicQatar,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Qatar)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0642\u0637\u0631)",
  rtl: true
});
({
  country: {
    code: CountryCode.SaudiArabia,
    name: "Saudi Arabia",
    native: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629"
  },
  id: LocaleCode.ArabicSaudiArabia,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Saudi Arabia)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629)",
  rtl: true
});
({
  country: {
    code: CountryCode.Tunisia,
    name: "Tunisia",
    native: "\u062A\u0648\u0646\u0633"
  },
  id: LocaleCode.ArabicTunisia,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Tunisia)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u062A\u0648\u0646\u0633)",
  rtl: true
});
({
  country: {
    code: CountryCode.UnitedArabEmirates,
    name: "United Arab Emirates",
    native: "\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629"
  },
  id: LocaleCode.ArabicUnitedArabEmirates,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (United Arab Emirates)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629)",
  rtl: true
});
({
  country: {
    code: CountryCode.Yemen,
    name: "Yemen",
    native: "\u0627\u0644\u064A\u0645\u0646"
  },
  id: LocaleCode.ArabicYemen,
  language: {
    code: LanguageCode.Arabic,
    name: "Arabic",
    native: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629"
  },
  name: "Arabic (Yemen)",
  native_name: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u064A\u0645\u0646)",
  rtl: true
});
({
  id: LocaleCode.Armenian,
  language: {
    code: LanguageCode.Armenian,
    name: "Armenian",
    native: "\u0540\u0561\u0575\u0565\u0580\u0565\u0576"
  },
  name: "Armenian",
  native_name: "\u0540\u0561\u0575\u0565\u0580\u0565\u0576",
  rtl: false
});
({
  country: { code: CountryCode.Armenia, name: "Armenia", native: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576" },
  id: LocaleCode.ArmenianArmenia,
  language: {
    code: LanguageCode.Armenian,
    name: "Armenian",
    native: "\u0570\u0561\u0575\u0565\u0580\u0565\u0576"
  },
  name: "Armenian (Armenia)",
  native_name: "\u0570\u0561\u0575\u0565\u0580\u0565\u0576 (\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576)",
  rtl: false
});
({
  id: LocaleCode.Azerbaijani,
  language: {
    code: LanguageCode.Azerbaijani,
    name: "Azeribaijani",
    native: "Az\u0259rbaycan"
  },
  name: "Azeri",
  native_name: "Az\u0259rbaycan",
  rtl: false
});
({
  country: {
    code: CountryCode.Azerbaijan,
    name: "Azerbaijan",
    native: "Az\u0259rbaycan"
  },
  id: LocaleCode.AzerbaijaniAzerbaijan,
  language: {
    code: LanguageCode.Azerbaijani,
    name: "Azerbaijani",
    native: "Az\u0259rbaycan"
  },
  name: "Azeri (Azerbaijan)",
  native_name: "Az\u0259rbaycan (Az\u0259rbaycan)",
  rtl: false
});
({
  id: LocaleCode.Basque,
  language: {
    code: LanguageCode.Basque,
    name: "Basque",
    native: "Euskara"
  },
  name: "Basque",
  native_name: "Euskara",
  rtl: false
});
({
  country: {
    code: CountryCode.Spain,
    name: "Spain",
    native: "Espa\xF1a"
  },
  id: LocaleCode.BasqueSpain,
  language: {
    code: LanguageCode.Basque,
    name: "Basque",
    native: "Euskara"
  },
  name: "Basque (Spain)",
  native_name: "Euskara (Espa\xF1a)",
  rtl: false
});
({
  id: LocaleCode.Belarusian,
  language: {
    code: LanguageCode.Belarusian,
    name: "Belarusian",
    native: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F"
  },
  name: "Belarusian",
  native_name: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F",
  rtl: false
});
({
  country: {
    code: CountryCode.Belarus,
    name: "Belarus",
    native: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C"
  },
  id: LocaleCode.BelarusianBelarus,
  language: {
    code: LanguageCode.Belarusian,
    name: "Belarusian",
    native: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F"
  },
  name: "Belarusian (Belarus)",
  native_name: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F (\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C)",
  rtl: false
});
({
  id: LocaleCode.Bengali,
  language: {
    code: LanguageCode.Bengali,
    name: "Bengali",
    native: "\u09AC\u09BE\u0982\u09B2\u09BE"
  },
  name: "Bengali",
  native_name: "\u09AC\u09BE\u0982\u09B2\u09BE",
  rtl: false
});
({
  country: {
    code: CountryCode.Bangladesh,
    name: "Bangladesh",
    native: "\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6"
  },
  id: LocaleCode.BengaliBangladesh,
  language: {
    code: LanguageCode.Bengali,
    name: "Bengali",
    native: "\u09AC\u09BE\u0982\u09B2\u09BE"
  },
  name: "Bengali (Bangladesh)",
  native_name: "\u09AC\u09BE\u0982\u09B2\u09BE (\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6)",
  rtl: false
});
({
  id: LocaleCode.Bhutani,
  language: {
    code: LanguageCode.Bhutani,
    name: "Bhutani",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Bhutani",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42",
  rtl: false
});
({
  country: {
    code: CountryCode.Bhutan,
    name: "Bhutan",
    native: "\u0F60\u0F56\u0FB2\u0F74\u0F42"
  },
  id: LocaleCode.BhutaniBhutan,
  language: {
    code: LanguageCode.Bhutani,
    name: "Bhutani",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Bhutani (Bhutan)",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42)",
  rtl: false
});
({
  id: LocaleCode.Bulgarian,
  language: {
    code: LanguageCode.Bulgarian,
    name: "Bulgarian",
    native: "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438"
  },
  name: "Bulgarian",
  native_name: "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438",
  rtl: false
});
({
  country: {
    code: CountryCode.Bulgaria,
    name: "Bulgaria",
    native: "\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F"
  },
  id: LocaleCode.BulgarianBulgaria,
  language: {
    code: LanguageCode.Bulgarian,
    name: "Bulgarian",
    native: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438"
  },
  name: "Bulgarian (Bulgaria)",
  native_name: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438 (\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F)",
  rtl: false
});
({
  id: LocaleCode.Burmese,
  language: {
    code: LanguageCode.Burmese,
    name: "Burmese",
    native: "\u1017\u1019\u102C\u1005\u102C"
  },
  name: "Burmese",
  native_name: "\u1017\u1019\u102C\u1005\u102C",
  rtl: false
});
({
  country: {
    code: CountryCode.Myanmar,
    name: "Myanmar",
    native: "\u1019\u103C\u1014\u103A\u1019\u102C"
  },
  id: LocaleCode.BurmeseMyanmar,
  language: {
    code: LanguageCode.Burmese,
    name: "Burmese",
    native: "\u1017\u1019\u102C\u1005\u102C"
  },
  name: "Burmese (Myanmar)",
  native_name: "\u1017\u1019\u102C\u1005\u102C (\u1019\u103C\u1014\u103A\u1019\u102C)",
  rtl: false
});
({
  id: LocaleCode.Cantonese,
  language: {
    code: LanguageCode.Cantonese,
    name: "Cantonese",
    native: "\u5EE3\u6771\u8A71"
  },
  name: "Cantonese",
  native_name: "\u5EE3\u6771\u8A71",
  rtl: false
});
({
  country: {
    code: CountryCode.HongKong,
    name: "Hong Kong",
    native: "\u9999\u6E2F"
  },
  id: LocaleCode.CantoneseHongKong,
  language: {
    code: LanguageCode.Cantonese,
    name: "Cantonese",
    native: "\u5EE3\u6771\u8A71"
  },
  name: "Cantonese (Hong Kong)",
  native_name: "\u5EE3\u6771\u8A71 (\u9999\u6E2F)",
  rtl: false
});
({
  id: LocaleCode.Catalan,
  language: {
    code: LanguageCode.Catalan,
    name: "Catalan",
    native: "Catal\xE0"
  },
  name: "Catalan",
  native_name: "Catal\xE0",
  rtl: false
});
({
  country: {
    code: CountryCode.Spain,
    name: "Spain",
    native: "Espa\xF1a"
  },
  id: LocaleCode.CatalanSpain,
  language: {
    code: LanguageCode.Catalan,
    name: "Catalan",
    native: "Catal\xE0"
  },
  name: "Catalan (Spain)",
  native_name: "Catal\xE0 (Espanya)",
  rtl: false
});
({
  id: LocaleCode.ChineseSimplified,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified)",
  native_name: "\u4E2D\u6587",
  rtl: false
});
({
  country: {
    code: CountryCode.China,
    name: "China",
    native: "\u4E2D\u56FD"
  },
  id: LocaleCode.ChineseSimplifiedChina,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified/China)",
  native_name: "\u4E2D\u6587 (\u4E2D\u56FD)",
  rtl: false
});
({
  country: {
    code: CountryCode.HongKong,
    name: "Hong Kong",
    native: "\u9999\u6E2F"
  },
  id: LocaleCode.ChineseSimplifiedHongKong,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified/Hong Kong)",
  native_name: "\u4E2D\u6587 (\u9999\u6E2F)",
  rtl: false
});
({
  country: {
    code: CountryCode.Macau,
    name: "Macau",
    native: "\u6FB3\u9580"
  },
  id: LocaleCode.ChineseSimplifiedMacau,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified/Macau)",
  native_name: "\u4E2D\u6587 (\u6FB3\u9580)",
  rtl: false
});
({
  country: {
    code: CountryCode.Singapore,
    name: "Singapore",
    native: "\u65B0\u52A0\u5761"
  },
  id: LocaleCode.ChineseSimplifiedSingapore,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Simplified/Singapore)",
  native_name: "\u4E2D\u6587 (\u65B0\u52A0\u5761)",
  rtl: false
});
({
  id: LocaleCode.ChineseTraditional,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Traditional)",
  native_name: "\u4E2D\u6587",
  rtl: false
});
({
  country: {
    code: CountryCode.HongKong,
    name: "Hong Kong",
    native: "\u9999\u6E2F"
  },
  id: LocaleCode.ChineseTraditionalHongKong,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese (Traditional/Hong Kong)",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Hong Kong)",
  native_name: "\u4E2D\u6587 (\u9999\u6E2F)",
  rtl: false
});
({
  country: {
    code: CountryCode.Macau,
    name: "Macau",
    native: "\u6FB3\u9580"
  },
  id: LocaleCode.ChineseTraditionalMacau,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese (Traditional/Macau)",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Macau)",
  native_name: "\u4E2D\u6587 (\u6FB3\u9580)",
  rtl: false
});
({
  country: {
    code: CountryCode.Singapore,
    name: "Singapore",
    native: "\u65B0\u52A0\u5761"
  },
  id: LocaleCode.ChineseTraditionalSingapore,
  language: {
    code: LanguageCode.Chinese,
    name: "Chinese (Traditional/Singapore)",
    native: "\u4E2D\u6587"
  },
  name: "Chinese (Singapore)",
  native_name: "\u4E2D\u6587 (\u65B0\u52A0\u5761)",
  rtl: false
});
({
  id: LocaleCode.Croatian,
  language: {
    code: LanguageCode.Croatian,
    name: "Croatian",
    native: "Hrvatski"
  },
  name: "Croatian",
  native_name: "Hrvatski",
  rtl: false
});
({
  country: {
    code: CountryCode.BosniaAndHerzegovina,
    name: "Bosnia and Herzegovina",
    native: "Bosna i Hercegovina"
  },
  id: LocaleCode.CroatianBosniaAndHerzegovina,
  language: {
    code: LanguageCode.Croatian,
    name: "Croatian",
    native: "Hrvatski"
  },
  name: "Croatian (Bosnia and Herzegovina)",
  native_name: "Hrvatski (Bosna i Hercegovina)",
  rtl: false
});
({
  country: {
    code: CountryCode.Croatia,
    name: "Croatia",
    native: "Hrvatska"
  },
  id: LocaleCode.CroatianCroatia,
  language: {
    code: LanguageCode.Croatian,
    name: "Croatian",
    native: "Hrvatski"
  },
  name: "Croatian (Croatia)",
  native_name: "Hrvatski (Hrvatska)",
  rtl: false
});
({
  id: LocaleCode.Czech,
  language: {
    code: LanguageCode.Czech,
    name: "Czech",
    native: "\u010Ce\u0161tina"
  },
  name: "Czech",
  native_name: "\u010Ce\u0161tina",
  rtl: false
});
({
  country: {
    code: CountryCode.CzechRepublic,
    name: "Czech Republic",
    native: "\u010Cesk\xE1 republika"
  },
  id: LocaleCode.CzechCzechRepublic,
  language: {
    code: LanguageCode.Czech,
    name: "Czech",
    native: "\u010Ce\u0161tina"
  },
  name: "Czech (Czech Republic)",
  native_name: "\u010Ce\u0161tina (\u010Cesk\xE1 republika)",
  rtl: false
});
({
  id: LocaleCode.Danish,
  language: {
    code: LanguageCode.Danish,
    name: "Danish",
    native: "Dansk"
  },
  name: "Danish",
  native_name: "Dansk",
  rtl: false
});
({
  country: {
    code: CountryCode.Denmark,
    name: "Denmark",
    native: "Danmark"
  },
  id: LocaleCode.DanishDenmark,
  language: {
    code: LanguageCode.Danish,
    name: "Danish",
    native: "Dansk"
  },
  name: "Danish (Denmark)",
  native_name: "Dansk (Danmark)",
  rtl: false
});
({
  id: LocaleCode.Divehi,
  language: {
    code: LanguageCode.Divehi,
    name: "Divehi",
    native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0"
  },
  name: "Divehi",
  native_name: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0",
  rtl: true
});
({
  country: {
    code: CountryCode.Maldives,
    name: "Maldives",
    native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC"
  },
  id: LocaleCode.DivehiMaldives,
  language: {
    code: LanguageCode.Divehi,
    name: "Divehi",
    native: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0"
  },
  name: "Divehi (Maldives)",
  native_name: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0 (\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC)",
  rtl: true
});
({
  id: LocaleCode.Dutch,
  language: {
    code: LanguageCode.Dutch,
    name: "Dutch",
    native: "Nederlands"
  },
  name: "Dutch",
  native_name: "Nederlands",
  rtl: false
});
({
  country: {
    code: CountryCode.Belgium,
    name: "Belgium",
    native: "Belgi\xEB"
  },
  id: LocaleCode.DutchBelgium,
  language: {
    code: LanguageCode.Dutch,
    name: "Dutch",
    native: "Nederlands"
  },
  name: "Dutch (Belgium)",
  native_name: "Nederlands (Belgi\xEB)",
  rtl: false
});
({
  country: {
    code: CountryCode.Netherlands,
    name: "Netherlands",
    native: "Nederland"
  },
  id: LocaleCode.DutchNetherlands,
  language: {
    code: LanguageCode.Dutch,
    name: "Dutch",
    native: "Nederlands"
  },
  name: "Dutch (Netherlands)",
  native_name: "Nederlands (Nederland)",
  rtl: false
});
({
  id: LocaleCode.English,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English",
  native_name: "English",
  rtl: false
});
({
  country: {
    code: CountryCode.Australia,
    name: "Australia",
    native: "Australia"
  },
  id: LocaleCode.EnglishAustralia,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Australia)",
  native_name: "English (Australia)",
  rtl: false
});
({
  country: {
    code: CountryCode.Belgium,
    name: "Belgium",
    native: "Belgi\xEB"
  },
  id: LocaleCode.EnglishBelgium,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Belgium)",
  native_name: "English (Belgi\xEB)",
  rtl: false
});
({
  country: {
    code: CountryCode.Canada,
    name: "Canada",
    native: "Canada"
  },
  id: LocaleCode.EnglishCanada,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Canada)",
  native_name: "English (Canada)",
  rtl: false
});
({
  country: {
    code: CountryCode.Ireland,
    name: "Ireland",
    native: "\xC9ire"
  },
  id: LocaleCode.EnglishIreland,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Ireland)",
  native_name: "English (\xC9ire)",
  rtl: false
});
({
  country: {
    code: CountryCode.Jamaica,
    name: "Jamaica",
    native: "Jamaica"
  },
  id: LocaleCode.EnglishJamaica,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Jamaica)",
  native_name: "English (Jamaica)",
  rtl: false
});
({
  country: {
    code: CountryCode.NewZealand,
    name: "New Zealand",
    native: "New Zealand"
  },
  id: LocaleCode.EnglishNewZealand,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (New Zealand)",
  native_name: "English (New Zealand)",
  rtl: false
});
({
  country: {
    code: CountryCode.Philippines,
    name: "Philippines",
    native: "Philippines"
  },
  id: LocaleCode.EnglishPhilippines,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Philippines)",
  native_name: "English (Philippines)",
  rtl: false
});
({
  country: {
    code: CountryCode.Singapore,
    name: "Singapore",
    native: "Singapore"
  },
  id: LocaleCode.EnglishSingapore,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Singapore)",
  native_name: "English (Singapore)",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.EnglishSouthAfrica,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (South Africa)",
  native_name: "English (South Africa)",
  rtl: false
});
({
  country: {
    code: CountryCode.TrinidadAndTobago,
    name: "Trinidad and Tobago",
    native: "Trinidad and Tobago"
  },
  id: LocaleCode.EnglishTrinidadAndTobago,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Trinidad and Tobago)",
  native_name: "English (Trinidad and Tobago)",
  rtl: false
});
({
  country: {
    code: CountryCode.UnitedKingdom,
    name: "United Kingdom",
    native: "United Kingdom"
  },
  id: LocaleCode.EnglishUnitedKingdom,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (United Kingdom)",
  native_name: "English (United Kingdom)",
  rtl: false
});
({
  country: {
    code: CountryCode.UnitedStates,
    name: "United States",
    native: "United States"
  },
  id: LocaleCode.EnglishUnitedStates,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (United States)",
  native_name: "English (United States)",
  rtl: false
});
({
  country: {
    code: CountryCode.Zimbabwe,
    name: "Zimbabwe",
    native: "Zimbabwe"
  },
  id: LocaleCode.EnglishZimbabwe,
  language: {
    code: LanguageCode.English,
    name: "English",
    native: "English"
  },
  name: "English (Zimbabwe)",
  native_name: "English (Zimbabwe)",
  rtl: false
});
({
  id: LocaleCode.Esperanto,
  language: {
    code: LanguageCode.Esperanto,
    name: "Esperanto",
    native: "Esperanto"
  },
  name: "Esperanto",
  native_name: "Esperanto",
  rtl: false
});
({
  id: LocaleCode.Estonian,
  language: {
    code: LanguageCode.Estonian,
    name: "Estonian",
    native: "Eesti"
  },
  name: "Estonian",
  native_name: "Eesti",
  rtl: false
});
({
  country: {
    code: CountryCode.Estonia,
    name: "Estonia",
    native: "Eesti"
  },
  id: LocaleCode.EstonianEstonia,
  language: {
    code: LanguageCode.Estonian,
    name: "Estonian",
    native: "Eesti"
  },
  name: "Estonian (Estonia)",
  native_name: "Eesti (Eesti)",
  rtl: false
});
({
  id: LocaleCode.Faroese,
  language: {
    code: LanguageCode.Faroese,
    name: "Faroese",
    native: "F\xF8royskt"
  },
  name: "Faroese",
  native_name: "F\xF8royskt",
  rtl: false
});
({
  country: {
    code: CountryCode.FaroeIslands,
    name: "Faroe Islands",
    native: "F\xF8royar"
  },
  id: LocaleCode.FaroeseFaroeIslands,
  language: {
    code: LanguageCode.Faroese,
    name: "Faroese",
    native: "F\xF8royskt"
  },
  name: "Faroese (Faroe Islands)",
  native_name: "F\xF8royskt (F\xF8royar)",
  rtl: false
});
({
  id: LocaleCode.Farsi,
  language: {
    code: LanguageCode.Farsi,
    name: "Farsi",
    native: "\u0641\u0627\u0631\u0633\u06CC"
  },
  name: "Farsi",
  native_name: "\u0641\u0627\u0631\u0633\u06CC",
  rtl: true
});
({
  country: {
    code: CountryCode.Iran,
    name: "Iran",
    native: "\u0627\u06CC\u0631\u0627\u0646"
  },
  id: LocaleCode.FarsiIran,
  language: {
    code: LanguageCode.Farsi,
    name: "Farsi",
    native: "\u0641\u0627\u0631\u0633\u06CC"
  },
  name: "Farsi (Iran)",
  native_name: "\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)",
  rtl: true
});
({
  id: LocaleCode.Filipino,
  language: {
    code: LanguageCode.Filipino,
    name: "Filipino",
    native: "Filipino"
  },
  name: "Filipino",
  native_name: "Filipino",
  rtl: false
});
({
  country: {
    code: CountryCode.Philippines,
    name: "Philippines",
    native: "Pilipinas"
  },
  id: LocaleCode.FilipinoPhilippines,
  language: {
    code: LanguageCode.Filipino,
    name: "Filipino",
    native: "Filipino"
  },
  name: "Filipino (Philippines)",
  native_name: "Filipino (Pilipinas)",
  rtl: false
});
({
  id: LocaleCode.Finnish,
  language: {
    code: LanguageCode.Finnish,
    name: "Finnish",
    native: "Suomi"
  },
  name: "Finnish",
  native_name: "Suomi",
  rtl: false
});
({
  country: {
    code: CountryCode.Finland,
    name: "Finland",
    native: "Suomi"
  },
  id: LocaleCode.FinnishFinland,
  language: {
    code: LanguageCode.Finnish,
    name: "Finnish",
    native: "Suomi"
  },
  name: "Finnish (Finland)",
  native_name: "Suomi (Suomi)",
  rtl: false
});
({
  id: LocaleCode.French,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French",
  native_name: "Fran\xE7ais",
  rtl: false
});
({
  country: {
    code: CountryCode.Belgium,
    name: "Belgium",
    native: "Belgique"
  },
  id: LocaleCode.FrenchBelgium,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Belgium)",
  native_name: "Fran\xE7ais (Belgique)",
  rtl: false
});
({
  country: {
    code: CountryCode.Canada,
    name: "Canada",
    native: "Canada"
  },
  id: LocaleCode.FrenchCanada,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Canada)",
  native_name: "Fran\xE7ais (Canada)",
  rtl: false
});
({
  country: {
    code: CountryCode.France,
    name: "France",
    native: "France"
  },
  id: LocaleCode.FrenchFrance,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (France)",
  native_name: "Fran\xE7ais (France)",
  rtl: false
});
({
  country: {
    code: CountryCode.Luxembourg,
    name: "Luxembourg",
    native: "Luxembourg"
  },
  id: LocaleCode.FrenchLuxembourg,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Luxembourg)",
  native_name: "Fran\xE7ais (Luxembourg)",
  rtl: false
});
({
  country: {
    code: CountryCode.Monaco,
    name: "Monaco",
    native: "Monaco"
  },
  id: LocaleCode.FrenchMonaco,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Monaco)",
  native_name: "Fran\xE7ais (Monaco)",
  rtl: false
});
({
  country: {
    code: CountryCode.Reunion,
    name: "Reunion",
    native: "La R\xE9union"
  },
  id: LocaleCode.FrenchReunion,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Reunion)",
  native_name: "Fran\xE7ais (La R\xE9union)",
  rtl: false
});
({
  country: {
    code: CountryCode.Switzerland,
    name: "Switzerland",
    native: "Suisse"
  },
  id: LocaleCode.FrenchSwitzerland,
  language: {
    code: LanguageCode.French,
    name: "French",
    native: "Fran\xE7ais"
  },
  name: "French (Switzerland)",
  native_name: "Fran\xE7ais (Suisse)",
  rtl: false
});
({
  id: LocaleCode.Frisian,
  language: {
    code: LanguageCode.Frisian,
    name: "Frisian",
    native: "Frysk"
  },
  name: "Frisian",
  native_name: "Frysk",
  rtl: false
});
({
  country: {
    code: CountryCode.Netherlands,
    name: "Netherlands",
    native: "Nederland"
  },
  id: LocaleCode.FrisianNetherlands,
  language: {
    code: LanguageCode.Frisian,
    name: "Frisian",
    native: "Frysk"
  },
  name: "Frisian (Netherlands)",
  native_name: "Frysk (Nederland)",
  rtl: false
});
({
  id: LocaleCode.Galician,
  language: {
    code: LanguageCode.Galician,
    name: "Galician",
    native: "Galego"
  },
  name: "Galician",
  native_name: "Galego",
  rtl: false
});
({
  country: {
    code: CountryCode.Spain,
    name: "Spain",
    native: "Espa\xF1a"
  },
  id: LocaleCode.GalicianSpain,
  language: {
    code: LanguageCode.Galician,
    name: "Galician",
    native: "Galego"
  },
  name: "Galician (Spain)",
  native_name: "Galego (Espa\xF1a)",
  rtl: false
});
({
  id: LocaleCode.Georgian,
  language: {
    code: LanguageCode.Georgian,
    name: "Georgian",
    native: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8"
  },
  name: "Georgian",
  native_name: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8",
  rtl: false
});
({
  country: {
    code: CountryCode.Georgia,
    name: "Georgia",
    native: "\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD"
  },
  id: LocaleCode.GeorgianGeorgia,
  language: {
    code: LanguageCode.Georgian,
    name: "Georgian",
    native: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8"
  },
  name: "Georgian (Georgia)",
  native_name: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8 (\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD)",
  rtl: false
});
({
  id: LocaleCode.German,
  language: {
    code: LanguageCode.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German",
  native_name: "Deutsch",
  rtl: false
});
({
  country: {
    code: CountryCode.Austria,
    name: "Austria",
    native: "\xD6sterreich"
  },
  id: LocaleCode.GermanAustria,
  language: {
    code: LanguageCode.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Austria)",
  native_name: "Deutsch (\xD6sterreich)",
  rtl: false
});
({
  country: {
    code: CountryCode.Belgium,
    name: "Belgium",
    native: "Belgi\xEB"
  },
  id: LocaleCode.GermanBelgium,
  language: {
    code: LanguageCode.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Belgium)",
  native_name: "Deutsch (Belgi\xEB)",
  rtl: false
});
({
  country: {
    code: CountryCode.Switzerland,
    name: "Switzerland",
    native: "Suisse"
  },
  id: LocaleCode.GermanSwitzerland,
  language: {
    code: LanguageCode.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Switzerland)",
  native_name: "Deutsch (Suisse)",
  rtl: false
});
({
  country: {
    code: CountryCode.Liechtenstein,
    name: "Liechtenstein",
    native: "Liechtenstein"
  },
  id: LocaleCode.GermanLiechtenstein,
  language: {
    code: LanguageCode.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Liechtenstein)",
  native_name: "Deutsch (Liechtenstein)",
  rtl: false
});
({
  country: {
    code: CountryCode.Luxembourg,
    name: "Luxembourg",
    native: "Luxembourg"
  },
  id: LocaleCode.GermanLuxembourg,
  language: {
    code: LanguageCode.German,
    name: "German",
    native: "Deutsch"
  },
  name: "German (Luxembourg)",
  native_name: "Deutsch (Luxembourg)",
  rtl: false
});
({
  id: LocaleCode.Greek,
  language: {
    code: LanguageCode.Greek,
    name: "Greek",
    native: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC"
  },
  name: "Greek",
  native_name: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC",
  rtl: false
});
({
  country: {
    code: CountryCode.Greece,
    name: "Greece",
    native: "\u0395\u03BB\u03BB\u03AC\u03B4\u03B1"
  },
  id: LocaleCode.GreekGreece,
  language: {
    code: LanguageCode.Greek,
    name: "Greek",
    native: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC"
  },
  name: "Greek (Greece)",
  native_name: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC (\u0395\u03BB\u03BB\u03AC\u03B4\u03B1)",
  rtl: false
});
({
  id: LocaleCode.Greenlandic,
  language: {
    code: LanguageCode.Greenlandic,
    name: "Greenlandic",
    native: "Kalaallisut"
  },
  name: "Greenlandic",
  native_name: "Kalaallisut",
  rtl: false
});
({
  country: {
    code: CountryCode.Greenland,
    name: "Greenland",
    native: "Kalaallit Nunaat"
  },
  id: LocaleCode.GreenlandicGreenland,
  language: {
    code: LanguageCode.Greenlandic,
    name: "Greenlandic",
    native: "Kalaallisut"
  },
  name: "Greenlandic (Greenland)",
  native_name: "Kalaallisut (Kalaallit Nunaat)",
  rtl: false
});
({
  id: LocaleCode.Gujarati,
  language: {
    code: LanguageCode.Gujarati,
    name: "Gujarati",
    native: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0"
  },
  name: "Gujarati",
  native_name: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.GujaratiIndia,
  language: {
    code: LanguageCode.Gujarati,
    name: "Gujarati",
    native: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0"
  },
  name: "Gujarati (India)",
  native_name: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0 (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode.Hausa,
  language: {
    code: LanguageCode.Hausa,
    name: "Hausa",
    native: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  name: "Hausa",
  native_name: "\u0647\u064E\u0648\u064F\u0633\u064E",
  rtl: false
});
({
  country: {
    code: CountryCode.Ghana,
    name: "Ghana",
    native: "Ghana"
  },
  id: LocaleCode.HausaGhana,
  language: {
    code: LanguageCode.Hausa,
    name: "Hausa",
    native: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  name: "Hausa (Ghana)",
  native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Ghana)",
  rtl: false
});
({
  country: {
    code: CountryCode.Niger,
    name: "Niger",
    native: "Niger"
  },
  id: LocaleCode.HausaNiger,
  language: {
    code: LanguageCode.Hausa,
    name: "Hausa",
    native: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  name: "Hausa (Niger)",
  native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Niger)",
  rtl: false
});
({
  country: {
    code: CountryCode.Nigeria,
    name: "Nigeria",
    native: "Nigeria"
  },
  id: LocaleCode.HausaNigeria,
  language: {
    code: LanguageCode.Hausa,
    name: "Hausa",
    native: "\u0647\u064E\u0648\u064F\u0633\u064E"
  },
  name: "Hausa (Nigeria)",
  native_name: "\u0647\u064E\u0648\u064F\u0633\u064E (Nigeria)",
  rtl: false
});
({
  id: LocaleCode.Hebrew,
  language: {
    code: LanguageCode.Hebrew,
    name: "Hebrew",
    native: "\u05E2\u05D1\u05E8\u05D9\u05EA"
  },
  name: "Hebrew",
  native_name: "\u05E2\u05D1\u05E8\u05D9\u05EA",
  rtl: true
});
({
  country: {
    code: CountryCode.Israel,
    name: "Hebrew",
    native: ""
  },
  id: LocaleCode.HebrewIsrael,
  language: {
    code: LanguageCode.Hebrew,
    name: "Hebrew",
    native: ""
  },
  name: "Hebrew (Israel)",
  native_name: "",
  rtl: true
});
({
  id: LocaleCode.Hindi,
  language: {
    code: LanguageCode.Hindi,
    name: "Hindi",
    native: "\u0939\u093F\u0928\u094D\u0926\u0940"
  },
  name: "Hindi",
  native_name: "\u0939\u093F\u0928\u094D\u0926\u0940",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.HindiIndia,
  language: {
    code: LanguageCode.Hindi,
    name: "Hindi",
    native: "\u092D\u093E\u0930\u0924\u0940\u092F"
  },
  name: "Hindi (India)",
  native_name: "\u092D\u093E\u0930\u0924\u0940\u092F",
  rtl: false
});
({
  id: LocaleCode.Hungarian,
  language: {
    code: LanguageCode.Hungarian,
    name: "Hungarian",
    native: "Magyar"
  },
  name: "Hungarian",
  native_name: "Magyar",
  rtl: false
});
({
  country: {
    code: CountryCode.Hungary,
    name: "Hungary",
    native: "Magyarorsz\xE1g"
  },
  id: LocaleCode.HungarianHungary,
  language: {
    code: LanguageCode.Hungarian,
    name: "Hungarian",
    native: "Magyar"
  },
  name: "Hungarian (Hungary)",
  native_name: "Magyar (Magyarorsz\xE1g)",
  rtl: false
});
({
  id: LocaleCode.Icelandic,
  language: {
    code: LanguageCode.Icelandic,
    name: "Icelandic",
    native: "\xCDslenska"
  },
  name: "Icelandic",
  native_name: "\xCDslenska",
  rtl: false
});
({
  country: {
    code: CountryCode.Iceland,
    name: "Iceland",
    native: "\xCDsland"
  },
  id: LocaleCode.IcelandicIceland,
  language: {
    code: LanguageCode.Icelandic,
    name: "Icelandic",
    native: "\xCDslenska"
  },
  name: "Icelandic (Iceland)",
  native_name: "\xCDslenska (\xCDsland)",
  rtl: false
});
({
  id: LocaleCode.Igbo,
  language: {
    code: LanguageCode.Igbo,
    name: "Igbo",
    native: "Igbo"
  },
  name: "Igbo",
  native_name: "Igbo",
  rtl: false
});
({
  id: LocaleCode.Indonesian,
  language: {
    code: LanguageCode.Indonesian,
    name: "Indonesian",
    native: "Bahasa Indonesia"
  },
  name: "Indonesian",
  native_name: "Bahasa Indonesia",
  rtl: false
});
({
  country: {
    code: CountryCode.Indonesia,
    name: "Indonesia",
    native: "Indonesia"
  },
  id: LocaleCode.IndonesianIndonesia,
  language: {
    code: LanguageCode.Indonesian,
    name: "Indonesian",
    native: "Bahasa Indonesia"
  },
  name: "Indonesian (Indonesia)",
  native_name: "Bahasa Indonesia (Indonesia)",
  rtl: false
});
({
  id: LocaleCode.Irish,
  language: {
    code: LanguageCode.Irish,
    name: "Irish",
    native: "Gaeilge"
  },
  name: "Irish",
  native_name: "Gaeilge",
  rtl: false
});
({
  country: {
    code: CountryCode.Ireland,
    name: "Ireland",
    native: "\xC9ire"
  },
  id: LocaleCode.IrishIreland,
  language: {
    code: LanguageCode.Irish,
    name: "Irish",
    native: "Gaeilge"
  },
  name: "Irish (Ireland)",
  native_name: "Gaeilge (\xC9ire)",
  rtl: false
});
({
  id: LocaleCode.Italian,
  language: {
    code: LanguageCode.Italian,
    name: "Italian",
    native: "Italiano"
  },
  name: "Italian",
  native_name: "Italiano",
  rtl: false
});
({
  country: {
    code: CountryCode.Italy,
    name: "Italy",
    native: "Italia"
  },
  id: LocaleCode.ItalianItaly,
  language: {
    code: LanguageCode.Italian,
    name: "Italian",
    native: "Italiano"
  },
  name: "Italian (Italy)",
  native_name: "Italiano (Italia)",
  rtl: false
});
({
  country: {
    code: CountryCode.Switzerland,
    name: "Switzerland",
    native: "Schweiz"
  },
  id: LocaleCode.ItalianSwitzerland,
  language: {
    code: LanguageCode.Italian,
    name: "Italian",
    native: "Italiano"
  },
  name: "Italian (Switzerland)",
  native_name: "Italiano (Svizzera)",
  rtl: false
});
({
  id: LocaleCode.Japanese,
  language: {
    code: LanguageCode.Japanese,
    name: "Japanese",
    native: "\u65E5\u672C\u8A9E"
  },
  name: "Japanese",
  native_name: "\u65E5\u672C\u8A9E",
  rtl: false
});
({
  country: {
    code: CountryCode.Japan,
    name: "Japan",
    native: "\u65E5\u672C"
  },
  id: LocaleCode.JapaneseJapan,
  language: {
    code: LanguageCode.Japanese,
    name: "Japanese",
    native: "\u65E5\u672C\u8A9E"
  },
  name: "Japanese (Japan)",
  native_name: "\u65E5\u672C\u8A9E (\u65E5\u672C)",
  rtl: false
});
({
  id: LocaleCode.Kannada,
  language: {
    code: LanguageCode.Kannada,
    name: "Kannada",
    native: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1"
  },
  name: "Kannada",
  native_name: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u0CAD\u0CBE\u0CB0\u0CA4"
  },
  id: LocaleCode.KannadaIndia,
  language: {
    code: LanguageCode.Kannada,
    name: "Kannada",
    native: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1"
  },
  name: "Kannada (India)",
  native_name: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1 (\u0CAD\u0CBE\u0CB0\u0CA4)",
  rtl: false
});
({
  id: LocaleCode.Kazakh,
  language: {
    code: LanguageCode.Kazakh,
    name: "Kazakh",
    native: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456"
  },
  name: "Kazakh",
  native_name: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456",
  rtl: false
});
({
  country: {
    code: CountryCode.Kazakhstan,
    name: "Kazakhstan",
    native: "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D"
  },
  id: LocaleCode.KazakhKazakhstan,
  language: {
    code: LanguageCode.Kazakh,
    name: "Kazakh",
    native: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456"
  },
  name: "Kazakh (Kazakhstan)",
  native_name: "\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)",
  rtl: false
});
({
  id: LocaleCode.Khmer,
  language: {
    code: LanguageCode.Khmer,
    name: "Khmer",
    native: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A"
  },
  name: "Khmer",
  native_name: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A",
  rtl: false
});
({
  country: {
    code: CountryCode.Cambodia,
    name: "Cambodia",
    native: "\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6"
  },
  id: LocaleCode.KhmerCambodia,
  language: {
    code: LanguageCode.Khmer,
    name: "Khmer",
    native: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A"
  },
  name: "Khmer (Cambodia)",
  native_name: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A (\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6)",
  rtl: false
});
({
  id: LocaleCode.Konkani,
  language: {
    code: LanguageCode.Konkani,
    name: "Konkani",
    native: "\u0915\u094B\u0902\u0915\u0923\u0940"
  },
  name: "Konkani",
  native_name: "\u0915\u094B\u0902\u0915\u0923\u0940",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.KonkaniIndia,
  language: {
    code: LanguageCode.Konkani,
    name: "Konkani",
    native: "\u0915\u094B\u0902\u0915\u0923\u0940"
  },
  name: "Konkani (India)",
  native_name: "\u0915\u094B\u0902\u0915\u0923\u0940 (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode.Korean,
  language: {
    code: LanguageCode.Korean,
    name: "Korean",
    native: "\uD55C\uAD6D\uC5B4"
  },
  name: "Korean",
  native_name: "\uD55C\uAD6D\uC5B4",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthKorea,
    name: "South Korea",
    native: "\uB300\uD55C\uBBFC\uAD6D"
  },
  id: LocaleCode.KoreanSouthKorea,
  language: {
    code: LanguageCode.Korean,
    name: "Korean",
    native: "\uD55C\uAD6D\uC5B4"
  },
  name: "Korean (South Korea)",
  native_name: "\uD55C\uAD6D\uC5B4 (\uB300\uD55C\uBBFC\uAD6D)",
  rtl: false
});
({
  id: LocaleCode.Kurdish,
  language: {
    code: LanguageCode.Kurdish,
    name: "Kurdish",
    native: "Kurd\xEE"
  },
  name: "Kurdish",
  native_name: "Kurd\xEE",
  rtl: false
});
({
  country: {
    code: CountryCode.Iraq,
    name: "Iraq",
    native: "\u0627\u0644\u0639\u0631\u0627\u0642"
  },
  id: LocaleCode.KurdishIraq,
  language: {
    code: LanguageCode.Kurdish,
    name: "Kurdish",
    native: "Kurd\xEE"
  },
  name: "Kurdish (Iraq)",
  native_name: "Kurd\xEE (\u0627\u0644\u0639\u0631\u0627\u0642)",
  rtl: false
});
({
  country: {
    code: CountryCode.Turkey,
    name: "Turkey",
    native: "T\xFCrkiye"
  },
  id: LocaleCode.KurdishTurkey,
  language: {
    code: LanguageCode.Kurdish,
    name: "Kurdish",
    native: "Kurd\xEE"
  },
  name: "Kurdish (Turkey)",
  native_name: "Kurd\xEE (T\xFCrkiye)",
  rtl: false
});
({
  id: LocaleCode.Kyrgyz,
  language: {
    code: LanguageCode.Kyrgyz,
    name: "Kyrgyz",
    native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430"
  },
  name: "Kyrgyz",
  native_name: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430",
  rtl: false
});
({
  country: {
    code: CountryCode.Kyrgyzstan,
    name: "Kyrgyzstan",
    native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D"
  },
  id: LocaleCode.KyrgyzKyrgyzstan,
  language: {
    code: LanguageCode.Kyrgyz,
    name: "Kyrgyz",
    native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430"
  },
  name: "Kyrgyz (Kyrgyzstan)",
  native_name: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430 (\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D)",
  rtl: false
});
({
  id: LocaleCode.Lao,
  language: {
    code: LanguageCode.Lao,
    name: "Lao",
    native: "\u0EA5\u0EB2\u0EA7"
  },
  name: "Lao",
  native_name: "\u0EA5\u0EB2\u0EA7",
  rtl: false
});
({
  country: {
    code: CountryCode.Laos,
    name: "Laos",
    native: "\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95"
  },
  id: LocaleCode.LaoLaos,
  language: {
    code: LanguageCode.Lao,
    name: "Lao",
    native: "\u0EA5\u0EB2\u0EA7"
  },
  name: "Lao (Laos)",
  native_name: "\u0EA5\u0EB2\u0EA7 (\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95)",
  rtl: false
});
({
  id: LocaleCode.Latvian,
  language: {
    code: LanguageCode.Latvian,
    name: "Latvian",
    native: "Latvie\u0161u"
  },
  name: "Latvian",
  native_name: "Latvie\u0161u",
  rtl: false
});
({
  country: {
    code: CountryCode.Latvia,
    name: "Latvia",
    native: "Latvija"
  },
  id: LocaleCode.LatvianLatvia,
  language: {
    code: LanguageCode.Latvian,
    name: "Latvian",
    native: "Latvie\u0161u"
  },
  name: "Latvian (Latvia)",
  native_name: "Latvie\u0161u (Latvija)",
  rtl: false
});
({
  id: LocaleCode.Lithuanian,
  language: {
    code: LanguageCode.Lithuanian,
    name: "Lithuanian",
    native: "Lietuvi\u0173"
  },
  name: "Lithuanian",
  native_name: "Lietuvi\u0173",
  rtl: false
});
({
  country: {
    code: CountryCode.Lithuania,
    name: "Lithuania",
    native: "Lietuva"
  },
  id: LocaleCode.LithuanianLithuania,
  language: {
    code: LanguageCode.Lithuanian,
    name: "Lithuanian",
    native: "Lietuvi\u0173"
  },
  name: "Lithuanian (Lithuania)",
  native_name: "Lietuvi\u0173 (Lietuva)",
  rtl: false
});
({
  id: LocaleCode.Luxembourgish,
  language: {
    code: LanguageCode.Luxembourgish,
    name: "Luxembourgish",
    native: "L\xEBtzebuergesch"
  },
  name: "Luxembourgish",
  native_name: "L\xEBtzebuergesch",
  rtl: false
});
({
  country: {
    code: CountryCode.Belgium,
    name: "Belgium",
    native: "Belgi\xEB"
  },
  id: LocaleCode.LuxembourgishBelgium,
  language: {
    code: LanguageCode.Luxembourgish,
    name: "Luxembourgish",
    native: "L\xEBtzebuergesch"
  },
  name: "Luxembourgish (Belgium)",
  native_name: "L\xEBtzebuergesch (Belgi\xEB)",
  rtl: false
});
({
  country: {
    code: CountryCode.Luxembourg,
    name: "Luxembourg",
    native: "Luxembourg"
  },
  id: LocaleCode.LuxembourgishLuxembourg,
  language: {
    code: LanguageCode.Luxembourgish,
    name: "Luxembourgish",
    native: "L\xEBtzebuergesch"
  },
  name: "Luxembourgish (Luxembourg)",
  native_name: "L\xEBtzebuergesch (Luxembourg)",
  rtl: false
});
({
  id: LocaleCode.Macedonian,
  language: {
    code: LanguageCode.Macedonian,
    name: "Macedonian",
    native: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438"
  },
  name: "Macedonian",
  native_name: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438",
  rtl: false
});
({
  country: {
    code: CountryCode.NorthMacedonia,
    name: "Macedonia",
    native: "\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430"
  },
  id: LocaleCode.MacedonianNorthMacedonia,
  language: {
    code: LanguageCode.Macedonian,
    name: "Macedonian",
    native: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438"
  },
  name: "Macedonian (North Macedonia)",
  native_name: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 (\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430)",
  rtl: false
});
({
  id: LocaleCode.Malay,
  language: {
    code: LanguageCode.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay",
  native_name: "Bahasa Melayu",
  rtl: false
});
({
  country: {
    code: CountryCode.Brunei,
    name: "Brunei",
    native: "Negara Brunei Darussalam"
  },
  id: LocaleCode.MalayBrunei,
  language: {
    code: LanguageCode.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay (Brunei)",
  native_name: "Bahasa Melayu (Negara Brunei Darussalam)",
  rtl: false
});
({
  country: {
    code: CountryCode.Malaysia,
    name: "Malaysia",
    native: "Malaysia"
  },
  id: LocaleCode.MalayMalaysia,
  language: {
    code: LanguageCode.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay (Malaysia)",
  native_name: "Bahasa Melayu (Malaysia)",
  rtl: false
});
({
  country: {
    code: CountryCode.Singapore,
    name: "Singapore",
    native: "Singapore"
  },
  id: LocaleCode.MalaySingapore,
  language: {
    code: LanguageCode.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay (Singapore)",
  native_name: "Bahasa Melayu (Singapore)",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.MalayIndia,
  language: {
    code: LanguageCode.Malay,
    name: "Malay",
    native: "Bahasa Melayu"
  },
  name: "Malay (India)",
  native_name: "Bahasa Melayu (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode.Maltese,
  language: {
    code: LanguageCode.Maltese,
    name: "Maltese",
    native: "Malti"
  },
  name: "Maltese",
  native_name: "Malti",
  rtl: false
});
({
  country: {
    code: CountryCode.Malta,
    name: "Malta",
    native: "Malta"
  },
  id: LocaleCode.MalteseMalta,
  language: {
    code: LanguageCode.Maltese,
    name: "Maltese",
    native: "Malti"
  },
  name: "Maltese (Malta)",
  native_name: "Malti (Malta)",
  rtl: false
});
({
  id: LocaleCode.Maori,
  language: {
    code: LanguageCode.Maori,
    name: "Maori",
    native: "M\u0101ori"
  },
  name: "Maori",
  native_name: "M\u0101ori",
  rtl: false
});
({
  country: {
    code: CountryCode.NewZealand,
    name: "New Zealand",
    native: "New Zealand"
  },
  id: LocaleCode.MaoriNewZealand,
  language: {
    code: LanguageCode.Maori,
    name: "Maori",
    native: "M\u0101ori"
  },
  name: "Maori (New Zealand)",
  native_name: "M\u0101ori (New Zealand)",
  rtl: false
});
({
  id: LocaleCode.Marathi,
  language: {
    code: LanguageCode.Marathi,
    name: "Marathi",
    native: "\u092E\u0930\u093E\u0920\u0940"
  },
  name: "Marathi",
  native_name: "\u092E\u0930\u093E\u0920\u0940",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.MarathiIndia,
  language: {
    code: LanguageCode.Marathi,
    name: "Marathi",
    native: "\u092E\u0930\u093E\u0920\u0940"
  },
  name: "Marathi (India)",
  native_name: "\u092E\u0930\u093E\u0920\u0940 (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode.Mongolian,
  language: {
    code: LanguageCode.Mongolian,
    name: "Mongolian",
    native: "\u041C\u043E\u043D\u0433\u043E\u043B"
  },
  name: "Mongolian",
  native_name: "\u041C\u043E\u043D\u0433\u043E\u043B",
  rtl: false
});
({
  country: {
    code: CountryCode.Mongolia,
    name: "Mongolia",
    native: "\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441"
  },
  id: LocaleCode.MongolianMongolia,
  language: {
    code: LanguageCode.Mongolian,
    name: "Mongolian",
    native: "\u041C\u043E\u043D\u0433\u043E\u043B"
  },
  name: "Mongolian (Mongolia)",
  native_name: "\u041C\u043E\u043D\u0433\u043E\u043B (\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441)",
  rtl: false
});
({
  id: LocaleCode.Montenegrin,
  language: {
    code: LanguageCode.Montenegrin,
    name: "Montenegrin",
    native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A"
  },
  name: "Montenegrin",
  native_name: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A",
  rtl: false
});
({
  country: {
    code: CountryCode.Montenegro,
    name: "Montenegro",
    native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A"
  },
  id: LocaleCode.MontenegrinMontenegro,
  language: {
    code: LanguageCode.Montenegrin,
    name: "Montenegrin",
    native: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A"
  },
  name: "Montenegrin (Montenegro)",
  native_name: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A (\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A)",
  rtl: false
});
({
  id: LocaleCode.Nepali,
  language: {
    code: LanguageCode.Nepali,
    name: "Nepali",
    native: "\u0928\u0947\u092A\u093E\u0932\u0940"
  },
  name: "Nepali",
  native_name: "\u0928\u0947\u092A\u093E\u0932\u0940",
  rtl: false
});
({
  country: {
    code: CountryCode.Nepal,
    name: "Nepal",
    native: "\u0928\u0947\u092A\u093E\u0932"
  },
  id: LocaleCode.NepaliNepal,
  language: {
    code: LanguageCode.Nepali,
    name: "Nepali",
    native: "\u0928\u0947\u092A\u093E\u0932\u0940"
  },
  name: "Nepali (Nepal)",
  native_name: "\u0928\u0947\u092A\u093E\u0932\u0940 (\u0928\u0947\u092A\u093E\u0932)",
  rtl: false
});
({
  id: LocaleCode.NorthernSotho,
  language: {
    code: LanguageCode.NorthernSotho,
    name: "Northern Sotho",
    native: "Sesotho sa Leboa"
  },
  name: "Northern Sotho",
  native_name: "Sesotho sa Leboa",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.NorthernSothoSouthAfrica,
  language: {
    code: LanguageCode.NorthernSotho,
    name: "Northern Sotho",
    native: "Sesotho sa Leboa"
  },
  name: "Northern Sotho (South Africa)",
  native_name: "Sesotho sa Leboa (South Africa)",
  rtl: false
});
({
  id: LocaleCode.Norwegian,
  language: {
    code: LanguageCode.Norwegian,
    name: "Norwegian",
    native: "Norsk"
  },
  name: "Norwegian",
  native_name: "Norsk",
  rtl: false
});
({
  country: {
    code: CountryCode.Norway,
    name: "Norway",
    native: "Norge"
  },
  id: LocaleCode.NorwegianBokmalNorway,
  language: {
    code: LanguageCode.NorwegianBokmal,
    name: "Norwegian",
    native: "Norsk"
  },
  name: "Norwegian (Bokmal)",
  native_name: "Norsk (Bokm\xE5l)",
  rtl: false
});
({
  country: {
    code: CountryCode.Norway,
    name: "Norway",
    native: "Norge"
  },
  id: LocaleCode.NorwegianNynorskNorway,
  language: {
    code: LanguageCode.NorwegianNynorsk,
    name: "Norwegian",
    native: "Norsk"
  },
  name: "Norwegian (Nynorsk)",
  native_name: "Norsk (Nynorsk)",
  rtl: false
});
({
  id: LocaleCode.Oriya,
  language: {
    code: LanguageCode.Oriya,
    name: "Oriya",
    native: "\u0B13\u0B21\u0B3C\u0B3F\u0B06"
  },
  name: "Oriya",
  native_name: "\u0B13\u0B21\u0B3C\u0B3F\u0B06",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
  },
  id: LocaleCode.OriyaIndia,
  language: {
    code: LanguageCode.Oriya,
    name: "Oriya",
    native: "\u0B13\u0B21\u0B3C\u0B3F\u0B06"
  },
  name: "Oriya (India)",
  native_name: "\u0B13\u0B21\u0B3C\u0B3F\u0B06 (\u0B2D\u0B3E\u0B30\u0B24)",
  rtl: false
});
({
  id: LocaleCode.Pashto,
  language: {
    code: LanguageCode.Pashto,
    name: "Pashto",
    native: "\u067E\u069A\u062A\u0648"
  },
  name: "Pashto",
  native_name: "\u067E\u069A\u062A\u0648",
  rtl: true
});
({
  country: {
    code: CountryCode.Afghanistan,
    name: "Afghanistan",
    native: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
  },
  id: LocaleCode.PashtoAfghanistan,
  language: {
    code: LanguageCode.Pashto,
    name: "Pashto",
    native: "\u067E\u069A\u062A\u0648"
  },
  name: "Pashto (Afghanistan)",
  native_name: "\u067E\u069A\u062A\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)",
  rtl: true
});
({
  id: LocaleCode.Persian,
  language: {
    code: LanguageCode.Persian,
    name: "Persian",
    native: "\u0641\u0627\u0631\u0633\u06CC"
  },
  name: "Persian",
  native_name: "\u0641\u0627\u0631\u0633\u06CC",
  rtl: true
});
({
  country: {
    code: CountryCode.Iran,
    name: "Iran",
    native: "\u0627\u06CC\u0631\u0627\u0646"
  },
  id: LocaleCode.PersianIran,
  language: {
    code: LanguageCode.Persian,
    name: "Persian",
    native: "\u0641\u0627\u0631\u0633\u06CC"
  },
  name: "Persian (Iran)",
  native_name: "\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)",
  rtl: true
});
({
  id: LocaleCode.Polish,
  language: {
    code: LanguageCode.Polish,
    name: "Polish",
    native: "Polski"
  },
  name: "Polish",
  native_name: "Polski",
  rtl: false
});
({
  country: {
    code: CountryCode.Poland,
    name: "Poland",
    native: "Polska"
  },
  id: LocaleCode.PolishPoland,
  language: {
    code: LanguageCode.Polish,
    name: "Polish",
    native: "Polski"
  },
  name: "Polish (Poland)",
  native_name: "Polski (Polska)",
  rtl: false
});
({
  id: LocaleCode.Portuguese,
  language: {
    code: LanguageCode.Portuguese,
    name: "Portuguese",
    native: "Portugu\xEAs"
  },
  name: "Portuguese",
  native_name: "Portugu\xEAs",
  rtl: false
});
({
  country: {
    code: CountryCode.Brazil,
    name: "Brazil",
    native: "Brasil"
  },
  id: LocaleCode.PortugueseBrazil,
  language: {
    code: LanguageCode.Portuguese,
    name: "Portuguese",
    native: "Portugu\xEAs"
  },
  name: "Portuguese (Brazil)",
  native_name: "Portugu\xEAs (Brasil)",
  rtl: false
});
({
  country: {
    code: CountryCode.Portugal,
    name: "Portugal",
    native: "Portugal"
  },
  id: LocaleCode.PortuguesePortugal,
  language: {
    code: LanguageCode.Portuguese,
    name: "Portuguese",
    native: "Portugu\xEAs"
  },
  name: "Portuguese (Portugal)",
  native_name: "Portugu\xEAs (Portugal)",
  rtl: false
});
({
  id: LocaleCode.Punjabi,
  language: {
    code: LanguageCode.Punjabi,
    name: "Punjabi",
    native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40"
  },
  name: "Punjabi",
  native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40",
  rtl: true
});
({
  country: {
    code: CountryCode.Pakistan,
    name: "Pakistan",
    native: "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646"
  },
  id: LocaleCode.PunjabiPakistan,
  language: {
    code: LanguageCode.Punjabi,
    name: "Punjabi",
    native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40"
  },
  name: "Punjabi (Pakistan)",
  native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u0A2D\u0A3E\u0A30\u0A24"
  },
  id: LocaleCode.PunjabiIndia,
  language: {
    code: LanguageCode.Punjabi,
    name: "Punjabi",
    native: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40"
  },
  name: "Punjabi (India)",
  native_name: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u0A2D\u0A3E\u0A30\u0A24)",
  rtl: true
});
({
  id: LocaleCode.Quechua,
  language: {
    code: LanguageCode.Quechua,
    name: "Quechua",
    native: "Runa Simi"
  },
  name: "Quechua",
  native_name: "Runa Simi",
  rtl: false
});
({
  country: {
    code: CountryCode.Bolivia,
    name: "Bolivia",
    native: "Bolivia"
  },
  id: LocaleCode.QuechuaBolivia,
  language: {
    code: LanguageCode.Quechua,
    name: "Quechua",
    native: "Runa Simi"
  },
  name: "Quechua (Bolivia)",
  native_name: "Runa Simi (Bolivia)",
  rtl: false
});
({
  country: {
    code: CountryCode.Ecuador,
    name: "Ecuador",
    native: "Ecuador"
  },
  id: LocaleCode.QuechuaEcuador,
  language: {
    code: LanguageCode.Quechua,
    name: "Quechua",
    native: "Runa Simi"
  },
  name: "Quechua (Ecuador)",
  native_name: "Runa Simi (Ecuador)",
  rtl: false
});
({
  country: {
    code: CountryCode.Peru,
    name: "Peru",
    native: "Per\xFA"
  },
  id: LocaleCode.QuechuaPeru,
  language: {
    code: LanguageCode.Quechua,
    name: "Quechua",
    native: "Runa Simi"
  },
  name: "Quechua (Peru)",
  native_name: "Runa Simi (Per\xFA)",
  rtl: false
});
({
  id: LocaleCode.Romanian,
  language: {
    code: LanguageCode.Romanian,
    name: "Romanian",
    native: "Rom\xE2n\u0103"
  },
  name: "Romanian",
  native_name: "Rom\xE2n\u0103",
  rtl: false
});
({
  country: {
    code: CountryCode.Romania,
    name: "Romania",
    native: "Rom\xE2nia"
  },
  id: LocaleCode.RomanianRomania,
  language: {
    code: LanguageCode.Romanian,
    name: "Romanian",
    native: "Rom\xE2n\u0103"
  },
  name: "Romanian (Romania)",
  native_name: "Rom\xE2n\u0103 (Rom\xE2nia)",
  rtl: false
});
({
  id: LocaleCode.Russian,
  language: {
    code: LanguageCode.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439",
  rtl: false
});
({
  country: {
    code: CountryCode.RussianFederation,
    name: "Russian Federation",
    native: "\u0420\u043E\u0441\u0441\u0438\u044F"
  },
  id: LocaleCode.RussianRussia,
  language: {
    code: LanguageCode.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian (Russia)",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0420\u043E\u0441\u0441\u0438\u044F)",
  rtl: false
});
({
  country: {
    code: CountryCode.Ukraine,
    name: "Ukraine",
    native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0430"
  },
  id: LocaleCode.RussianUkraine,
  language: {
    code: LanguageCode.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian (Ukraine)",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)",
  rtl: false
});
({
  country: {
    code: CountryCode.Kazakhstan,
    name: "Kazakhstan",
    native: "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D"
  },
  id: LocaleCode.RussianKazakhstan,
  language: {
    code: LanguageCode.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian (Kazakhstan)",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)",
  rtl: false
});
({
  country: {
    code: CountryCode.Kyrgyzstan,
    name: "Kyrgyzstan",
    native: "\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430"
  },
  id: LocaleCode.RussianKyrgyzstan,
  language: {
    code: LanguageCode.Russian,
    name: "Russian",
    native: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439"
  },
  name: "Russian (Kyrgyzstan)",
  native_name: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430)",
  rtl: false
});
({
  id: LocaleCode.Sanskrit,
  language: {
    code: LanguageCode.Sanskrit,
    name: "Sanskrit",
    native: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D"
  },
  name: "Sanskrit",
  native_name: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.SanskritIndia,
  language: {
    code: LanguageCode.Sanskrit,
    name: "Sanskrit",
    native: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D"
  },
  name: "Sanskrit (India)",
  native_name: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D (\u092D\u093E\u0930\u0924)",
  rtl: false
});
({
  id: LocaleCode.Sami,
  language: {
    code: LanguageCode.Sami,
    name: "Sami",
    native: "S\xE1megiella"
  },
  name: "Sami",
  native_name: "S\xE1megiella",
  rtl: false
});
({
  country: {
    code: CountryCode.Finland,
    name: "Finland",
    native: "Suomi"
  },
  id: LocaleCode.SamiFinland,
  language: {
    code: LanguageCode.Sami,
    name: "Sami",
    native: "S\xE1megiella"
  },
  name: "Sami (Finland)",
  native_name: "S\xE1megiella (Suomi)",
  rtl: false
});
({
  country: {
    code: CountryCode.Norway,
    name: "Norway",
    native: "Norge"
  },
  id: LocaleCode.SamiNorway,
  language: {
    code: LanguageCode.Sami,
    name: "Sami",
    native: "S\xE1megiella"
  },
  name: "Sami (Norway)",
  native_name: "S\xE1megiella (Norge)",
  rtl: false
});
({
  country: {
    code: CountryCode.Sweden,
    name: "Sweden",
    native: "Sverige"
  },
  id: LocaleCode.SamiSweden,
  language: {
    code: LanguageCode.Sami,
    name: "Sami",
    native: "S\xE1megiella"
  },
  name: "Sami (Sweden)",
  native_name: "S\xE1megiella (Sverige)",
  rtl: false
});
({
  id: LocaleCode.Samoan,
  language: {
    code: LanguageCode.Samoan,
    name: "Samoan",
    native: "Gagana fa\u2019a S\u0101moa"
  },
  name: "Samoan",
  native_name: "Gagana fa\u2019a S\u0101moa",
  rtl: false
});
({
  country: {
    code: CountryCode.Samoa,
    name: "Samoa",
    native: "Samoa"
  },
  id: LocaleCode.SamoanSamoa,
  language: {
    code: LanguageCode.Samoan,
    name: "Samoan",
    native: "Gagana fa\u2019a S\u0101moa"
  },
  name: "Samoan (Samoa)",
  native_name: "Gagana fa\u2019a S\u0101moa (Samoa)",
  rtl: false
});
({
  id: LocaleCode.Serbian,
  language: {
    code: LanguageCode.Serbian,
    name: "Serbian (Latin)",
    native: "Srpski (Latinica)"
  },
  name: "Serbian (Latin)",
  native_name: "Srpski (Latinica)",
  rtl: false
});
({
  country: {
    code: CountryCode.BosniaAndHerzegovina,
    name: "Bosnia and Herzegovina",
    native: "Bosna i Hercegovina"
  },
  id: LocaleCode.SerbianBosniaAndHerzegovina,
  language: {
    code: LanguageCode.Serbian,
    name: "Serbian (Latin)",
    native: "Srpski (Latinica)"
  },
  name: "Serbian (Latin) (Bosnia and Herzegovina)",
  native_name: "Srpski (Latinica) (Bosna i Hercegovina)",
  rtl: false
});
({
  country: {
    code: CountryCode.SerbiaAndMontenegro,
    name: "Serbia and Montenegro",
    native: "Srbija i Crna Gora"
  },
  id: LocaleCode.SerbianSerbiaAndMontenegro,
  language: {
    code: LanguageCode.Serbian,
    name: "Serbian (Latin)",
    native: "Srpski (Latinica)"
  },
  name: "Serbian (Latin) (Serbia and Montenegro)",
  native_name: "Srpski (Latinica) (Srbija i Crna Gora)",
  rtl: false
});
({
  id: LocaleCode.SerbianCyrillic,
  language: {
    code: LanguageCode.SerbianCyrillic,
    name: "Serbian",
    native: "\u0421\u0440\u043F\u0441\u043A\u0438"
  },
  name: "Serbian (Cyrillic)",
  native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430)",
  rtl: false
});
({
  country: {
    code: CountryCode.BosniaAndHerzegovina,
    name: "Bosnia and Herzegovina",
    native: "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430"
  },
  id: LocaleCode.SerbianCyrillicBosniaAndHerzegovina,
  language: {
    code: LanguageCode.SerbianCyrillic,
    name: "Serbian",
    native: "\u0421\u0440\u043F\u0441\u043A\u0438"
  },
  name: "Serbian (Cyrillic, Bosnia and Herzegovina)",
  native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430)",
  rtl: false
});
({
  country: {
    code: CountryCode.SerbiaAndMontenegro,
    name: "Serbia and Montenegro",
    native: "\u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430"
  },
  id: LocaleCode.SerbianCyrillicSerbiaAndMontenegro,
  language: {
    code: LanguageCode.SerbianCyrillic,
    name: "Serbian",
    native: "\u0421\u0440\u043F\u0441\u043A\u0438"
  },
  name: "Serbian (Cyrillic, Serbia and Montenegro)",
  native_name: "\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430)",
  rtl: false
});
({
  id: LocaleCode.Slovak,
  language: {
    code: LanguageCode.Slovak,
    name: "Slovak",
    native: "Sloven\u010Dina"
  },
  name: "Slovak",
  native_name: "Sloven\u010Dina",
  rtl: false
});
({
  country: {
    code: CountryCode.Slovakia,
    name: "Slovakia",
    native: "Slovensko"
  },
  id: LocaleCode.SlovakSlovakia,
  language: {
    code: LanguageCode.Slovak,
    name: "Slovak",
    native: "Sloven\u010Dina"
  },
  name: "Slovak (Slovakia)",
  native_name: "Sloven\u010Dina (Slovensko)",
  rtl: false
});
({
  id: LocaleCode.Slovenian,
  language: {
    code: LanguageCode.Slovenian,
    name: "Slovenian",
    native: "Sloven\u0161\u010Dina"
  },
  name: "Slovenian",
  native_name: "Sloven\u0161\u010Dina",
  rtl: false
});
({
  country: {
    code: CountryCode.Slovenia,
    name: "Slovenia",
    native: "Slovenija"
  },
  id: LocaleCode.SlovenianSlovenia,
  language: {
    code: LanguageCode.Slovenian,
    name: "Slovenian",
    native: "Sloven\u0161\u010Dina"
  },
  name: "Slovenian (Slovenia)",
  native_name: "Sloven\u0161\u010Dina (Slovenija)",
  rtl: false
});
({
  id: LocaleCode.Somali,
  language: {
    code: LanguageCode.Somali,
    name: "Somali",
    native: "Soomaaliga"
  },
  name: "Somali",
  native_name: "Soomaaliga",
  rtl: true
});
({
  country: {
    code: CountryCode.Somalia,
    name: "Somalia",
    native: "Soomaaliya"
  },
  id: LocaleCode.SomaliSomalia,
  language: {
    code: LanguageCode.Somali,
    name: "Somali",
    native: "Soomaaliga"
  },
  name: "Somali (Somalia)",
  native_name: "Soomaaliga (Soomaaliya)",
  rtl: true
});
({
  id: LocaleCode.Spanish,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish",
  native_name: "Espa\xF1ol",
  rtl: false
});
({
  country: {
    code: CountryCode.Argentina,
    name: "Argentina",
    native: "Argentina"
  },
  id: LocaleCode.SpanishArgentina,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Argentina)",
  native_name: "Espa\xF1ol (Argentina)",
  rtl: false
});
({
  country: {
    code: CountryCode.Bolivia,
    name: "Bolivia",
    native: "Bolivia"
  },
  id: LocaleCode.SpanishBolivia,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Bolivia)",
  native_name: "Espa\xF1ol (Bolivia)",
  rtl: false
});
({
  country: {
    code: CountryCode.Chile,
    name: "Chile",
    native: "Chile"
  },
  id: LocaleCode.SpanishChile,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Chile)",
  native_name: "Espa\xF1ol (Chile)",
  rtl: false
});
({
  country: {
    code: CountryCode.Colombia,
    name: "Colombia",
    native: "Colombia"
  },
  id: LocaleCode.SpanishColombia,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Colombia)",
  native_name: "Espa\xF1ol (Colombia)",
  rtl: false
});
({
  country: {
    code: CountryCode.CostaRica,
    name: "Costa Rica",
    native: "Costa Rica"
  },
  id: LocaleCode.SpanishCostaRica,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Costa Rica)",
  native_name: "Espa\xF1ol (Costa Rica)",
  rtl: false
});
({
  country: {
    code: CountryCode.Cuba,
    name: "Cuba",
    native: "Cuba"
  },
  id: LocaleCode.SpanishCuba,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Cuba)",
  native_name: "Espa\xF1ol (Cuba)",
  rtl: false
});
({
  country: {
    code: CountryCode.DominicanRepublic,
    name: "Dominican Republic",
    native: "Rep\xFAblica Dominicana"
  },
  id: LocaleCode.SpanishDominicanRepublic,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Dominican Republic)",
  native_name: "Espa\xF1ol (Rep\xFAblica Dominicana)",
  rtl: false
});
({
  country: {
    code: CountryCode.Ecuador,
    name: "Ecuador",
    native: "Ecuador"
  },
  id: LocaleCode.SpanishEcuador,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Ecuador)",
  native_name: "Espa\xF1ol (Ecuador)",
  rtl: false
});
({
  country: {
    code: CountryCode.ElSalvador,
    name: "El Salvador",
    native: "El Salvador"
  },
  id: LocaleCode.SpanishElSalvador,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (El Salvador)",
  native_name: "Espa\xF1ol (El Salvador)",
  rtl: false
});
({
  country: {
    code: CountryCode.EquatorialGuinea,
    name: "Equatorial Guinea",
    native: "Guinea Ecuatorial"
  },
  id: LocaleCode.SpanishEquatorialGuinea,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Equatorial Guinea)",
  native_name: "Espa\xF1ol (Guinea Ecuatorial)",
  rtl: false
});
({
  country: {
    code: CountryCode.Guatemala,
    name: "Guatemala",
    native: "Guatemala"
  },
  id: LocaleCode.SpanishGuatemala,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Guatemala)",
  native_name: "Espa\xF1ol (Guatemala)",
  rtl: false
});
({
  country: {
    code: CountryCode.Honduras,
    name: "Honduras",
    native: "Honduras"
  },
  id: LocaleCode.SpanishHonduras,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Honduras)",
  native_name: "Espa\xF1ol (Honduras)",
  rtl: false
});
({
  country: {
    code: CountryCode.Mexico,
    name: "Mexico",
    native: "M\xE9xico"
  },
  id: LocaleCode.SpanishMexico,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Mexico)",
  native_name: "Espa\xF1ol (M\xE9xico)",
  rtl: false
});
({
  country: {
    code: CountryCode.Nicaragua,
    name: "Nicaragua",
    native: "Nicaragua"
  },
  id: LocaleCode.SpanishNicaragua,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Nicaragua)",
  native_name: "Espa\xF1ol (Nicaragua)",
  rtl: false
});
({
  country: {
    code: CountryCode.Panama,
    name: "Panama",
    native: "Panam\xE1"
  },
  id: LocaleCode.SpanishPanama,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Panama)",
  native_name: "Espa\xF1ol (Panam\xE1)",
  rtl: false
});
({
  country: {
    code: CountryCode.Paraguay,
    name: "Paraguay",
    native: "Paraguay"
  },
  id: LocaleCode.SpanishParaguay,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Paraguay)",
  native_name: "Espa\xF1ol (Paraguay)",
  rtl: false
});
({
  country: {
    code: CountryCode.Peru,
    name: "Peru",
    native: "Per\xFA"
  },
  id: LocaleCode.SpanishPeru,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Peru)",
  native_name: "Espa\xF1ol (Per\xFA)",
  rtl: false
});
({
  country: {
    code: CountryCode.PuertoRico,
    name: "Puerto Rico",
    native: "Puerto Rico"
  },
  id: LocaleCode.SpanishPuertoRico,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Puerto Rico)",
  native_name: "Espa\xF1ol (Puerto Rico)",
  rtl: false
});
({
  country: {
    code: CountryCode.Uruguay,
    name: "Uruguay",
    native: "Uruguay"
  },
  id: LocaleCode.SpanishUruguay,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Uruguay)",
  native_name: "Espa\xF1ol (Uruguay)",
  rtl: false
});
({
  country: {
    code: CountryCode.Venezuela,
    name: "Venezuela",
    native: "Venezuela"
  },
  id: LocaleCode.SpanishVenezuela,
  language: {
    code: LanguageCode.Spanish,
    name: "Spanish",
    native: "Espa\xF1ol"
  },
  name: "Spanish (Venezuela)",
  native_name: "Espa\xF1ol (Venezuela)",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.SutuSouthAfrica,
  language: {
    code: LanguageCode.Sutu,
    name: "Sutu",
    native: "Sesotho"
  },
  name: "Sutu (South Africa)",
  native_name: "Sesotho (Afrika Borwa)",
  rtl: false
});
({
  id: LocaleCode.Swahili,
  language: {
    code: LanguageCode.Swahili,
    name: "Swahili",
    native: "Kiswahili"
  },
  name: "Swahili",
  native_name: "Kiswahili",
  rtl: false
});
({
  country: {
    code: CountryCode.Kenya,
    name: "Kenya",
    native: "Kenya"
  },
  id: LocaleCode.SwahiliKenya,
  language: {
    code: LanguageCode.Swahili,
    name: "Swahili",
    native: "Kiswahili"
  },
  name: "Swahili (Kenya)",
  native_name: "Kiswahili (Kenya)",
  rtl: false
});
({
  id: LocaleCode.Swedish,
  language: {
    code: LanguageCode.Swedish,
    name: "Swedish",
    native: "Svenska"
  },
  name: "Swedish",
  native_name: "Svenska",
  rtl: false
});
({
  country: {
    code: CountryCode.Finland,
    name: "Finland",
    native: "Suomi"
  },
  id: LocaleCode.SwedishFinland,
  language: {
    code: LanguageCode.Swedish,
    name: "Swedish",
    native: "Svenska"
  },
  name: "Swedish (Finland)",
  native_name: "Svenska (Finland)",
  rtl: false
});
({
  country: {
    code: CountryCode.Sweden,
    name: "Sweden",
    native: "Sverige"
  },
  id: LocaleCode.SwedishSweden,
  language: {
    code: LanguageCode.Swedish,
    name: "Swedish",
    native: "Svenska"
  },
  name: "Swedish (Sweden)",
  native_name: "Svenska (Sverige)",
  rtl: false
});
({
  id: LocaleCode.Syriac,
  language: {
    code: LanguageCode.Syriac,
    name: "Syriac",
    native: "\u0723\u0718\u072A\u071D\u071D\u0710"
  },
  name: "Syriac",
  native_name: "\u0723\u0718\u072A\u071D\u071D\u0710",
  rtl: true
});
({
  country: {
    code: CountryCode.Syria,
    name: "Syria",
    native: "\u0633\u0648\u0631\u064A\u0627"
  },
  id: LocaleCode.SyriacSyria,
  language: {
    code: LanguageCode.Syriac,
    name: "Syriac",
    native: "\u0723\u0718\u072A\u071D\u071D\u0710"
  },
  name: "Syriac (Syria)",
  native_name: "\u0723\u0718\u072A\u071D\u071D\u0710 (\u0633\u0648\u0631\u064A\u0627)",
  rtl: true
});
({
  id: LocaleCode.Tajik,
  language: {
    code: LanguageCode.Tajik,
    name: "Tajik",
    native: "\u0422\u043E\u04B7\u0438\u043A\u04E3"
  },
  name: "Tajik",
  native_name: "\u0422\u043E\u04B7\u0438\u043A\u04E3",
  rtl: false
});
({
  country: {
    code: CountryCode.Tajikistan,
    name: "Tajikistan",
    native: "\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D"
  },
  id: LocaleCode.TajikTajikistan,
  language: {
    code: LanguageCode.Tajik,
    name: "Tajik",
    native: "\u0422\u043E\u04B7\u0438\u043A\u04E3"
  },
  name: "Tajik (Tajikistan)",
  native_name: "\u0422\u043E\u04B7\u0438\u043A\u04E3 (\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D)",
  rtl: false
});
({
  id: LocaleCode.Tagalog,
  language: {
    code: LanguageCode.Tagalog,
    name: "Tagalog",
    native: "Tagalog"
  },
  name: "Tagalog",
  native_name: "Tagalog",
  rtl: false
});
({
  country: {
    code: CountryCode.Philippines,
    name: "Philippines",
    native: "Pilipinas"
  },
  id: LocaleCode.TagalogPhilippines,
  language: {
    code: LanguageCode.Tagalog,
    name: "Tagalog",
    native: "Tagalog"
  },
  name: "Tagalog (Philippines)",
  native_name: "Tagalog (Pilipinas)",
  rtl: false
});
({
  id: LocaleCode.Tamil,
  language: {
    code: LanguageCode.Tamil,
    name: "Tamil",
    native: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD"
  },
  name: "Tamil",
  native_name: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
  },
  id: LocaleCode.TamilIndia,
  language: {
    code: LanguageCode.Tamil,
    name: "Tamil",
    native: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD"
  },
  name: "Tamil (India)",
  native_name: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)",
  rtl: false
});
({
  id: LocaleCode.Telugu,
  language: {
    code: LanguageCode.Telugu,
    name: "Telugu",
    native: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41"
  },
  name: "Telugu",
  native_name: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02"
  },
  id: LocaleCode.TeluguIndia,
  language: {
    code: LanguageCode.Telugu,
    name: "Telugu",
    native: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41"
  },
  name: "Telugu (India)",
  native_name: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41 (\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02)",
  rtl: false
});
({
  id: LocaleCode.Thai,
  language: {
    code: LanguageCode.Thai,
    name: "Thai",
    native: "\u0E44\u0E17\u0E22"
  },
  name: "Thai",
  native_name: "\u0E44\u0E17\u0E22",
  rtl: false
});
({
  country: {
    code: CountryCode.Thailand,
    name: "Thailand",
    native: "\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22"
  },
  id: LocaleCode.ThaiThailand,
  language: {
    code: LanguageCode.Thai,
    name: "Thai",
    native: "\u0E44\u0E17\u0E22"
  },
  name: "Thai (Thailand)",
  native_name: "\u0E44\u0E17\u0E22 (\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22)",
  rtl: false
});
({
  id: LocaleCode.Tibetan,
  language: {
    code: LanguageCode.Tibetan,
    name: "Tibetan",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Tibetan",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42",
  rtl: false
});
({
  country: {
    code: CountryCode.China,
    name: "China",
    native: "\u4E2D\u56FD"
  },
  id: LocaleCode.TibetanChina,
  language: {
    code: LanguageCode.Tibetan,
    name: "Tibetan",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Tibetan (China)",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42)",
  rtl: false
});
({
  country: {
    code: CountryCode.Bhutan,
    name: "Bhutan",
    native: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D"
  },
  id: LocaleCode.TibetanBhutan,
  language: {
    code: LanguageCode.Tibetan,
    name: "Tibetan",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Tibetan (Bhutan)",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D)",
  rtl: false
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
  },
  id: LocaleCode.TibetanIndia,
  language: {
    code: LanguageCode.Tibetan,
    name: "Tibetan",
    native: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42"
  },
  name: "Tibetan (India)",
  native_name: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)",
  rtl: false
});
({
  id: LocaleCode.Tsonga,
  language: {
    code: LanguageCode.Tsonga,
    name: "Tsonga",
    native: "Xitsonga"
  },
  name: "Tsonga",
  native_name: "Xitsonga",
  rtl: false
});
({
  id: LocaleCode.Tswana,
  language: {
    code: LanguageCode.Tswana,
    name: "Tswana",
    native: "Setswana"
  },
  name: "Tswana",
  native_name: "Setswana",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.TswanaSouthAfrica,
  language: {
    code: LanguageCode.Tswana,
    name: "Tswana",
    native: "Setswana"
  },
  name: "Tswana (South Africa)",
  native_name: "Setswana (South Africa)",
  rtl: false
});
({
  id: LocaleCode.Turkish,
  language: {
    code: LanguageCode.Turkish,
    name: "Turkish",
    native: "T\xFCrk\xE7e"
  },
  name: "Turkish",
  native_name: "T\xFCrk\xE7e",
  rtl: false
});
({
  country: {
    code: CountryCode.Turkey,
    name: "Turkey",
    native: "T\xFCrkiye"
  },
  id: LocaleCode.TurkishTurkey,
  language: {
    code: LanguageCode.Turkish,
    name: "Turkish",
    native: "T\xFCrk\xE7e"
  },
  name: "Turkish (Turkey)",
  native_name: "T\xFCrk\xE7e (T\xFCrkiye)",
  rtl: false
});
({
  id: LocaleCode.Ukrainian,
  language: {
    code: LanguageCode.Ukrainian,
    name: "Ukrainian",
    native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430"
  },
  name: "Ukrainian",
  native_name: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430",
  rtl: false
});
({
  country: {
    code: CountryCode.Ukraine,
    name: "Ukraine",
    native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0430"
  },
  id: LocaleCode.UkrainianUkraine,
  language: {
    code: LanguageCode.Ukrainian,
    name: "Ukrainian",
    native: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430"
  },
  name: "Ukrainian (Ukraine)",
  native_name: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)",
  rtl: false
});
({
  id: LocaleCode.Urdu,
  language: {
    code: LanguageCode.Urdu,
    name: "Urdu",
    native: "\u0627\u0631\u062F\u0648"
  },
  name: "Urdu",
  native_name: "\u0627\u0631\u062F\u0648",
  rtl: true
});
({
  country: {
    code: CountryCode.Afghanistan,
    name: "Afghanistan",
    native: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
  },
  id: LocaleCode.UrduAfghanistan,
  language: {
    code: LanguageCode.Urdu,
    name: "Urdu",
    native: "\u0627\u0631\u062F\u0648"
  },
  name: "Urdu (Afghanistan)",
  native_name: "\u0627\u0631\u062F\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)",
  rtl: true
});
({
  country: {
    code: CountryCode.India,
    name: "India",
    native: "\u092D\u093E\u0930\u0924"
  },
  id: LocaleCode.UrduIndia,
  language: {
    code: LanguageCode.Urdu,
    name: "Urdu",
    native: "\u0627\u0631\u062F\u0648"
  },
  name: "Urdu (India)",
  native_name: "\u0627\u0631\u062F\u0648 (\u092D\u093E\u0930\u0924)",
  rtl: true
});
({
  country: {
    code: CountryCode.Pakistan,
    name: "Pakistan",
    native: "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646"
  },
  id: LocaleCode.UrduPakistan,
  language: {
    code: LanguageCode.Urdu,
    name: "Urdu",
    native: "\u0627\u0631\u062F\u0648"
  },
  name: "Urdu (Pakistan)",
  native_name: "\u0627\u0631\u062F\u0648 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)",
  rtl: true
});
({
  id: LocaleCode.Uzbek,
  language: {
    code: LanguageCode.Uzbek,
    name: "Uzbek",
    native: "O\u02BBzbekcha"
  },
  name: "Uzbek",
  native_name: "O\u02BBzbekcha",
  rtl: false
});
({
  country: {
    code: CountryCode.Uzbekistan,
    name: "Uzbekistan",
    native: "O\u02BBzbekiston"
  },
  id: LocaleCode.UzbekUzbekistan,
  language: {
    code: LanguageCode.Uzbek,
    name: "Uzbek",
    native: "O\u02BBzbekcha"
  },
  name: "Uzbek (Latin, Uzbekistan)",
  native_name: "O\u02BBzbekcha (O\u02BBzbekiston)",
  rtl: false
});
({
  country: {
    code: CountryCode.Uzbekistan,
    name: "Uzbekistan",
    native: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D"
  },
  id: LocaleCode.UzbekCyrillic,
  language: {
    code: LanguageCode.Uzbek,
    name: "Uzbek",
    native: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D"
  },
  name: "Uzbek (Cyrillic)",
  native_name: "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D (\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D)",
  rtl: false
});
({
  id: LocaleCode.Vietnamese,
  language: {
    code: LanguageCode.Vietnamese,
    name: "Vietnamese",
    native: "Ti\u1EBFng Vi\u1EC7t"
  },
  name: "Vietnamese",
  native_name: "Ti\u1EBFng Vi\u1EC7t",
  rtl: false
});
({
  country: {
    code: CountryCode.Vietnam,
    name: "Vietnam",
    native: "Vi\u1EC7t Nam"
  },
  id: LocaleCode.VietnameseVietnam,
  language: {
    code: LanguageCode.Vietnamese,
    name: "Vietnamese",
    native: "Ti\u1EBFng Vi\u1EC7t"
  },
  name: "Vietnamese (Vietnam)",
  native_name: "Ti\u1EBFng Vi\u1EC7t (Vi\u1EC7t Nam)",
  rtl: false
});
({
  id: LocaleCode.Welsh,
  language: {
    code: LanguageCode.Welsh,
    name: "Welsh",
    native: "Cymraeg"
  },
  name: "Welsh",
  native_name: "Cymraeg",
  rtl: false
});
({
  country: {
    code: CountryCode.UnitedKingdom,
    name: "United Kingdom",
    native: "United Kingdom"
  },
  id: LocaleCode.WelshUnitedKingdom,
  language: {
    code: LanguageCode.Welsh,
    name: "Welsh",
    native: "Cymraeg"
  },
  name: "Welsh (United Kingdom)",
  native_name: "Cymraeg (United Kingdom)",
  rtl: false
});
({
  id: LocaleCode.Xhosa,
  language: {
    code: LanguageCode.Xhosa,
    name: "Xhosa",
    native: "isiXhosa"
  },
  name: "Xhosa",
  native_name: "isiXhosa",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.XhosaSouthAfrica,
  language: {
    code: LanguageCode.Xhosa,
    name: "Xhosa",
    native: "isiXhosa"
  },
  name: "Xhosa (South Africa)",
  native_name: "isiXhosa (South Africa)",
  rtl: false
});
({
  id: LocaleCode.Yiddish,
  language: {
    code: LanguageCode.Yiddish,
    name: "Yiddish",
    native: "\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9"
  },
  name: "Yiddish",
  native_name: "\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9",
  rtl: false
});
({
  id: LocaleCode.Yoruba,
  language: {
    code: LanguageCode.Yoruba,
    name: "Yoruba",
    native: "Yor\xF9b\xE1"
  },
  name: "Yoruba",
  native_name: "Yor\xF9b\xE1",
  rtl: false
});
({
  country: {
    code: CountryCode.Nigeria,
    name: "Nigeria",
    native: "Nigeria"
  },
  id: LocaleCode.YorubaNigeria,
  language: {
    code: LanguageCode.Yoruba,
    name: "Yoruba",
    native: "Yor\xF9b\xE1"
  },
  name: "Yoruba (Nigeria)",
  native_name: "Yor\xF9b\xE1 (Nigeria)",
  rtl: false
});
({
  id: LocaleCode.Zulu,
  language: {
    code: LanguageCode.Zulu,
    name: "Zulu",
    native: "isiZulu"
  },
  name: "Zulu",
  native_name: "isiZulu",
  rtl: false
});
({
  country: {
    code: CountryCode.SouthAfrica,
    name: "South Africa",
    native: "South Africa"
  },
  id: LocaleCode.ZuluSouthAfrica,
  language: {
    code: LanguageCode.Zulu,
    name: "Zulu",
    native: "isiZulu"
  },
  name: "Zulu (South Africa)",
  native_name: "isiZulu (South Africa)",
  rtl: false
});
({
  id: TimezoneRegions.AfricaAbidjan,
  name: "Africa/Abidjan",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaAccra,
  name: "Africa/Accra",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaAddisAbaba,
  name: "Africa/Addis_Ababa",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaAlgiers,
  name: "Africa/Algiers",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.AfricaAsmara,
  name: "Africa/Asmara",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaBamako,
  name: "Africa/Bamako",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaBangui,
  name: "Africa/Bangui",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaBanjul,
  name: "Africa/Banjul",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaBissau,
  name: "Africa/Bissau",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaBlantyre,
  name: "Africa/Blantyre",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaBrazzaville,
  name: "Africa/Brazzaville",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaBujumbura,
  name: "Africa/Bujumbura",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaCairo,
  name: "Africa/Cairo",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AfricaCasablanca,
  name: "Africa/Casablanca",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WesternEuropeanTime
});
({
  id: TimezoneRegions.AfricaCeuta,
  name: "Africa/Ceuta",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.AfricaConakry,
  name: "Africa/Conakry",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaDakar,
  name: "Africa/Dakar",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaDarEsSalaam,
  name: "Africa/Dar_es_Salaam",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaDjibouti,
  name: "Africa/Djibouti",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaDouala,
  name: "Africa/Douala",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaElAaiun,
  name: "Africa/El_Aaiun",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaFreetown,
  name: "Africa/Freetown",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaGaborone,
  name: "Africa/Gaborone",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaHarare,
  name: "Africa/Harare",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaJohannesburg,
  name: "Africa/Johannesburg",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.SouthAfricanStandardTime
});
({
  id: TimezoneRegions.AfricaJuba,
  name: "Africa/Juba",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaKampala,
  name: "Africa/Kampala",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaKhartoum,
  name: "Africa/Khartoum",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaKigali,
  name: "Africa/Kigali",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaKinshasa,
  name: "Africa/Kinshasa",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaLagos,
  name: "Africa/Lagos",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaLibreville,
  name: "Africa/Libreville",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaLome,
  name: "Africa/Lome",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaLuanda,
  name: "Africa/Luanda",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaLubumbashi,
  name: "Africa/Lubumbashi",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaLusaka,
  name: "Africa/Lusaka",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaMalabo,
  name: "Africa/Malabo",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaMaputo,
  name: "Africa/Maputo",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.CentralAfricaTime
});
({
  id: TimezoneRegions.AfricaMaseru,
  name: "Africa/Maseru",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.SouthAfricanStandardTime
});
({
  id: TimezoneRegions.AfricaMbabane,
  name: "Africa/Mbabane",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.SouthAfricanStandardTime
});
({
  id: TimezoneRegions.AfricaMogadishu,
  name: "Africa/Mogadishu",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaMonrovia,
  name: "Africa/Monrovia",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaNairobi,
  name: "Africa/Nairobi",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.AfricaNdjamena,
  name: "Africa/Ndjamena",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaNiamey,
  name: "Africa/Niamey",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaNouakchott,
  name: "Africa/Nouakchott",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.AfricaOuagadougou,
  name: "Africa/Ouagadougou",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaPortoNovo,
  name: "Africa/Porto-Novo",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AfricaSaoTome,
  name: "Africa/SaoTome",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaTripoli,
  name: "Africa/Tripoli",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaTunis,
  name: "Africa/Tunis",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AfricaWindhoek,
  name: "Africa/Windhoek",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.WestAfricaTime
});
({
  id: TimezoneRegions.AmericaAdak,
  name: "America/Adak",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.HawaiiAleutianStandardTime
});
({
  id: TimezoneRegions.AmericaAnchorage,
  name: "America/Anchorage",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.AlaskaStandardTime
});
({
  id: TimezoneRegions.AmericaAnguilla,
  name: "America/Anguilla",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaAntigua,
  name: "America/Antigua",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaAraguaina,
  name: "America/Araguaina",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaArgentinaBuenosAires,
  name: "America/Argentina/Buenos_Aires",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaCatamarca,
  name: "America/Argentina/Catamarca",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaCordoba,
  name: "America/Argentina/Cordoba",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaJujuy,
  name: "America/Argentina/Jujuy",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaLaRioja,
  name: "America/Argentina/La_Rioja",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaMendoza,
  name: "America/Argentina/Mendoza",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaRioGallegos,
  name: "America/Argentina/Rio_Gallegos",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaSalta,
  name: "America/Argentina/Salta",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaSanJuan,
  name: "America/Argentina/San_Juan",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaSanLuis,
  name: "America/Argentina/San_Luis",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaTucuman,
  name: "America/Argentina/Tucuman",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaArgentinaUshuaia,
  name: "America/Argentina/Ushuaia",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaAruba,
  name: "America/Aruba",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaAsuncion,
  name: "America/Asuncion",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.ParaguayTime
});
({
  id: TimezoneRegions.AmericaAtikokan,
  name: "America/Atikokan",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaAtka,
  name: "America/Atka",
  offset: TimezoneOffset.UTC_MINUS_10,
  timezone: Timezones.HawaiiAleutianStandardTime
});
({
  id: TimezoneRegions.AmericaBahia,
  name: "America/Bahia",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaBahiaBanderas,
  name: "America/Bahia_Banderas",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaBarbados,
  name: "America/Barbados",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaBelem,
  name: "America/Belem",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaBelize,
  name: "America/Belize",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaBlancSablon,
  name: "America/Blanc-Sablon",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaBoaVista,
  name: "America/Boa_Vista",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AmazonTime
});
({
  id: TimezoneRegions.AmericaBogota,
  name: "America/Bogota",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.ColombiaTime
});
({
  id: TimezoneRegions.AmericaBoise,
  name: "America/Boise",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaCambridgeBay,
  name: "America/Cambridge_Bay",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaCampoGrande,
  name: "America/Campo_Grande",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AmazonTime
});
({
  id: TimezoneRegions.AmericaCancun,
  name: "America/Cancun",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaCaracas,
  name: "America/Caracas",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.VenezuelaStandardTime
});
({
  id: TimezoneRegions.AmericaCayenne,
  name: "America/Cayenne",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.FrenchGuianaTime
});
({
  id: TimezoneRegions.AmericaCayman,
  name: "America/Cayman",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaChicago,
  name: "America/Chicago",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaChihuahua,
  name: "America/Chihuahua",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaCoralHarbour,
  name: "America/Coral_Harbour",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaCordoba,
  name: "America/Cordoba",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ArgentinaTime
});
({
  id: TimezoneRegions.AmericaCostaRica,
  name: "America/Costa_Rica",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaCreston,
  name: "America/Creston",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaCuiaba,
  name: "America/Cuiaba",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AmazonTime
});
({
  id: TimezoneRegions.AmericaCuracao,
  name: "America/Curacao",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaDanmarkshavn,
  name: "America/Danmarkshavn",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.AmericaDawson,
  name: "America/Dawson",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaDawsonCreek,
  name: "America/Dawson_Creek",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaDenver,
  name: "America/Denver",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaDetroit,
  name: "America/Detroit",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaDominica,
  name: "America/Dominica",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaEdmonton,
  name: "America/Edmonton",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaEirunepe,
  name: "America/Eirunepe",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.AcreTime
});
({
  id: TimezoneRegions.AmericaElSalvador,
  name: "America/El_Salvador",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaFortaleza,
  name: "America/Fortaleza",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaGlaceBay,
  name: "America/Glace_Bay",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaGodthab,
  name: "America/Godthab",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.WestGreenlandTime
});
({
  id: TimezoneRegions.AmericaGooseBay,
  name: "America/Goose_Bay",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaGrandTurk,
  name: "America/Grand_Turk",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaGrenada,
  name: "America/Grenada",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaGuadeloupe,
  name: "America/Guadeloupe",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaGuatemala,
  name: "America/Guatemala",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaGuayaquil,
  name: "America/Guayaquil",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EcuadorTime
});
({
  id: TimezoneRegions.AmericaGuyana,
  name: "America/Guyana",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaHalifax,
  name: "America/Halifax",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaHavana,
  name: "America/Havana",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.CubaStandardTime
});
({
  id: TimezoneRegions.AmericaHermosillo,
  name: "America/Hermosillo",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaIndianapolis,
  name: "America/Indiana/Indianapolis",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaKnox,
  name: "America/Indiana/Knox",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaMarengo,
  name: "America/Indiana/Marengo",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaPetersburg,
  name: "America/Indiana/Petersburg",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaTellCity,
  name: "America/Indiana/Tell_City",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaVevay,
  name: "America/Indiana/Vevay",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaVincennes,
  name: "America/Indiana/Vincennes",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaIndianaWinamac,
  name: "America/Indiana/Winamac",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaInuvik,
  name: "America/Inuvik",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaIqaluit,
  name: "America/Iqaluit",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaJamaica,
  name: "America/Jamaica",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaJuneau,
  name: "America/Juneau",
  offset: TimezoneOffset.UTC_MINUS_9,
  timezone: Timezones.AlaskaStandardTime
});
({
  id: TimezoneRegions.AmericaKentuckyLouisville,
  name: "America/Kentucky/Louisville",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaKentuckyMonticello,
  name: "America/Kentucky/Monticello",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaKralendijk,
  name: "America/Kralendijk",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaLaPaz,
  name: "America/La_Paz",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.BoliviaTime
});
({
  id: TimezoneRegions.AmericaLima,
  name: "America/Lima",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.PeruTime
});
({
  id: TimezoneRegions.AmericaLosAngeles,
  name: "America/Los_Angeles",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaLouisville,
  name: "America/Louisville",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaLowerPrinces,
  name: "America/Lower_Princes",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaMaceio,
  name: "America/Maceio",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaManagua,
  name: "America/Managua",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaManaus,
  name: "America/Manaus",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AmazonTime
});
({
  id: TimezoneRegions.AmericaMarigot,
  name: "America/Marigot",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaMartinique,
  name: "America/Martinique",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaMatamoros,
  name: "America/Matamoros",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaMazatlan,
  name: "America/Mazatlan",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaMenominee,
  name: "America/Menominee",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaMerida,
  name: "America/Merida",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaMetlakatla,
  name: "America/Metlakatla",
  offset: TimezoneOffset.UTC_MINUS_9,
  timezone: Timezones.AlaskaStandardTime
});
({
  id: TimezoneRegions.AmericaMexicoCity,
  name: "America/Mexico_City",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaMiquelon,
  name: "America/Miquelon",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.SaintPierreAndMiquelonStandardTime
});
({
  id: TimezoneRegions.AmericaMoncton,
  name: "America/Moncton",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaMonterrey,
  name: "America/Monterrey",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaMontevideo,
  name: "America/Montevideo",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.UruguayStandardTime
});
({
  id: TimezoneRegions.AmericaMontreal,
  name: "America/Montreal",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaMontserrat,
  name: "America/Montserrat",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaNassau,
  name: "America/Nassau",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaNewYork,
  name: "America/New_York",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaNipigon,
  name: "America/Nipigon",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaNome,
  name: "America/Nome",
  offset: TimezoneOffset.UTC_MINUS_9,
  timezone: Timezones.AlaskaStandardTime
});
({
  id: TimezoneRegions.AmericaNoronha,
  name: "America/Noronha",
  offset: TimezoneOffset.UTC_MINUS_2,
  timezone: Timezones.FernandoDeNoronhaTime
});
({
  id: TimezoneRegions.AmericaNorthDakotaBeulah,
  name: "America/North_Dakota/Beulah",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaNorthDakotaCenter,
  name: "America/North_Dakota/Center",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaNorthDakotaNewSalem,
  name: "America/North_Dakota/New_Salem",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaOjinaga,
  name: "America/Ojinaga",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaPanama,
  name: "America/Panama",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaPangnirtung,
  name: "America/Pangnirtung",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaParamaribo,
  name: "America/Paramaribo",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.SurinameTime
});
({
  id: TimezoneRegions.AmericaPhoenix,
  name: "America/Phoenix",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaPortAuPrince,
  name: "America/Port-au-Prince",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaPortOfSpain,
  name: "America/Port_of_Spain",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaPortoVelho,
  name: "America/Porto_Velho",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AmazonTime
});
({
  id: TimezoneRegions.AmericaPuertoRico,
  name: "America/Puerto_Rico",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaRainyRiver,
  name: "America/Rainy_River",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaRankinInlet,
  name: "America/Rankin_Inlet",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaRecife,
  name: "America/Recife",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaRegina,
  name: "America/Regina",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaResolute,
  name: "America/Resolute",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaRioBranco,
  name: "America/Rio_Branco",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.AcreTime
});
({
  id: TimezoneRegions.AmericaSantaIsabel,
  name: "America/Santa_Isabel",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaSantarem,
  name: "America/Santarem",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaSantiago,
  name: "America/Santiago",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.ChileStandardTime
});
({
  id: TimezoneRegions.AmericaSantoDomingo,
  name: "America/Santo_Domingo",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaSaoPaulo,
  name: "America/Sao_Paulo",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.BrasiliaTime
});
({
  id: TimezoneRegions.AmericaScoresbysund,
  name: "America/Scoresbysund",
  offset: TimezoneOffset.UTC_MINUS_1,
  timezone: Timezones.EasternGreenlandTime
});
({
  id: TimezoneRegions.AmericaShiprock,
  name: "America/Shiprock",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AmericaSitka,
  name: "America/Sitka",
  offset: TimezoneOffset.UTC_MINUS_9,
  timezone: Timezones.AlaskaStandardTime
});
({
  id: TimezoneRegions.AmericaStBarthelemy,
  name: "America/St_Barthelemy",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaStJohns,
  name: "America/St_Johns",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.NewfoundlandStandardTime
});
({
  id: TimezoneRegions.AmericaStKitts,
  name: "America/St_Kitts",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaStLucia,
  name: "America/St_Lucia",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaStThomas,
  name: "America/St_Thomas",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaStVincent,
  name: "America/St_Vincent",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaSwiftCurrent,
  name: "America/Swift_Current",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaTegucigalpa,
  name: "America/Tegucigalpa",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaThule,
  name: "America/Thule",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaThunderBay,
  name: "America/Thunder_Bay",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaTijuana,
  name: "America/Tijuana",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaToronto,
  name: "America/Toronto",
  offset: TimezoneOffset.UTC_MINUS_5,
  timezone: Timezones.EasternStandardTime
});
({
  id: TimezoneRegions.AmericaTortola,
  name: "America/Tortola",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AmericaVancouver,
  name: "America/Vancouver",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaWhitehorse,
  name: "America/Whitehorse",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.PacificStandardTime
});
({
  id: TimezoneRegions.AmericaWinnipeg,
  name: "America/Winnipeg",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AmericaYakutat,
  name: "America/Yakutat",
  offset: TimezoneOffset.UTC_MINUS_9,
  timezone: Timezones.AlaskaStandardTime
});
({
  id: TimezoneRegions.AmericaYellowknife,
  name: "America/Yellowknife",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.MountainStandardTime
});
({
  id: TimezoneRegions.AntarcticaCasey,
  name: "Antarctica/Casey",
  offset: TimezoneOffset.UTC_MINUS_8,
  timezone: Timezones.WesternStandardTime
});
({
  id: TimezoneRegions.AntarcticaDavis,
  name: "Antarctica/Davis",
  offset: TimezoneOffset.UTC_MINUS_7,
  timezone: Timezones.NewfoundlandStandardTime
});
({
  id: TimezoneRegions.AntarcticaDumontDUrville,
  name: "Antarctica/DumontDUrville",
  offset: TimezoneOffset.UTC_MINUS_10,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AntarcticaMacquarie,
  name: "Antarctica/Macquarie",
  offset: TimezoneOffset.UTC_MINUS_11,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AntarcticaMawson,
  name: "Antarctica/Mawson",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AntarcticaMcMurdo,
  name: "Antarctica/McMurdo",
  offset: TimezoneOffset.UTC_MINUS_12,
  timezone: Timezones.NewZealandStandardTime
});
({
  id: TimezoneRegions.AntarcticaPalmer,
  name: "Antarctica/Palmer",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.ChathamStandardTime
});
({
  id: TimezoneRegions.AntarcticaRothera,
  name: "Antarctica/Rothera",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.RotheraResearchStationTime
});
({
  id: TimezoneRegions.AntarcticaSyowa,
  name: "Antarctica/Syowa",
  offset: TimezoneOffset.UTC_MINUS_3,
  timezone: Timezones.ShowaStationTime
});
({
  id: TimezoneRegions.AntarcticaTroll,
  name: "Antarctica/Troll",
  offset: TimezoneOffset.UTC_MINUS_2,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.AntarcticaVostok,
  name: "Antarctica/Vostok",
  offset: TimezoneOffset.UTC_MINUS_6,
  timezone: Timezones.CentralStandardTime
});
({
  id: TimezoneRegions.ArcticLongyearbyen,
  name: "Arctic/Longyearbyen",
  offset: TimezoneOffset.UTC_MINUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.AsiaAden,
  name: "Asia/Aden",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.ArabiaStandardTime
});
({
  id: TimezoneRegions.AsiaAlmaty,
  name: "Asia/Almaty",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.AlmaAtaTime
});
({
  id: TimezoneRegions.AsiaAmman,
  name: "Asia/Amman",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaAnadyr,
  name: "Asia/Anadyr",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.NewCaledoniaTime
});
({
  id: TimezoneRegions.AsiaAqtau,
  name: "Asia/Aqtau",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.AqtobeTime
});
({
  id: TimezoneRegions.AsiaAqtobe,
  name: "Asia/Aqtobe",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.AqtobeTime
});
({
  id: TimezoneRegions.AsiaAshgabat,
  name: "Asia/Ashgabat",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.TurkmenistanTime
});
({
  id: TimezoneRegions.AsiaBaghdad,
  name: "Asia/Baghdad",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.ArabiaStandardTime
});
({
  id: TimezoneRegions.AsiaBahrain,
  name: "Asia/Bahrain",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.ArabiaStandardTime
});
({
  id: TimezoneRegions.AsiaBaku,
  name: "Asia/Baku",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.AzerbaijanTime
});
({
  id: TimezoneRegions.AsiaBangkok,
  name: "Asia/Bangkok",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.IndochinaTime
});
({
  id: TimezoneRegions.AsiaBarnaul,
  name: "Asia/Barnaul",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.KrasnoyarskTime
});
({
  id: TimezoneRegions.AsiaBeirut,
  name: "Asia/Beirut",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaBishkek,
  name: "Asia/Bishkek",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.KyrgyzstanTime
});
({
  id: TimezoneRegions.AsiaBrunei,
  name: "Asia/Brunei",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.BruneiTime
});
({
  id: TimezoneRegions.AsiaChita,
  name: "Asia/Chita",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.YakutskTime
});
({
  id: TimezoneRegions.AsiaChoibalsan,
  name: "Asia/Choibalsan",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.ChoibalsanStandardTime
});
({
  id: TimezoneRegions.AsiaColombo,
  name: "Asia/Colombo",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.IndianStandardTime
});
({
  id: TimezoneRegions.AsiaDamascus,
  name: "Asia/Damascus",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaDhaka,
  name: "Asia/Dhaka",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.BangladeshStandardTime
});
({
  id: TimezoneRegions.AsiaDili,
  name: "Asia/Dili",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.JapanStandardTime
});
({
  id: TimezoneRegions.AsiaDubai,
  name: "Asia/Dubai",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.GulfStandardTime
});
({
  id: TimezoneRegions.AsiaDushanbe,
  name: "Asia/Dushanbe",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.TajikistanTime
});
({
  id: TimezoneRegions.AsiaFamagusta,
  name: "Asia/Famagusta",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaGaza,
  name: "Asia/Gaza",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaHebron,
  name: "Asia/Hebron",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaHoChiMinh,
  name: "Asia/Ho_Chi_Minh",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.IndochinaTime
});
({
  id: TimezoneRegions.AsiaHongKong,
  name: "Asia/Hong_Kong",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.HongKongTime
});
({
  id: TimezoneRegions.AsiaHovd,
  name: "Asia/Hovd",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.HovdTime
});
({
  id: TimezoneRegions.AsiaIrkutsk,
  name: "Asia/Irkutsk",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.IrkutskTime
});
({
  id: TimezoneRegions.AsiaJakarta,
  name: "Asia/Jakarta",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.WesternIndonesianTime
});
({
  id: TimezoneRegions.AsiaJayapura,
  name: "Asia/Jayapura",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.JapanStandardTime
});
({
  id: TimezoneRegions.AsiaJerusalem,
  name: "Asia/Jerusalem",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.AsiaKabul,
  name: "Asia/Kabul",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.AfghanistanTime
});
({
  id: TimezoneRegions.AsiaKamchatka,
  name: "Asia/Kamchatka",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.KamchatkaTime
});
({
  id: TimezoneRegions.AsiaKarachi,
  name: "Asia/Karachi",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.PakistanStandardTime
});
({
  id: TimezoneRegions.AsiaKathmandu,
  name: "Asia/Kathmandu",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.NepalTime
});
({
  id: TimezoneRegions.AsiaKhandyga,
  name: "Asia/Khandyga",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.YakutskTime
});
({
  id: TimezoneRegions.AsiaKolkata,
  name: "Asia/Kolkata",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.IndianStandardTime
});
({
  id: TimezoneRegions.AsiaKrasnoyarsk,
  name: "Asia/Krasnoyarsk",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.KrasnoyarskTime
});
({
  id: TimezoneRegions.AsiaKualaLumpur,
  name: "Asia/Kuala_Lumpur",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.MalaysiaStandardTime
});
({
  id: TimezoneRegions.AsiaKuching,
  name: "Asia/Kuching",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.MalaysiaStandardTime
});
({
  id: TimezoneRegions.AsiaKuwait,
  name: "Asia/Kuwait",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.ArabiaStandardTime
});
({
  id: TimezoneRegions.AsiaMacau,
  name: "Asia/Macau",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.ChinaStandardTime
});
({
  id: TimezoneRegions.AsiaMagadan,
  name: "Asia/Magadan",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.MagadanTime
});
({
  id: TimezoneRegions.AsiaMakassar,
  name: "Asia/Makassar",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.MalaysiaTime
});
({
  id: TimezoneRegions.AsiaManila,
  name: "Asia/Manila",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.PhilippineTime
});
({
  id: TimezoneRegions.AsiaMuscat,
  name: "Asia/Muscat",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.GulfStandardTime
});
({
  id: TimezoneRegions.AsiaNovokuznetsk,
  name: "Asia/Novokuznetsk",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.NovosibirskTime
});
({
  id: TimezoneRegions.AsiaNovosibirsk,
  name: "Asia/Novosibirsk",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.NovosibirskTime
});
({
  id: TimezoneRegions.AsiaOmsk,
  name: "Asia/Omsk",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.OmskTime
});
({
  id: TimezoneRegions.AsiaOral,
  name: "Asia/Oral",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.OralTime
});
({
  id: TimezoneRegions.AsiaPhnomPenh,
  name: "Asia/Phnom_Penh",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.IndochinaTime
});
({
  id: TimezoneRegions.AsiaPontianak,
  name: "Asia/Pontianak",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.WesternIndonesianTime
});
({
  id: TimezoneRegions.AsiaPyongyang,
  name: "Asia/Pyongyang",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.KoreaStandardTime
});
({
  id: TimezoneRegions.AsiaQatar,
  name: "Asia/Qatar",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.ArabiaStandardTime
});
({
  id: TimezoneRegions.AsiaQyzylorda,
  name: "Asia/Qyzylorda",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.WestKazakhstanTime
});
({
  id: TimezoneRegions.AsiaRangoon,
  name: "Asia/Rangoon",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.MyanmarStandardTime
});
({
  id: TimezoneRegions.AsiaRiyadh,
  name: "Asia/Riyadh",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.ArabiaStandardTime
});
({
  id: TimezoneRegions.AsiaSakhalin,
  name: "Asia/Sakhalin",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.SakhalinIslandTime
});
({
  id: TimezoneRegions.AsiaSamarkand,
  name: "Asia/Samarkand",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.UzbekistanTime
});
({
  id: TimezoneRegions.AsiaSeoul,
  name: "Asia/Seoul",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.KoreaStandardTime
});
({
  id: TimezoneRegions.AsiaShanghai,
  name: "Asia/Shanghai",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.ChinaStandardTime
});
({
  id: TimezoneRegions.AsiaSingapore,
  name: "Asia/Singapore",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.SingaporeStandardTime
});
({
  id: TimezoneRegions.AsiaSrednekolymsk,
  name: "Asia/Srednekolymsk",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.SrednekolymskTime
});
({
  id: TimezoneRegions.AsiaTaipei,
  name: "Asia/Taipei",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.ChinaStandardTime
});
({
  id: TimezoneRegions.AsiaTashkent,
  name: "Asia/Tashkent",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.UzbekistanTime
});
({
  id: TimezoneRegions.AsiaTbilisi,
  name: "Asia/Tbilisi",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.GeorgiaStandardTime
});
({
  id: TimezoneRegions.AsiaTehran,
  name: "Asia/Tehran",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.IranStandardTime
});
({
  id: TimezoneRegions.AsiaThimphu,
  name: "Asia/Thimphu",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.BhutanTime
});
({
  id: TimezoneRegions.AsiaTokyo,
  name: "Asia/Tokyo",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.JapanStandardTime
});
({
  id: TimezoneRegions.AsiaTomsk,
  name: "Asia/Tomsk",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.KrasnoyarskTime
});
({
  id: TimezoneRegions.AsiaUlaanbaatar,
  name: "Asia/Ulaanbaatar",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.UlaanbaatarStandardTime
});
({
  id: TimezoneRegions.AsiaUrumqi,
  name: "Asia/Urumqi",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.ChinaStandardTime
});
({
  id: TimezoneRegions.AsiaUstNera,
  name: "Asia/Ust-Nera",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.VladivostokTime
});
({
  id: TimezoneRegions.AsiaVientiane,
  name: "Asia/Vientiane",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.IndochinaTime
});
({
  id: TimezoneRegions.AsiaVladivostok,
  name: "Asia/Vladivostok",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.VladivostokTime
});
({
  id: TimezoneRegions.AsiaYakutsk,
  name: "Asia/Yakutsk",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.YakutskTime
});
({
  id: TimezoneRegions.AsiaYekaterinburg,
  name: "Asia/Yekaterinburg",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.YekaterinburgTime
});
({
  id: TimezoneRegions.AsiaYerevan,
  name: "Asia/Yerevan",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.ArmeniaTime
});
({
  id: TimezoneRegions.AtlanticAzores,
  name: "Atlantic/Azores",
  offset: TimezoneOffset.UTC_MINUS_1,
  timezone: Timezones.AzoresStandardTime
});
({
  id: TimezoneRegions.AtlanticBermuda,
  name: "Atlantic/Bermuda",
  offset: TimezoneOffset.UTC_MINUS_4,
  timezone: Timezones.AtlanticStandardTime
});
({
  id: TimezoneRegions.AtlanticCanary,
  name: "Atlantic/Canary",
  offset: TimezoneOffset.UTC_MINUS_1,
  timezone: Timezones.WesternEuropeanTime
});
({
  id: TimezoneRegions.AtlanticCapeVerde,
  name: "Atlantic/Cape_Verde",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CapeVerdeTime
});
({
  id: TimezoneRegions.AtlanticFaroe,
  name: "Atlantic/Faroe",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.AtlanticMadeira,
  name: "Atlantic/Madeira",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.WesternEuropeanTime
});
({
  id: TimezoneRegions.AtlanticReykjavik,
  name: "Atlantic/Reykjavik",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.AtlanticSouthGeorgia,
  name: "Atlantic/South_Georgia",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.CoordinatedUniversalTime
});
({
  id: TimezoneRegions.AtlanticStHelena,
  name: "Atlantic/St_Helena",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.AtlanticStanley,
  name: "Atlantic/Stanley",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.FalklandIslandsTime
});
({
  id: TimezoneRegions.AustraliaAdelaide,
  name: "Australia/Adelaide",
  offset: TimezoneOffset.UTC_PLUS_9_30,
  timezone: Timezones.AustralianCentralStandardTime
});
({
  id: TimezoneRegions.AustraliaBrisbane,
  name: "Australia/Brisbane",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.AustraliaBrokenHill,
  name: "Australia/Broken_Hill",
  offset: TimezoneOffset.UTC_PLUS_9_30,
  timezone: Timezones.AustralianCentralStandardTime
});
({
  id: TimezoneRegions.AustraliaCanberra,
  name: "Australia/Canberra",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.AustraliaCurrie,
  name: "Australia/Currie",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.AustraliaDarwin,
  name: "Australia/Darwin",
  offset: TimezoneOffset.UTC_PLUS_9_30,
  timezone: Timezones.AustralianCentralStandardTime
});
({
  id: TimezoneRegions.AustraliaEucla,
  name: "Australia/Eucla",
  offset: TimezoneOffset.UTC_PLUS_8_45,
  timezone: Timezones.AustralianCentralWesternStandardTime
});
({
  id: TimezoneRegions.AustraliaHobart,
  name: "Australia/Hobart",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.AustraliaLindeman,
  name: "Australia/Lindeman",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.AustraliaLordHowe,
  name: "Australia/Lord_Howe",
  offset: TimezoneOffset.UTC_PLUS_10_30,
  timezone: Timezones.LordHoweStandardTime
});
({
  id: TimezoneRegions.AustraliaMelbourne,
  name: "Australia/Melbourne",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.AustraliaPerth,
  name: "Australia/Perth",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.AustralianWesternStandardTime
});
({
  id: TimezoneRegions.AustraliaSydney,
  name: "Australia/Sydney",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.AustralianEasternStandardTime
});
({
  id: TimezoneRegions.EuropeAmsterdam,
  name: "Europe/Amsterdam",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeAndorra,
  name: "Europe/Andorra",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeAthens,
  name: "Europe/Athens",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeBelgrade,
  name: "Europe/Belgrade",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeBerlin,
  name: "Europe/Berlin",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeBratislava,
  name: "Europe/Bratislava",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeBrussels,
  name: "Europe/Brussels",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeBucharest,
  name: "Europe/Bucharest",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeBudapest,
  name: "Europe/Budapest",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeBusingen,
  name: "Europe/Busingen",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeChisinau,
  name: "Europe/Chisinau",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeCopenhagen,
  name: "Europe/Copenhagen",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeDublin,
  name: "Europe/Dublin",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.EuropeGibraltar,
  name: "Europe/Gibraltar",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeGuernsey,
  name: "Europe/Guernsey",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeHelsinki,
  name: "Europe/Helsinki",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeIsleOfMan,
  name: "Europe/Isle_of_Man",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.EuropeIstanbul,
  name: "Europe/Istanbul",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeJersey,
  name: "Europe/Jersey",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeKaliningrad,
  name: "Europe/Kaliningrad",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeKiev,
  name: "Europe/Kiev",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeLisbon,
  name: "Europe/Lisbon",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.EuropeLjubljana,
  name: "Europe/Ljubljana",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeLondon,
  name: "Europe/London",
  offset: TimezoneOffset.UTC_0,
  timezone: Timezones.GreenwichMeanTime
});
({
  id: TimezoneRegions.EuropeLuxembourg,
  name: "Europe/Luxembourg",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeMadrid,
  name: "Europe/Madrid",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeMalta,
  name: "Europe/Malta",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeMariehamn,
  name: "Europe/Mariehamn",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeMinsk,
  name: "Europe/Minsk",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeMonaco,
  name: "Europe/Monaco",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeMoscow,
  name: "Europe/Moscow",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeOslo,
  name: "Europe/Oslo",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeParis,
  name: "Europe/Paris",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropePodgorica,
  name: "Europe/Podgorica",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropePrague,
  name: "Europe/Prague",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeRiga,
  name: "Europe/Riga",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeRome,
  name: "Europe/Rome",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeSamara,
  name: "Europe/Samara",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeSanMarino,
  name: "Europe/San_Marino",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeSarajevo,
  name: "Europe/Sarajevo",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeSimferopol,
  name: "Europe/Simferopol",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeSkopje,
  name: "Europe/Skopje",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeSofia,
  name: "Europe/Sofia",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeStockholm,
  name: "Europe/Stockholm",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeTallinn,
  name: "Europe/Tallinn",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeTirane,
  name: "Europe/Tirane",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeUzhgorod,
  name: "Europe/Uzhgorod",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeVaduz,
  name: "Europe/Vaduz",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeVatican,
  name: "Europe/Vatican",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeVienna,
  name: "Europe/Vienna",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeVilnius,
  name: "Europe/Vilnius",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeVolgograd,
  name: "Europe/Volgograd",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeWarsaw,
  name: "Europe/Warsaw",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeZagreb,
  name: "Europe/Zagreb",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.EuropeZaporozhye,
  name: "Europe/Zaporozhye",
  offset: TimezoneOffset.UTC_PLUS_2,
  timezone: Timezones.EasternEuropeanTime
});
({
  id: TimezoneRegions.EuropeZurich,
  name: "Europe/Zurich",
  offset: TimezoneOffset.UTC_PLUS_1,
  timezone: Timezones.CentralEuropeanTime
});
({
  id: TimezoneRegions.IndianAntananarivo,
  name: "Indian/Antananarivo",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.IndianChagos,
  name: "Indian/Chagos",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.IndianOceanTime
});
({
  id: TimezoneRegions.IndianChristmas,
  name: "Indian/Christmas",
  offset: TimezoneOffset.UTC_PLUS_7,
  timezone: Timezones.ChristmasIslandTime
});
({
  id: TimezoneRegions.IndianCocos,
  name: "Indian/Cocos",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.CocosIslandsTime
});
({
  id: TimezoneRegions.IndianComoro,
  name: "Indian/Comoro",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.IndianKerguelen,
  name: "Indian/Kerguelen",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.FrenchSouthernAndAntarcticTime
});
({
  id: TimezoneRegions.IndianMahe,
  name: "Indian/Mahe",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.SeychellesTime
});
({
  id: TimezoneRegions.IndianMaldives,
  name: "Indian/Maldives",
  offset: TimezoneOffset.UTC_PLUS_5,
  timezone: Timezones.MaldivesTime
});
({
  id: TimezoneRegions.IndianMauritius,
  name: "Indian/Mauritius",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.MauritiusTime
});
({
  id: TimezoneRegions.IndianMayotte,
  name: "Indian/Mayotte",
  offset: TimezoneOffset.UTC_PLUS_3,
  timezone: Timezones.EastAfricaTime
});
({
  id: TimezoneRegions.IndianReunion,
  name: "Indian/Reunion",
  offset: TimezoneOffset.UTC_PLUS_4,
  timezone: Timezones.ReunionTime
});
({
  id: TimezoneRegions.PacificApia,
  name: "Pacific/Apia",
  offset: TimezoneOffset.UTC_PLUS_13,
  timezone: Timezones.SamoaStandardTime
});
({
  id: TimezoneRegions.PacificAuckland,
  name: "Pacific/Auckland",
  offset: TimezoneOffset.UTC_PLUS_13,
  timezone: Timezones.NewZealandStandardTime
});
({
  id: TimezoneRegions.PacificChatham,
  name: "Pacific/Chatham",
  offset: TimezoneOffset.UTC_PLUS_13,
  timezone: Timezones.ChathamStandardTime
});
({
  id: TimezoneRegions.PacificEaster,
  name: "Pacific/Easter",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.EasterIslandStandardTime
});
({
  id: TimezoneRegions.PacificEfate,
  name: "Pacific/Efate",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.VanuatuTime
});
({
  id: TimezoneRegions.PacificEnderbury,
  name: "Pacific/Enderbury",
  offset: TimezoneOffset.UTC_PLUS_13,
  timezone: Timezones.TongaTime
});
({
  id: TimezoneRegions.PacificFakaofo,
  name: "Pacific/Fakaofo",
  offset: TimezoneOffset.UTC_PLUS_13,
  timezone: Timezones.TongaTime
});
({
  id: TimezoneRegions.PacificFiji,
  name: "Pacific/Fiji",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.FijiTime
});
({
  id: TimezoneRegions.PacificFunafuti,
  name: "Pacific/Funafuti",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.TuvaluTime
});
({
  id: TimezoneRegions.PacificGalapagos,
  name: "Pacific/Galapagos",
  offset: TimezoneOffset.UTC_PLUS_6,
  timezone: Timezones.GalapagosTime
});
({
  id: TimezoneRegions.PacificGambier,
  name: "Pacific/Gambier",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.GambierIslandTime
});
({
  id: TimezoneRegions.PacificGuadalcanal,
  name: "Pacific/Guadalcanal",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.SolomonIslandsTime
});
({
  id: TimezoneRegions.PacificGuam,
  name: "Pacific/Guam",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.ChamorroStandardTime
});
({
  id: TimezoneRegions.PacificHonolulu,
  name: "Pacific/Honolulu",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.HawaiiAleutianStandardTime
});
({
  id: TimezoneRegions.PacificJohnston,
  name: "Pacific/Johnston",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.HawaiiAleutianStandardTime
});
({
  id: TimezoneRegions.PacificKiritimati,
  name: "Pacific/Kiritimati",
  offset: TimezoneOffset.UTC_PLUS_14,
  timezone: Timezones.LineIslandsTime
});
({
  id: TimezoneRegions.PacificKosrae,
  name: "Pacific/Kosrae",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.KosraeTime
});
({
  id: TimezoneRegions.PacificKwajalein,
  name: "Pacific/Kwajalein",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.MarshallIslandsTime
});
({
  id: TimezoneRegions.PacificMajuro,
  name: "Pacific/Majuro",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.MarshallIslandsTime
});
({
  id: TimezoneRegions.PacificMarquesas,
  name: "Pacific/Marquesas",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.MarquesasIslandsTime
});
({
  id: TimezoneRegions.PacificMidway,
  name: "Pacific/Midway",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.SamoaStandardTime
});
({
  id: TimezoneRegions.PacificNauru,
  name: "Pacific/Nauru",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.NauruTime
});
({
  id: TimezoneRegions.PacificNiue,
  name: "Pacific/Niue",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.NiueTime
});
({
  id: TimezoneRegions.PacificNorfolk,
  name: "Pacific/Norfolk",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.NorfolkIslandTime
});
({
  id: TimezoneRegions.PacificNoumea,
  name: "Pacific/Noumea",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.NewCaledoniaTime
});
({
  id: TimezoneRegions.PacificPagoPago,
  name: "Pacific/Pago_Pago",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.SamoaStandardTime
});
({
  id: TimezoneRegions.PacificPalau,
  name: "Pacific/Palau",
  offset: TimezoneOffset.UTC_PLUS_9,
  timezone: Timezones.PalauTime
});
({
  id: TimezoneRegions.PacificPitcairn,
  name: "Pacific/Pitcairn",
  offset: TimezoneOffset.UTC_PLUS_8,
  timezone: Timezones.PitcairnTime
});
({
  id: TimezoneRegions.PacificPonape,
  name: "Pacific/Ponape",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.PohnpeiStandardTime
});
({
  id: TimezoneRegions.PacificPortMoresby,
  name: "Pacific/Port_Moresby",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.PapuaNewGuineaTime
});
({
  id: TimezoneRegions.PacificRarotonga,
  name: "Pacific/Rarotonga",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.CookIslandTime
});
({
  id: TimezoneRegions.PacificSaipan,
  name: "Pacific/Saipan",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.ChamorroStandardTime
});
({
  id: TimezoneRegions.PacificTahiti,
  name: "Pacific/Tahiti",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.TahitiTime
});
({
  id: TimezoneRegions.PacificTarawa,
  name: "Pacific/Tarawa",
  offset: TimezoneOffset.UTC_PLUS_12,
  timezone: Timezones.GilbertIslandTime
});
({
  id: TimezoneRegions.PacificTongatapu,
  name: "Pacific/Tongatapu",
  offset: TimezoneOffset.UTC_PLUS_13,
  timezone: Timezones.TongaTime
});
({
  id: TimezoneRegions.PacificChuuk,
  name: "Pacific/Chuuk",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.ChuukTime
});
({
  id: TimezoneRegions.PacificPohnpei,
  name: "Pacific/Pohnpei",
  offset: TimezoneOffset.UTC_PLUS_11,
  timezone: Timezones.PohnpeiStandardTime
});
({
  id: TimezoneRegions.PacificYap,
  name: "Pacific/Yap",
  offset: TimezoneOffset.UTC_PLUS_10,
  timezone: Timezones.ChuukTime
});
var commonProperties = [
  {
    property: "name",
    enumerable: false
  },
  {
    property: "message",
    enumerable: false
  },
  {
    property: "stack",
    enumerable: false
  },
  {
    property: "code",
    enumerable: true
  }
];
var toJsonWasCalled = Symbol(".toJSON was called");
var toJSON = (from) => {
  from[toJsonWasCalled] = true;
  const json = from.toJSON();
  delete from[toJsonWasCalled];
  return json;
};
var destroyCircular = ({
  from,
  seen,
  to_,
  forceEnumerable,
  maxDepth,
  depth
}) => {
  const to = to_ || (Array.isArray(from) ? [] : {});
  seen.push(from);
  if (depth >= maxDepth) {
    return to;
  }
  if (typeof from.toJSON === "function" && from[toJsonWasCalled] !== true) {
    return toJSON(from);
  }
  for (const [key, value] of Object.entries(from)) {
    if (typeof Buffer === "function" && Buffer.isBuffer(value)) {
      to[key] = "[object Buffer]";
      continue;
    }
    if (typeof value === "function") {
      continue;
    }
    if (!value || typeof value !== "object") {
      to[key] = value;
      continue;
    }
    if (!seen.includes(from[key])) {
      depth++;
      to[key] = destroyCircular({
        from: from[key],
        seen: [...seen],
        forceEnumerable,
        maxDepth,
        depth
      });
      continue;
    }
    to[key] = "[Circular]";
  }
  for (const { property, enumerable } of commonProperties) {
    if (typeof from[property] === "string") {
      Object.defineProperty(to, property, {
        value: from[property],
        enumerable: forceEnumerable ? true : enumerable,
        configurable: true,
        writable: true
      });
    }
  }
  return to;
};
function serializeError(value, options = {}) {
  const { maxDepth = Number.POSITIVE_INFINITY } = options;
  if (typeof value === "object" && value !== null) {
    return destroyCircular({
      from: value,
      seen: [],
      forceEnumerable: true,
      maxDepth,
      depth: 0
    });
  }
  if (typeof value === "function") {
    return `[Function: ${value.name || "anonymous"}]`;
  }
  return value;
}
var ExceptionCode;
(function(ExceptionCode2) {
  ExceptionCode2[ExceptionCode2["Warning"] = 999] = "Warning";
  ExceptionCode2[ExceptionCode2["Exception"] = 1e3] = "Exception";
  ExceptionCode2[ExceptionCode2["UnmanagedException"] = 1001] = "UnmanagedException";
  ExceptionCode2[ExceptionCode2["CaughtException"] = 1002] = "CaughtException";
  ExceptionCode2[ExceptionCode2["UncaughtException"] = 1003] = "UncaughtException";
  ExceptionCode2[ExceptionCode2["UnhandledPromiseRejectionException"] = 1004] = "UnhandledPromiseRejectionException";
  ExceptionCode2[ExceptionCode2["AuthenticationException"] = 2e3] = "AuthenticationException";
  ExceptionCode2[ExceptionCode2["AuthenticationExpiredAccessTokenException"] = 2001] = "AuthenticationExpiredAccessTokenException";
  ExceptionCode2[ExceptionCode2["AuthenticationInvalidAccessTokenException"] = 2002] = "AuthenticationInvalidAccessTokenException";
  ExceptionCode2[ExceptionCode2["AuthenticationMissingAccessTokenException"] = 2003] = "AuthenticationMissingAccessTokenException";
  ExceptionCode2[ExceptionCode2["AuthenticationExpiredRefreshTokenException"] = 2004] = "AuthenticationExpiredRefreshTokenException";
  ExceptionCode2[ExceptionCode2["AuthenticationInvalidRefreshTokenException"] = 2005] = "AuthenticationInvalidRefreshTokenException";
  ExceptionCode2[ExceptionCode2["AuthenticationMissingRefreshTokenException"] = 2006] = "AuthenticationMissingRefreshTokenException";
  ExceptionCode2[ExceptionCode2["AuthenticationMissingDeviceKeyException"] = 2007] = "AuthenticationMissingDeviceKeyException";
  ExceptionCode2[ExceptionCode2["AuthenticationUnAuthorizedAccessException"] = 2008] = "AuthenticationUnAuthorizedAccessException";
  ExceptionCode2[ExceptionCode2["AuthenticationCodeMismatchException"] = 2009] = "AuthenticationCodeMismatchException";
  ExceptionCode2[ExceptionCode2["AuthenticationExpiredCodeException"] = 2010] = "AuthenticationExpiredCodeException";
  ExceptionCode2[ExceptionCode2["AuthenticationLoginException"] = 2011] = "AuthenticationLoginException";
  ExceptionCode2[ExceptionCode2["AuthenticationLoginInvalidCredentialsException"] = 2012] = "AuthenticationLoginInvalidCredentialsException";
  ExceptionCode2[ExceptionCode2["AuthenticationLoginTooManyFailedAttemptsException"] = 2013] = "AuthenticationLoginTooManyFailedAttemptsException";
  ExceptionCode2[ExceptionCode2["AuthenticationLimitExceededException"] = 2014] = "AuthenticationLimitExceededException";
  ExceptionCode2[ExceptionCode2["AuthenticationUnauthorizedAccessException"] = 2015] = "AuthenticationUnauthorizedAccessException";
  ExceptionCode2[ExceptionCode2["AuthenticationTooManyRequestsException"] = 2016] = "AuthenticationTooManyRequestsException";
  ExceptionCode2[ExceptionCode2["AuthenticationUserNotFoundException"] = 2017] = "AuthenticationUserNotFoundException";
  ExceptionCode2[ExceptionCode2["AuthenticationSignupException"] = 2018] = "AuthenticationSignupException";
  ExceptionCode2[ExceptionCode2["AuthenticationUsernameAvailabilityCheckException"] = 2019] = "AuthenticationUsernameAvailabilityCheckException";
  ExceptionCode2[ExceptionCode2["AuthenticationUsernameExistsException"] = 2020] = "AuthenticationUsernameExistsException";
  ExceptionCode2[ExceptionCode2["AuthenticationAliasExistException"] = 2021] = "AuthenticationAliasExistException";
  ExceptionCode2[ExceptionCode2["AuthenticationCodeDeliveryFailureException"] = 2022] = "AuthenticationCodeDeliveryFailureException";
  ExceptionCode2[ExceptionCode2["AuthenticationMFAMethodNotFoundException"] = 2023] = "AuthenticationMFAMethodNotFoundException";
  ExceptionCode2[ExceptionCode2["AuthenticationNotAuthorizedException"] = 2024] = "AuthenticationNotAuthorizedException";
  ExceptionCode2[ExceptionCode2["AuthenticationPasswordResetRequiredException"] = 2025] = "AuthenticationPasswordResetRequiredException";
  ExceptionCode2[ExceptionCode2["AuthenticationUserNotConfirmedException"] = 2026] = "AuthenticationUserNotConfirmedException";
  ExceptionCode2[ExceptionCode2["DatabaseException"] = 3e3] = "DatabaseException";
  ExceptionCode2[ExceptionCode2["SequelizeNotInitializedException"] = 3001] = "SequelizeNotInitializedException";
  ExceptionCode2[ExceptionCode2["ProcessException"] = 4e3] = "ProcessException";
  ExceptionCode2[ExceptionCode2["ProcessWarningException"] = 4001] = "ProcessWarningException";
  ExceptionCode2[ExceptionCode2["KillProcessException"] = 4002] = "KillProcessException";
  ExceptionCode2[ExceptionCode2["FatalException"] = 4003] = "FatalException";
  ExceptionCode2[ExceptionCode2["ProcessSigTermException"] = 4004] = "ProcessSigTermException";
  ExceptionCode2[ExceptionCode2["ProcessSigIntException"] = 4005] = "ProcessSigIntException";
  ExceptionCode2[ExceptionCode2["MissingEnvironmentVariable"] = 4006] = "MissingEnvironmentVariable";
  ExceptionCode2[ExceptionCode2["NetworkException"] = 5e3] = "NetworkException";
  ExceptionCode2[ExceptionCode2["HttpException"] = 5001] = "HttpException";
  ExceptionCode2[ExceptionCode2["HttpRequestException"] = 5002] = "HttpRequestException";
  ExceptionCode2[ExceptionCode2["HttpRequestResourceNotFoundException"] = 5003] = "HttpRequestResourceNotFoundException";
  ExceptionCode2[ExceptionCode2["HttpResponseException"] = 5004] = "HttpResponseException";
  ExceptionCode2[ExceptionCode2["ServiceProviderException"] = 6e3] = "ServiceProviderException";
  ExceptionCode2[ExceptionCode2["AWSException"] = 6001] = "AWSException";
  ExceptionCode2[ExceptionCode2["AWSMissingAccessKeyException"] = 6002] = "AWSMissingAccessKeyException";
  ExceptionCode2[ExceptionCode2["AWSMissingSecretKeyException"] = 6003] = "AWSMissingSecretKeyException";
  ExceptionCode2[ExceptionCode2["CognitoException"] = 6004] = "CognitoException";
  ExceptionCode2[ExceptionCode2["CognitoInternalErrorException"] = 6005] = "CognitoInternalErrorException";
  ExceptionCode2[ExceptionCode2["CognitoInvalidEmailRoleAccessPolicyException"] = 6006] = "CognitoInvalidEmailRoleAccessPolicyException";
  ExceptionCode2[ExceptionCode2["CognitoInvalidLambdaResponseException"] = 6007] = "CognitoInvalidLambdaResponseException";
  ExceptionCode2[ExceptionCode2["CognitoUserLambdaValidationException"] = 6008] = "CognitoUserLambdaValidationException";
  ExceptionCode2[ExceptionCode2["CognitoInvalidParameterException"] = 6009] = "CognitoInvalidParameterException";
  ExceptionCode2[ExceptionCode2["CognitoInvalidSmsRoleAccessPolicyException"] = 6010] = "CognitoInvalidSmsRoleAccessPolicyException";
  ExceptionCode2[ExceptionCode2["CognitoInvalidSmsRoleTrustRelationshipException"] = 6011] = "CognitoInvalidSmsRoleTrustRelationshipException";
  ExceptionCode2[ExceptionCode2["CognitoInvalidUserPoolConfigurationException"] = 6012] = "CognitoInvalidUserPoolConfigurationException";
  ExceptionCode2[ExceptionCode2["CognitoResourceNotFoundException"] = 6013] = "CognitoResourceNotFoundException";
  ExceptionCode2[ExceptionCode2["CognitoMissingUserPoolClientIdException"] = 6014] = "CognitoMissingUserPoolClientIdException";
  ExceptionCode2[ExceptionCode2["CognitoMissingUserPoolIdException"] = 6015] = "CognitoMissingUserPoolIdException";
  ExceptionCode2[ExceptionCode2["CognitoUnexpectedLambdaException"] = 6016] = "CognitoUnexpectedLambdaException";
  ExceptionCode2[ExceptionCode2["StripeException"] = 6017] = "StripeException";
  ExceptionCode2[ExceptionCode2["StripeMissingSecretKeyException"] = 6018] = "StripeMissingSecretKeyException";
  ExceptionCode2[ExceptionCode2["StripeSubscriptionCreationFailedException"] = 6019] = "StripeSubscriptionCreationFailedException";
  ExceptionCode2[ExceptionCode2["StripePaymentMethodRequiredException"] = 6020] = "StripePaymentMethodRequiredException";
  ExceptionCode2[ExceptionCode2["UserException"] = 7e3] = "UserException";
  ExceptionCode2[ExceptionCode2["NullUserException"] = 7001] = "NullUserException";
  ExceptionCode2[ExceptionCode2["UserStateConflictException"] = 7002] = "UserStateConflictException";
  ExceptionCode2[ExceptionCode2["NullAccountException"] = 7003] = "NullAccountException";
  ExceptionCode2[ExceptionCode2["ValidationException"] = 8e3] = "ValidationException";
  ExceptionCode2[ExceptionCode2["InvalidTypeException"] = 8001] = "InvalidTypeException";
  ExceptionCode2[ExceptionCode2["MissingArgumentException"] = 8002] = "MissingArgumentException";
  ExceptionCode2[ExceptionCode2["MissingPropertyException"] = 8003] = "MissingPropertyException";
  ExceptionCode2[ExceptionCode2["InvalidArgumentException"] = 8004] = "InvalidArgumentException";
  ExceptionCode2[ExceptionCode2["InvalidPropertyException"] = 8005] = "InvalidPropertyException";
  ExceptionCode2[ExceptionCode2["MissingRequestBodyPropertyException"] = 8006] = "MissingRequestBodyPropertyException";
  ExceptionCode2[ExceptionCode2["MissingRequestUrlParameterException"] = 8007] = "MissingRequestUrlParameterException";
  ExceptionCode2[ExceptionCode2["MissingCookieException"] = 8008] = "MissingCookieException";
})(ExceptionCode || (ExceptionCode = {}));
var environment = getEnvironment();
var Exception = class extends Error {
  constructor(message, details) {
    super(message);
    __publicField(this, "cause");
    __publicField(this, "code", ExceptionCode.Exception);
    __publicField(this, "context");
    __publicField(this, "created");
    __publicField(this, "data");
    __publicField(this, "description");
    __publicField(this, "model");
    __publicField(this, "environment", environment.id);
    __publicField(this, "form");
    __publicField(this, "friendlyMessage", "An unknown error has occurred. :(");
    __publicField(this, "id");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "origin");
    __publicField(this, "pii");
    __publicField(this, "request");
    __publicField(this, "response");
    __publicField(this, "scope");
    __publicField(this, "remediation");
    __publicField(this, "tags");
    __publicField(this, "task");
    __publicField(this, "user");
    __publicField(this, "__proto__");
    var _a, _b, _c, _d;
    const actualProto = new.target.prototype;
    this.__proto__ = actualProto;
    if (Error.captureStackTrace) {
      Error.captureStackTrace((_a = details == null ? void 0 : details.cause) != null ? _a : this, Exception);
    }
    this.id = nanoid();
    this.name = this.constructor.name;
    this.created = new Date().toString();
    this.description = (_b = details == null ? void 0 : details.description) != null ? _b : this.description;
    this.remediation = (_c = details == null ? void 0 : details.remediation) != null ? _c : this.remediation;
    this.scope = (_d = details == null ? void 0 : details.scope) != null ? _d : this.scope;
    if (details) {
      const {
        cause,
        context,
        data,
        model,
        form,
        origin,
        pii,
        request,
        response,
        tags,
        task,
        user
      } = details;
      this.cause = cause;
      this.context = context;
      this.data = data;
      this.model = model;
      this.form = form;
      this.origin = origin;
      this.pii = pii;
      this.request = request;
      this.response = response;
      this.task = task;
      this.tags = tags;
      this.user = user;
    }
  }
  toJSON() {
    return serializeError(this);
  }
};
var RetryStrategy;
(function(RetryStrategy2) {
  RetryStrategy2["Simple"] = "simple";
  RetryStrategy2["ExponentialBackoff"] = "exponential";
  RetryStrategy2["CircuitBreaker"] = "circuit_breaker";
})(RetryStrategy || (RetryStrategy = {}));
var UnmanagedException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.UnmanagedException);
    __publicField(this, "description", `An "Error" object that isn't managed by AppLab`);
    __publicField(this, "friendlyMessage", "An unknown error has occurred.");
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3
      }
    });
  }
};
var CaughtException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CaughtException);
    __publicField(this, "description", "An exception was caught within a try block.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3
      }
    });
  }
};
var UncaughtException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.UncaughtException);
    __publicField(this, "description", "An uncaught exception bubbled up and was caught automatically.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3
      }
    });
  }
};
var UnhandledPromiseRejectionException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.UnhandledPromiseRejectionException);
    __publicField(this, "description", "An unhandled promise rejection was caught automatically.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3
      }
    });
  }
};
var ProcessException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.ProcessException);
    __publicField(this, "description", "A exception was caught in a process.");
    __publicField(this, "logLevel", LogLevel.Exception);
  }
};
var ProcessWarningException = class extends ProcessException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.ProcessWarningException);
    __publicField(this, "description", "A warning was caught in a process.");
    __publicField(this, "logLevel", LogLevel.Warning);
  }
};
var KillProcessException = class extends ProcessException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.KillProcessException);
    __publicField(this, "description", 'Exception thrown to kill a Node.js "gracefully".');
    __publicField(this, "logLevel", LogLevel.Critical);
  }
};
var ProcessSigTermException = class extends ProcessException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.ProcessSigTermException);
    __publicField(this, "description", "Process received SIGTERM termination code.");
    __publicField(this, "logLevel", LogLevel.Critical);
  }
};
var ProcessSigIntException = class extends ProcessException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.ProcessSigIntException);
    __publicField(this, "description", "Process received SIGINT termination code.");
    __publicField(this, "logLevel", LogLevel.Critical);
  }
};
var FatalException = class extends ProcessException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.FatalException);
    __publicField(this, "description", "An fatal exception occurred which has crashed the server.");
    __publicField(this, "logLevel", LogLevel.Critical);
  }
};
var MissingEnvironmentVariable = class extends ProcessException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.MissingEnvironmentVariable);
    __publicField(this, "description", "An environment variable is not set or unavailable.");
    __publicField(this, "logLevel", LogLevel.Critical);
  }
};
var logger = new import_logger.default();
var AuthenticationException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationException);
    __publicField(this, "description", "Generic or unknown exceptions associated with user authentication.");
    __publicField(this, "friendlyMessage", "An unknown error occurred.");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 401
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.CircuitBreaker
      }
    });
  }
};
var AuthenticationUnauthorizedAccessException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationUnauthorizedAccessException);
    __publicField(this, "description", "User lacks permissions to access the requested resource.");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 403
      },
      retry: false
    });
  }
};
var AuthenticationLimitExceededException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationLimitExceededException);
    __publicField(this, "description", "This exception is thrown when a user exceeds the limit for a requested AWS resource");
    __publicField(this, "friendlyMessage", "You are trying to access this resource too often.");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 429
      },
      retry: false
    });
  }
};
var AuthenticationNotAuthorizedException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationNotAuthorizedException);
    __publicField(this, "description", "The Auth user does not have permission to perform this action.");
    __publicField(this, "friendlyMessage", "You need to be logged in or have proper permissions to access this resource.");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 403
      },
      retry: false
    });
  }
};
var AuthenticationTooManyRequestsException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationTooManyRequestsException);
    __publicField(this, "description", "This exception is thrown when the user has made too many requests for a given operation.");
    __publicField(this, "friendlyMessage", "You are trying to access this resource too often.");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 429
      },
      retry: false
    });
  }
};
var AuthenticationUserNotFoundException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationUserNotFoundException);
    __publicField(this, "description", "This exception is thrown when the Auth service cannot find a user with the provided username.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: false
    });
  }
};
var AuthenticationPasswordResetRequiredException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationPasswordResetRequiredException);
    __publicField(this, "description", "This exception is thrown when a password reset is required.");
    __publicField(this, "friendlyMessage", "A password reset is required in order to login.");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 403
      },
      retry: false
    });
  }
};
var AuthenticationLoginException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationLoginException);
    __publicField(this, "description", "An exception occurred while logging a user in.");
    __publicField(this, "friendlyMessage", "An unknown error occurred.");
    __publicField(this, "logLevel", LogLevel.Critical);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: true
    });
  }
};
var AuthenticationLoginInvalidCredentialsException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationLoginInvalidCredentialsException);
    __publicField(this, "description", "Incorrect username or password provided.");
    __publicField(this, "friendlyMessage", "Incorrect username or password.");
    __publicField(this, "logLevel", LogLevel.Info);
    __publicField(this, "remediation", {
      response: {
        code: 401
      },
      retry: false
    });
  }
};
var AuthenticationLoginTooManyFailedAttemptsException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationLoginTooManyFailedAttemptsException);
    __publicField(this, "description", "This exception is thrown when the user has provided an incorrect username or password too many times.");
    __publicField(this, "friendlyMessage", "You've provided an incorrect username or password too many times.");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 429
      },
      retry: false
    });
  }
};
var AuthenticationMFAMethodNotFoundException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationMFAMethodNotFoundException);
    __publicField(this, "description", "This exception is thrown when the Auth service cannot find a multi-factor authentication (MFA) method.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 403
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var AuthenticationSignupException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationSignupException);
    __publicField(this, "description", "An exception occurred while signing up a user.");
    __publicField(this, "friendlyMessage", "An error occurred while signing up.");
    __publicField(this, "logLevel", LogLevel.Critical);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: true
    });
  }
};
var AuthenticationUsernameAvailabilityCheckException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationUsernameAvailabilityCheckException);
    __publicField(this, "description", "An exception occurred while checking if a username is available.");
    __publicField(this, "friendlyMessage", "An error occurred while checking if a username is available.");
    __publicField(this, "logLevel", LogLevel.Critical);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: true
    });
  }
};
var AuthenticationUsernameExistsException = class extends AuthenticationUsernameAvailabilityCheckException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationUsernameExistsException);
    __publicField(this, "description", "User with email or phone number already exists.");
    __publicField(this, "friendlyMessage", "A user with that email already exists.");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 400
      },
      retry: false
    });
  }
};
var AuthenticationAliasExistException = class extends AuthenticationUsernameAvailabilityCheckException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationAliasExistException);
    __publicField(this, "description", "This exception is thrown when a user tries to confirm the account with an email or phone number that has already been supplied as an alias from a different account. This exception tells user that an account with this email or phone already exists");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 400
      },
      retry: false
    });
  }
};
var AuthenticationExpiredRefreshTokenException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationExpiredRefreshTokenException);
    __publicField(this, "description", "The refresh token associated with a session has expired.");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 401
      },
      retry: false
    });
  }
};
var AuthenticationInvalidRefreshTokenException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationInvalidRefreshTokenException);
    __publicField(this, "description", "The refresh token associated with a session is invalid.");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 401
      },
      retry: false
    });
  }
};
var AuthenticationMissingRefreshTokenException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationMissingRefreshTokenException);
    __publicField(this, "description", "The refresh token associated with a session is missing.");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 401
      },
      retry: false
    });
  }
};
var AuthenticationCodeDeliveryFailureException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationCodeDeliveryFailureException);
    __publicField(this, "description", "This exception is thrown when a verification code fails to deliver successfully.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var AuthenticationCodeMismatchException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationCodeMismatchException);
    __publicField(this, "description", "The verification code provided is incorrect");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 400
      },
      retry: false
    });
  }
};
var AuthenticationExpiredCodeException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationExpiredCodeException);
    __publicField(this, "description", "The verification code provided has expired");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 403
      },
      retry: false
    });
  }
};
var AuthenticationUserNotConfirmedException = class extends AuthenticationException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AuthenticationUserNotConfirmedException);
    __publicField(this, "description", "This exception is thrown when a user who is not confirmed attempts to login.");
    __publicField(this, "friendlyMessage", "You haven't verified your email address or telephone number yet");
    __publicField(this, "logLevel", LogLevel.Warning);
    __publicField(this, "remediation", {
      response: {
        code: 403
      },
      retry: false
    });
  }
};
var DatabaseException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.DatabaseException);
    __publicField(this, "description", "Generic or unknown database exceptions.");
    __publicField(this, "logLevel", LogLevel.Exception);
  }
};
var SequelizeNotInitializedException = class extends DatabaseException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.SequelizeNotInitializedException);
    __publicField(this, "description", "Generic or unknown database exceptions.");
    __publicField(this, "logLevel", LogLevel.Exception);
  }
};
var NetworkException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.NetworkException);
    __publicField(this, "description", "A network related issue has occurred.");
    __publicField(this, "logLevel", LogLevel.Exception);
  }
};
var HttpException = class extends NetworkException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.HttpException);
    __publicField(this, "description", "A generic or unknown exception occurred related to an HTTP request.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.CircuitBreaker
      }
    });
  }
};
var HttpRequestException = class extends HttpException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.HttpRequestException);
    __publicField(this, "description", "Base class for generic or unknown exceptions occuring during an HTTP request.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.CircuitBreaker
      }
    });
  }
};
var HttpRequestResourceNotFoundException = class extends HttpRequestException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.HttpRequestResourceNotFoundException);
    __publicField(this, "description", "The requested HTTP resource could not be found.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 404
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.CircuitBreaker
      }
    });
  }
};
var MissingRequestBodyPropertyException = class extends HttpRequestException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.MissingRequestBodyPropertyException);
    __publicField(this, "description", "HTTP request body is missing a required property.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 400
      },
      retry: false
    });
  }
};
var MissingRequestUrlParameterException = class extends HttpRequestException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.MissingRequestUrlParameterException);
    __publicField(this, "description", "HTTP request URL is missing a required parameter.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 400
      },
      retry: false
    });
  }
};
var MissingCookieException = class extends HttpRequestException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.MissingCookieException);
    __publicField(this, "description", "A required cookie is missing.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: false
    });
  }
};
var HttpResponseException = class extends HttpException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.HttpRequestException);
    __publicField(this, "description", "Generic or unknown exceptions related to HTTP responses.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: false
    });
  }
};
var ServiceProviderException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.ServiceProviderException);
    __publicField(this, "description", "An error originating from a third-party or service provider occurred.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var AWSException = class extends ServiceProviderException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AWSException);
    __publicField(this, "description", "An exception originating from the AWS integration occurred.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var AWSMissingAccessKeyException = class extends AWSException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.StripeMissingSecretKeyException);
    __publicField(this, "description", "Missing AWS access key token.");
    __publicField(this, "logLevel", LogLevel.Critical);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: false
    });
  }
};
var CognitoException = class extends AWSException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.AWSException);
    __publicField(this, "description", "An exception originating from the AWS Cognito integration occurred.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var CognitoInternalErrorException = class extends CognitoException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CognitoInternalErrorException);
    __publicField(this, "description", "An internal error occurred originating from AWS Cognito.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var CognitoInvalidUserPoolConfigurationException = class extends CognitoException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CognitoInvalidUserPoolConfigurationException);
    __publicField(this, "description", "This exception is thrown when the user pool configuration is invalid.");
    __publicField(this, "logLevel", LogLevel.Critical);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: false
    });
  }
};
var CognitoInvalidEmailRoleAccessPolicyException = class extends CognitoException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CognitoInvalidEmailRoleAccessPolicyException);
    __publicField(this, "description", "There is an access policy exception for the role provided for email configuration.");
    __publicField(this, "logLevel", LogLevel.Critical);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: false
    });
  }
};
var CognitoInvalidSmsRoleAccessPolicyException = class extends CognitoException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CognitoInvalidSmsRoleAccessPolicyException);
    __publicField(this, "description", "This exception is returned when the role provided for SMS configuration does not have permission to publish using Amazon SNS.");
    __publicField(this, "logLevel", LogLevel.Critical);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: false
    });
  }
};
var CognitoInvalidSmsRoleTrustRelationshipException = class extends CognitoException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CognitoInvalidSmsRoleTrustRelationshipException);
    __publicField(this, "description", "This exception is thrown when the trust relationship is invalid for the role provided for SMS configuration. This can happen if you do not trust -idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.");
    __publicField(this, "logLevel", LogLevel.Critical);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: false
    });
  }
};
var CognitoMissingUserPoolClientIdException = class extends CognitoException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CognitoMissingUserPoolClientIdException);
    __publicField(this, "description", "Cognito user pool client ID configuration is missing.");
    __publicField(this, "logLevel", LogLevel.Critical);
  }
};
var CognitoMissingUserPoolIdException = class extends CognitoException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CognitoMissingUserPoolIdException);
    __publicField(this, "description", "Cognito user pool ID configuration is missing.");
    __publicField(this, "logLevel", LogLevel.Critical);
  }
};
var CognitoUnexpectedLambdaException = class extends CognitoException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CognitoUnexpectedLambdaException);
    __publicField(this, "description", "This exception is thrown when the Auth service encounters an unexpected exception with the AWS Lambda service.");
    __publicField(this, "logLevel", LogLevel.Critical);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var CognitoInvalidParameterException = class extends CognitoException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CognitoInvalidParameterException);
    __publicField(this, "description", "This exception is thrown when the Cognito service encounters an invalid parameter.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var CognitoInvalidLambdaResponseException = class extends CognitoException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CognitoInvalidLambdaResponseException);
    __publicField(this, "description", "This exception is thrown when the Amazon service encounters an invalid AWS Lambda response.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var CognitoResourceNotFoundException = class extends CognitoException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CognitoResourceNotFoundException);
    __publicField(this, "description", "This exception is thrown when the Cognito service cannot find the requested resource.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var CognitoUserLambdaValidationException = class extends CognitoException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.CognitoUserLambdaValidationException);
    __publicField(this, "description", "This exception is thrown when the Cognito service encounters a user validation exception with the AWS Lambda service.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var StripeException = class extends ServiceProviderException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.StripeException);
    __publicField(this, "description", "An exception occurred relating to Stripe.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var StripeMissingSecretKeyException = class extends StripeException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.StripeMissingSecretKeyException);
    __publicField(this, "description", "The Stripe secret key token is missing.");
    __publicField(this, "logLevel", LogLevel.Critical);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: false
    });
  }
};
var StripeSubscriptionCreationFailedException = class extends StripeException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.StripeSubscriptionCreationFailedException);
    __publicField(this, "description", "Stripe subscription creation failed.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var StripePaymentMethodRequiredException = class extends StripeException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.StripePaymentMethodRequiredException);
    __publicField(this, "description", "An updated payment method is required.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 500
      },
      retry: {
        limit: 3,
        strategy: RetryStrategy.Simple
      }
    });
  }
};
var UserException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.UserException);
    __publicField(this, "description", "Generic or unknown exceptions related to a user.");
    __publicField(this, "logLevel", LogLevel.Exception);
  }
};
var NullUserException = class extends UserException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.NullUserException);
    __publicField(this, "description", "An operation was performed on behalf a user that cannot be found in the database.");
    __publicField(this, "logLevel", LogLevel.Critical);
  }
};
var UserStateConflictException = class extends UserException {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.UserStateConflictException);
    __publicField(this, "description", "Exception used for user state that exists in one system or another and isn't being actively managed, or synced between all systems, or at least differences accounted for.");
    __publicField(this, "logLevel", LogLevel.Critical);
  }
};
var ValidationException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.ValidationException);
    __publicField(this, "description", "Generic or otherwise unknown input validation exception.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 400
      },
      retry: false
    });
  }
};
var InvalidTypeException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.InvalidTypeException);
    __publicField(this, "description", "Instance type is invalid.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 400
      },
      retry: false
    });
  }
};
var MissingArgumentException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.MissingArgumentException);
    __publicField(this, "description", "A required argument is missing.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 400
      },
      retry: false
    });
  }
};
var MissingPropertyException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.MissingPropertyException);
    __publicField(this, "description", "A required property is missing.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 400
      },
      retry: false
    });
  }
};
var InvalidArgumentException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.InvalidArgumentException);
    __publicField(this, "description", "An argument is invalid.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 400
      },
      retry: false
    });
  }
};
var InvalidPropertyException = class extends Exception {
  constructor() {
    super(...arguments);
    __publicField(this, "code", ExceptionCode.InvalidPropertyException);
    __publicField(this, "description", "An object property is invalid.");
    __publicField(this, "logLevel", LogLevel.Exception);
    __publicField(this, "remediation", {
      response: {
        code: 400
      },
      retry: false
    });
  }
};
var ExceptionMap = {
  [ExceptionCode.Exception]: Exception,
  [ExceptionCode.UnmanagedException]: UnmanagedException,
  [ExceptionCode.CaughtException]: CaughtException,
  [ExceptionCode.UncaughtException]: UncaughtException,
  [ExceptionCode.UnhandledPromiseRejectionException]: UnhandledPromiseRejectionException,
  [ExceptionCode.AuthenticationException]: AuthenticationException,
  [ExceptionCode.AuthenticationExpiredRefreshTokenException]: AuthenticationExpiredRefreshTokenException,
  [ExceptionCode.AuthenticationInvalidRefreshTokenException]: AuthenticationInvalidRefreshTokenException,
  [ExceptionCode.AuthenticationLoginException]: AuthenticationLoginException,
  [ExceptionCode.AuthenticationLoginInvalidCredentialsException]: AuthenticationLoginInvalidCredentialsException,
  [ExceptionCode.AuthenticationLoginTooManyFailedAttemptsException]: AuthenticationLoginTooManyFailedAttemptsException,
  [ExceptionCode.AuthenticationMissingDeviceKeyException]: AuthenticationMissingRefreshTokenException,
  [ExceptionCode.AuthenticationMissingRefreshTokenException]: AuthenticationMissingRefreshTokenException,
  [ExceptionCode.AuthenticationUnauthorizedAccessException]: AuthenticationUnauthorizedAccessException,
  [ExceptionCode.AuthenticationCodeMismatchException]: AuthenticationCodeMismatchException,
  [ExceptionCode.AuthenticationExpiredCodeException]: AuthenticationExpiredCodeException,
  [ExceptionCode.AuthenticationLimitExceededException]: AuthenticationLimitExceededException,
  [ExceptionCode.AuthenticationNotAuthorizedException]: AuthenticationNotAuthorizedException,
  [ExceptionCode.AuthenticationTooManyRequestsException]: AuthenticationTooManyRequestsException,
  [ExceptionCode.AuthenticationUserNotFoundException]: AuthenticationUserNotFoundException,
  [ExceptionCode.AuthenticationSignupException]: AuthenticationSignupException,
  [ExceptionCode.AuthenticationUsernameAvailabilityCheckException]: AuthenticationUsernameAvailabilityCheckException,
  [ExceptionCode.AuthenticationAliasExistException]: AuthenticationAliasExistException,
  [ExceptionCode.AuthenticationUsernameExistsException]: AuthenticationUsernameExistsException,
  [ExceptionCode.AuthenticationCodeDeliveryFailureException]: AuthenticationCodeDeliveryFailureException,
  [ExceptionCode.AuthenticationMFAMethodNotFoundException]: AuthenticationMFAMethodNotFoundException,
  [ExceptionCode.AuthenticationPasswordResetRequiredException]: AuthenticationPasswordResetRequiredException,
  [ExceptionCode.AuthenticationUserNotConfirmedException]: AuthenticationUserNotConfirmedException,
  [ExceptionCode.DatabaseException]: DatabaseException,
  [ExceptionCode.SequelizeNotInitializedException]: SequelizeNotInitializedException,
  [ExceptionCode.ServiceProviderException]: ServiceProviderException,
  [ExceptionCode.AWSException]: AWSException,
  [ExceptionCode.AWSMissingAccessKeyException]: AWSMissingAccessKeyException,
  [ExceptionCode.AWSMissingSecretKeyException]: AWSMissingAccessKeyException,
  [ExceptionCode.CognitoException]: CognitoException,
  [ExceptionCode.CognitoInternalErrorException]: CognitoInternalErrorException,
  [ExceptionCode.CognitoInvalidEmailRoleAccessPolicyException]: CognitoInvalidEmailRoleAccessPolicyException,
  [ExceptionCode.CognitoInvalidSmsRoleAccessPolicyException]: CognitoInvalidSmsRoleAccessPolicyException,
  [ExceptionCode.CognitoInvalidSmsRoleTrustRelationshipException]: CognitoInvalidSmsRoleTrustRelationshipException,
  [ExceptionCode.CognitoUnexpectedLambdaException]: CognitoUnexpectedLambdaException,
  [ExceptionCode.CognitoInvalidUserPoolConfigurationException]: CognitoInvalidUserPoolConfigurationException,
  [ExceptionCode.CognitoInvalidLambdaResponseException]: CognitoInvalidLambdaResponseException,
  [ExceptionCode.CognitoInvalidParameterException]: CognitoInvalidParameterException,
  [ExceptionCode.CognitoMissingUserPoolIdException]: CognitoMissingUserPoolIdException,
  [ExceptionCode.CognitoMissingUserPoolClientIdException]: CognitoMissingUserPoolClientIdException,
  [ExceptionCode.CognitoResourceNotFoundException]: CognitoResourceNotFoundException,
  [ExceptionCode.CognitoUserLambdaValidationException]: CognitoUserLambdaValidationException,
  [ExceptionCode.StripeException]: StripeException,
  [ExceptionCode.StripeSubscriptionCreationFailedException]: StripeSubscriptionCreationFailedException,
  [ExceptionCode.StripeMissingSecretKeyException]: StripeMissingSecretKeyException,
  [ExceptionCode.StripePaymentMethodRequiredException]: StripePaymentMethodRequiredException,
  [ExceptionCode.NetworkException]: NetworkException,
  [ExceptionCode.HttpException]: HttpException,
  [ExceptionCode.HttpRequestException]: HttpRequestException,
  [ExceptionCode.HttpRequestResourceNotFoundException]: HttpRequestResourceNotFoundException,
  [ExceptionCode.HttpResponseException]: HttpResponseException,
  [ExceptionCode.MissingRequestBodyPropertyException]: MissingRequestBodyPropertyException,
  [ExceptionCode.MissingRequestUrlParameterException]: MissingRequestUrlParameterException,
  [ExceptionCode.MissingCookieException]: MissingCookieException,
  [ExceptionCode.ValidationException]: ValidationException,
  [ExceptionCode.InvalidArgumentException]: InvalidArgumentException,
  [ExceptionCode.InvalidPropertyException]: InvalidPropertyException,
  [ExceptionCode.InvalidTypeException]: InvalidTypeException,
  [ExceptionCode.MissingArgumentException]: MissingArgumentException,
  [ExceptionCode.MissingPropertyException]: MissingPropertyException,
  [ExceptionCode.ProcessException]: ProcessException,
  [ExceptionCode.ProcessWarningException]: ProcessWarningException,
  [ExceptionCode.ProcessSigTermException]: ProcessSigTermException,
  [ExceptionCode.ProcessSigIntException]: ProcessSigIntException,
  [ExceptionCode.FatalException]: FatalException,
  [ExceptionCode.MissingEnvironmentVariable]: MissingEnvironmentVariable,
  [ExceptionCode.KillProcessException]: KillProcessException,
  [ExceptionCode.UserException]: UserException,
  [ExceptionCode.NullUserException]: NullUserException,
  [ExceptionCode.UserStateConflictException]: UserStateConflictException
};

// src/lib/aws-ssm.ts
var import_logger2 = __toESM(require("@srclaunch/logger"), 1);
var import_aws_sdk = __toESM(require("aws-sdk"), 1);
import_aws_sdk.default.config.update({ region: process.env.AWS_REGION });
var logger2 = new import_logger2.default();
async function getSecrets(paths) {
  try {
    const ssm = new import_aws_sdk.default.SSM({ region: process.env.AWS_REGION });
    const options = {
      Names: paths,
      WithDecryption: false
    };
    const parameterPromise = await ssm.getParameters(options).promise();
    logger2.debug({
      data: parameterPromise.Parameters,
      message: "AWS SSM Secrets"
    });
    return parameterPromise.Parameters;
  } catch (err) {
    const exception = new Exception(`Error caught in getSecret(): ${err.name}`, {
      cause: err,
      tags: {
        file: ""
      }
    });
    logger2.exception(exception);
  }
}
async function getParameters(paths) {
  try {
    const ssm = new import_aws_sdk.default.SSM({ region: process.env.AWS_REGION });
    const options = {
      Names: paths,
      WithDecryption: false
    };
    const parameterPromise = await ssm.getParameters(options).promise();
    logger2.debug({
      data: parameterPromise.Parameters,
      message: "AWS SSM Parameters"
    });
    return parameterPromise.Parameters;
  } catch (err) {
    const exception = new Exception(`Error caught in getParameters(): ${err.name}`, {
      cause: err,
      tags: {
        file: ""
      }
    });
    logger2.exception(exception);
  }
}
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getParameters,
  getSecrets
});
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=index.cjs.js.map
